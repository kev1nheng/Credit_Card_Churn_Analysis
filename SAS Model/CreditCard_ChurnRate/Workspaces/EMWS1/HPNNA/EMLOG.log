*------------------------------------------------------------*
User:                Kevin
Date:                April 09, 2022
Time:                15:40:43
Site:                70135990
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:40:21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 09, 2022
Time:                15:40:21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1FO8MXU "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1FO8MXU new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:40:21" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Kevin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70135990";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:40:21" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Kevin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
29184      proc freq data=EMWS1.HPNNA_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.HPNNA_VariableSet noprint;
29185      table ROLE*LEVEL/out=WORK.HPNNAMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.HPNNAMETA;
29186      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS1.HPNNA_VARIABLESET.
NOTE: The data set WORK.HPNNAMETA has 11 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
29187      proc print data=WORK.HPNNAMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.HPNNAMETA label noobs;
29188      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
29189      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
29190      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
29191      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
29192      run;
 
NOTE: There were 11 observations read from the data set WORK.HPNNAMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29193      title10;
MPRINT(EM_DIAGRAM):   title10;
29194      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.MdlComp2_TRAIN EMWS1.MdlComp2_TRAIN
EMWS1.MdlComp2_TRAIN EMWS1.MdlComp2_TRAIN EMWS1 MdlComp2_TRAIN
EMWS1.MdlComp2_TRAIN EMWS1.MdlComp2_TRAIN
EMWS1.MdlComp2_TRAIN EMWS1.MdlComp2_TRAIN EMWS1 MdlComp2_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.MdlComp2_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Attrition_Flag(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Attrition_Flag";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=Attrition_Flag));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Attrition_Flag";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_Attrition_Flag_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Attrition_Flag;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Attrition_Flag;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
29223      data WORK.HPNNA_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.HPNNA_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
29224      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
29225      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
29226         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
29227      set EMWS1.IDS_ATTRITION_FLAG_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_ATTRITION_FLAG_DM( where=(_TYPE_="TARGET"));
29228      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
29229      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
29230      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
29231      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
29232      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
29233      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
29234      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
29235      end;
MPRINT(EM_DIAGRAM):   end;
29236      output;
MPRINT(EM_DIAGRAM):   output;
29237      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.HPNNA_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
29238      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
29239      proc print data=WORK.HPNNA_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.HPNNA_EVENT noobs label;
29240      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
29241      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
29242      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
29243      run;
 
NOTE: There were 1 observations read from the data set WORK.HPNNA_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29244      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Attrition_Flag"."
29245      proc print data = EMWS1.Ids_Attrition_Flag_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_Attrition_Flag_DM noobs label;
29246      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
29247      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
29248      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
29249      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
29250      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
29251      run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
29252      title10;
MPRINT(EM_DIAGRAM):   title10;
29253      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * HPNNA: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * HPNNA: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'CreditCard_ChurnRate';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'CreditCard_ChurnRate';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * HPNNA: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Attrition_Flag;
MPRINT(EM_DECDATA):   length Attrition_Flag $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   Attrition_Flag="1";
MPRINT(EM_DECDATA):   COUNT=1627;
MPRINT(EM_DECDATA):   DATAPRIOR=0.16065962279055;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.16065962279055;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Attrition_Flag="0";
MPRINT(EM_DECDATA):   COUNT=8500;
MPRINT(EM_DECDATA):   DATAPRIOR=0.83934037720944;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.83934037720944;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Attrition_Flag";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Attrition_Flag_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Attrition_Flag_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Attrition_Flag";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Attrition_Flag_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Attrition_Flag_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
29742      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29743      * HPNNA: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * HPNNA: Generation of macros and macro variables;
29744      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
29745      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
29746      %let EMEXCEPTIONSTRING=;
29747      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29748      * TRAIN: HPNNA;
MPRINT(EM_DIAGRAM):   * TRAIN: HPNNA;
29749      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29750      %let EM_ACTION = TRAIN;
29751      %let syscc = 0;
29752      %macro main;
29753
29754         %if %upcase(&EM_ACTION) = CREATE %then %do;
29755             filename temp catalog 'sashelp.hpdm.hpdmneural_create.source';
29756             %include temp;
29757             filename temp;
29758             %hpdm_Neural_create;
29759         %end;
29760         %else
29761         %if %upcase(&EM_ACTION) = TRAIN %then %do;
29762             filename temp catalog 'sashelp.hpdm.hpdmneural_train.source';
29763             %include temp;
29764             filename temp;
29765             %hpdm_Neural_train;
29766         %end;
29767         %else
29768         %if %upcase(&EM_ACTION) = REPORT %then %do;
29769             filename temp catalog 'sashelp.hpdm.hpdmneural_report.source';
29770             %include temp;
29771             filename temp;
29772             %hpdm_Neural_report;
29773         %end;
29774         %else
29775            %if %upcase(&EM_ACTION) = OPENTABLE  %then %do;
29776                 filename temp catalog 'sashelp.hpdm.hpdmneural_actions.source';
29777                 %include temp;
29778                 filename temp;
29779                 %hpdm_Neural_OpenTable;
29780         %end;
29781         %else
29782         %if %upcase(&EM_ACTION) = CLOSETABLE  %then %do;
29783                filename temp catalog 'sashelp.hpdm.hpdmneural_actions.source';
29784                 %include temp;
29785                 filename temp;
29786                 %hpdm_Neural_CloseTable ;
29787         %end;
29788
29789      %mend main;
29790
29791      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.hpdm.hpdmneural_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.HPDM.HPDMNEURAL_TRAIN.SOURCE.
29792     +%Macro hpdm_Neural_Train;
29794     +   /* retrieve data to model based on presence of grid processing */
29795     +   %em_getname(key=HPDS2SCORE, type=FILE, extension=sas);
29796     +   %hpdm_dataprep(data=, out=, metadata=, code=, ROLE=TRAIN, where=,
29797     +        outDS2Code=&em_user_HPDS2SCORE, append=N, host=, nodes=, nthreads=, details=);
29799     +   /* check for the existence of EM_HPDM_TRAIN table */
29800     +   %if &EM_HPDM_TRAIN eq  %then %do;
29801     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
29802     +       %put &em_codebar;
29803     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
29804     +       %put &errormsg;
29805     +       %put &em_codebar;
29806     +       %goto doendm;
29807     +   %end;
29808     +   %else
29809     +       %let EMEXCEPTIONSTRING =;
29811     +   %if ^%sysfunc(exist(&EM_HPDM_TRAIN)) AND ^%sysfunc(exist(&EM_HPDM_TRAIN, VIEW)) %then %do;
29812     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
29813     +       %put &em_codebar;
29814     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
29815     +       %put &errormsg;
29816     +       %put &em_codebar;
29817     +       %goto doendm;
29818     +   %end;
29819     +   %else
29820     +       %let EMEXCEPTIONSTRING =;
29822     +   /* Check for the existence of at least one target variable*/
29823     +   %if  &EM_NUM_TARGET < 1 %then %do;
29824     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
29825     +        %put &em_codebar;
29826     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
29827     +        %put &errormsg;
29828     +        %put &em_codebar;
29829     +        %goto doendm;
29830     +   %end;
29831     +   %else
29832     +       %let EMEXCEPTIONSTRING =;
29834     +   /* if only 1 target and target level is ORDINAL, throw run time exception -- proc hpneural does not support ordinal target */
29835     +   %if ((&EM_NUM_TARGET eq 1) and (&EM_NUM_ORDINAL_TARGET eq 1)) %then %do;
29836     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
29837     +        %put &em_codebar;
29838     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine,ORDINALTARGETPRESENT_NOTE, NOQUOTE));
29839     +        %put &errormsg;
29840     +        %put &em_codebar;
29841     +        %goto doendm;
29842     +   %end;
29843     +   %else
29844     +       %let EMEXCEPTIONSTRING =;
29846     +   /* Check for the existence of one input variable*/
29847     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_NOMINAL_INPUT < 1)
29848     +         and (&EM_NUM_ORDINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED < 1)
29849     +         and (&EM_NUM_NOMINAL_REJECTED < 1) and (&EM_NUM_ORDINAL_REJECTED < 1) %then %do;
29850     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
29851     +        %put &em_codebar;
29852     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
29853     +        %put &errormsg;
29854     +        %put &em_codebar;
29855     +        %goto doendm;
29856     +   %end;
29857     +   %else
29858     +       %let EMEXCEPTIONSTRING =;
29860     +   /* data sets */
29861     +   %EM_GETNAME(KEY=OUTMODEL, type=DATA);
29862     +   %EM_GETNAME(key=SCOREDOUT, type=DATA);
29863     +   %EM_GETNAME(key=HPOUTFIT, type=DATA);
29864     +   %EM_GETNAME(key=TRAINHIST, type=DATA);
29865     +   %EM_GETNAME(key=ITERHIST, type=DATA);
29866     +   %EM_GETNAME(key=HIDDENOPTIONS, type=DATA);
29868     +   /* load hpneural macros */
29869     +   filename temp catalog 'sashelp.hpdm.hpdmneural_macros.source';
29870     +   %include temp;
29871     +   filename temp;
29873     +    /* run HPNeural model */
29874     +    %let out=;
29875     +    %let traindata = &EM_HPDM_TRAIN;
29876     +    %if "&em_hpdm_train" ne "&em_import_data" %then %do;
29877     +       %let out = &em_hpdm_train_score;
29878     +    %end;
29879     +    %else %do;
29880     +      /* check if a training and validate table are passed in as 2 seperate tables; if so, */
29881     +      /* create one table containing the _partind_ variable to be used for modelling       */
29882     +      %if (%sysfunc(exist(&em_import_data)) or %sysfunc(exist(&em_import_data, VIEW))) and
29883     +          ("&EM_IMPORT_VALIDATE" ne "") and (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE, VIEW))) %then %do;
29884     +          %let traindata = work.&EM_NODEID._traindata;
29885     +          data &traindata  / view=&traindata;
29886     +             set &em_import_data(in=_a) &em_import_validate(in=_b);
29887     +             if _a then _PartInd_ = 1;
29888     +             else _PartInd_=0;
29889     +          run;
29890     +      %end;
29891     +   %end;
29893     +   %em_checkmacro(name=EM_PROPERTY_ARCHITECTURE, value=LAYER1, global=Y);
29894     +   %em_checkmacro(name=EM_PROPERTY_HIDDEN,   value=3, global=Y);
29895     +   %em_checkmacro(name=EM_PROPERTY_InputStd, value=RANGE, global=Y);
29896     +   %em_checkmacro(name=EM_PROPERTY_HIDDENLAYERS, value=3, global=Y);
29897     +   %em_checkmacro(name=EM_PROPERTY_DIRECTCONN, value=N, global=Y);
29898     +   %em_checkmacro(name=EM_PROPERTY_TargetActivation, value=IDENTITY, global=Y);
29899     +   %em_checkmacro(name=EM_PROPERTY_TargetError, value=NORMAL, global=Y);
29900     +   %em_checkmacro(name=EM_PROPERTY_TargetStd, value=RANGE, global=Y);
29902     +   %em_checkmacro(name=EM_PROPERTY_NUMTRIES, value=2, global=Y);
29903     +   %em_checkmacro(name=EM_PROPERTY_MAXITER,  value=300, global=Y);
29904     +   %em_checkmacro(name=EM_PROPERTY_OPTMETHOD, value=LBFGS, global=Y);
29905     +   %em_checkmacro(name=EM_PROPERTY_USEVALID,  value=N, global=Y);
29906     +   %em_checkmacro(name=EM_PROPERTY_USEINVERSE, value=N, global=Y);
29907     +   %em_checkmacro(name=EM_PROPERTY_MISSASLVL, value=N, global=Y);
29909     +   %if &EM_NUM_INTERVAL_TARGET %then %do;
29910     +      %if "&EM_PROPERTY_TargetActivation" eq "EXP" and "&EM_PROPERTY_TargetError" eq "NORMAL" %then %do;
29911     +        %let EMEXCEPTIONSTRING = exception.server.hpneural.targetacterror;
29912     +        %put &em_codebar;
29913     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, hpneural_targetacterror_err, NOQUOTE));
29914     +        %put &errormsg;
29915     +        %put &em_codebar;
29916     +        %goto doendm;
29917     +      %end;
29918     +      %else %if "&EM_PROPERTY_TargetActivation" ne "EXP" and "&EM_PROPERTY_TargetError" ne "NORMAL" %then %do;
29919     +        %let EMEXCEPTIONSTRING = exception.server.hpneural.targetacterror;
29920     +        %put &em_codebar;
29921     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, hpneural_targetacterror_err, NOQUOTE));
29922     +        %put &errormsg;
29923     +        %put &em_codebar;
29924     +        %goto doendm;
29925     +      %end;
29926     +      %else %if ("&EM_PROPERTY_TargetStd" eq "ZSCORE" or "&EM_PROPERTY_TargetStd" eq "NONE") and "&EM_PROPERTY_TargetActivation" ne "IDENTITY" %then %do;
29927     +        %let EMEXCEPTIONSTRING = exception.server.hpneural.targetstdact;
29928     +        %put &em_codebar;
29929     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, hpneural_targetstdact_err, NOQUOTE));
29930     +        %put &errormsg;
29931     +        %put &em_codebar;
29932     +        %goto doendm;
29933     +      %end;
29935     +      %else %let EMEXCEPTIONSTRING =;
29936     +   %end;
29937     +   %else %let EMEXCEPTIONSTRING =;
29940     +    filename flowref "&EM_FILE_EMFLOWSCORECODE";
29941     +    %HPDM_HPNeural(indata=&traindata,
29942     +           IntTarget=%EM_INTERVAL_TARGET,
29943     +           NomTarget=%EM_NOMINAL_TARGET %EM_BINARY_TARGET,
29944     +           FreqVar = %EM_FREQ,
29945     +           outmodel=&EM_USER_OUTMODEL,
29946     +           inputstd=&EM_PROPERTY_InputStd,
29947     +           architecture=&EM_PROPERTY_ARCHITECTURE,
29948     +           hidden=&EM_PROPERTY_HIDDEN,
29949     +           hiddenlayers=&EM_PROPERTY_HIDDENLAYERS,
29950     +           directconn=&EM_PROPERTY_DIRECTCONN,
29951     +           hoptsds=&EM_USER_HIDDENOPTIONS,
29952     +           targetact=&EM_PROPERTY_TargetActivation,
29953     +           targeterror=&EM_PROPERTY_TargetError,
29954     +           targetstd=&EM_PROPERTY_TargetStd,
29955     +           numtries=&EM_PROPERTY_NUMTRIES,
29956     +           maxiter=&EM_PROPERTY_MAXITER,
29957     +           optmethod=&EM_PROPERTY_OPTMETHOD,
29958     +           usevalid=&EM_PROPERTY_USEVALID,
29959     +           useinverse=&EM_PROPERTY_USEINVERSE,
29960     +           missaslvl=&EM_PROPERTY_MISSASLVL,
29961     +           %if &out ne "" %then %do;
29962     +             out=&out,
29963     +           %end;
29964     +           hpoutfit=&EM_USER_HPOUTFIT,
29965     +           trainhist=&EM_USER_TRAINHIST,
29966     +           iterhist=&EM_USER_ITERHIST,
29967     +           fileref=flowref
29968     +           );
29970     +    %if &syserr >4 %then %do;
29971     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
29972     +       %goto doendm;
29973     +    %end;
29975     +    /* delete temporary traindata is training and validate are both passed into the node */
29976     +    %if "&traindata" ne "&em_hpdm_train" %then %do;
29977     +      proc datasets lib=work nolist;
29978     +        delete &EM_NODEID._traindata /mt=view;
29979     +      run;
29980     +    %end;
29982     +    /* create publish scoring code from flow score code */
29983     +    filename pubref  "&EM_FILE_EMPUBLISHSCORECODE";
29984     +    %em_copyfile(infref=flowref, outfref=pubref, append=N);
29986     +    %if "&out" ne "" %then %do;
29987     +        %if "&EM_NUM_TARGET" = "1" %then %do;
29989     +           /* retrieve name of prevdar created by hpneural */
29990     +           data _null_;
29991     +             set &EM_DEC_DECMETA(where=(_type_="TARGET"));
29992     +             call symput('targetEvent', event);
29993     +             call symput('targetLvl', level);
29994     +           run;
29995     +           %if &targetLvl ne INTERVAL %then %do;
29996     +             %let newtargetEvent = %nrbquote(%sysfunc(tranwrd(&targetEvent, %str(%"),"")));
29997     +             data _null_;
29998     +               set &EM_DEC_DECMETA(where=(Level="&newtargetEvent" and _type_="PREDICTED"));
29999     +               call symput('predVar', strip(Variable));
30000     +             run;
30001     +           %end;
30002     +           %else %do;
30003     +             data _null_;
30004     +               set &EM_DEC_DECMETA(where=(_type_="PREDICTED"));
30005     +               call symput('predVar', strip(Variable));
30006     +             run;
30007     +           %end;
30008     +           %hpdm_node_assess(data=&out, DECMETA=&EM_DEC_DECMETA, predVar=&predvar);
30009     +        %end;
30010     +        %else %do;
30011     +           %let _hpdmDecmeta =;
30012     +           %let hpdmTarget= ;
30013     +           data _hpneuralTarget;
30014     +              set &em_data_variableset;
30015     +              where ROLE='TARGET' and USE in('D','Y') and LEVEL^='ORDINAL';
30016     +              keep NAME;
30017     +           run;
30018     +           proc sort data=_hpneuralTarget;
30019     +              by NAME;
30020     +           run;
30021     +           proc sort data=EM_TARGETDECINFO;
30022     +              by TARGET;
30023     +           run;
30024     +           %let hpdmDecmeta =;
30025     +           data _hpNeuralTarget;
30026     +              merge _hpNeuralTarget(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME));
30027     +              by NAME;
30028     +              if _a then do;
30029     +                 call symput('_hpdmDecmeta', strip(symget('_hpdmDecMeta'))!!' '!!trim(DECMETA));
30030     +              end;
30031     +           run;
30032     +           proc delete data=_hpNeuralTarget;run;
30034     +           %do ik= 1 %to %eval(&EM_NUM_TARGET - &EM_NUM_ORDINAL_TARGET);
30035     +               %let decmeta = %scan(&_hpdmDecmeta, &ik, %str( ));
30037     +               /* retrieve name of prevdar created by hpneural */
30038     +               data _null_;
30039     +                 set &decmeta(where=(_type_="TARGET"));
30040     +                 call symput('targetEvent', event);
30041     +                 call symput('target_name', variable);
30042     +                 call symput('targetLvl', level);
30043     +               run;
30044     +               %if &TargetLvl ne INTERVAL %then %do;
30045     +                 %let newtargetEvent = %nrbquote(%sysfunc(tranwrd(&targetEvent, %str(%"),"")));
30046     +                 data _null_;
30047     +                   set &decmeta(where=(Level="&newtargetEvent" and _type_="PREDICTED"));
30048     +                   call symput('predVar', strip(Variable));
30049     +                 run;
30050     +               %end;
30051     +               %else %do;
30052     +                 data _null_;
30053     +                   set &decmeta(where=(_type_="PREDICTED"));
30054     +                   call symput('predVar', strip(Variable));
30055     +                 run;
30056     +               %end;
30057     +               %hpdm_node_assess(data=&out, DECMETA=&decmeta, predvar=&predVar, targetIndex=&ik);
30058     +           %end;
30059     +         %end;
30060     +         proc delete data=&out;run;
30061     +    %end;
30063     +    %if &sysrc >4 %then %do;
30064     +      %goto doendem;
30065     +    %end;
30067     +    /* create decmeta to pass into assessment macro, em_model to generate scoring code and fit stats; */
30068     +    %if "&EM_NUM_TARGET" = "1" %then %do;
30069     +      %em_model(DATA=, TARGET=&EM_DEC_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=Y, RESIDUALS=Y);
30070     +    %end;
30071     +    %else %do;
30072     +      %do i= 1 %to &em_num_binary_target;
30073     +         %let tarname = %scan(%EM_BINARY_TARGET, &i);
30074     +         %em_model(DATA=, TARGET=&tarname, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=Y, RESIDUALS=Y);
30075     +      %end;
30076     +      %do i= 1 %to &em_num_nominal_target;
30077     +         %let tarname = %scan(%EM_NOMINAL_TARGET, &i);
30078     +         %em_model(DATA=, TARGET=&tarname, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=Y, RESIDUALS=Y);
30079     +      %end;
30080     +      %do i= 1 %to &em_num_interval_target;
30081     +         %let tarname = %scan(%EM_INTERVAL_TARGET, &i);
30082     +         %em_model(DATA=, TARGET=&tarname, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=Y, RESIDUALS=Y);
30083     +      %end;
30084     +    %end;
30086     +    filename pubref;
30087     +    filename flowref;
30089     +    %doendm:
30091     +%Mend hpdm_Neural_Train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_DATAPREP):   options validvarname=ANY;
MPRINT(HPDM_DATAPREP):   filename _hpflow catalog 'sashelp.emutil.em_pathscorecode.source';
NOTE: %INCLUDE (level 1) file _HPFLOW is file SASHELP.EMUTIL.EM_PATHSCORECODE.SOURCE.
30093     +%macro EM_PATHSCORECODE(NODEID=, STARTNODEID=, FLOW=, PUBLISH=, HPDM=, OUTPATH=);
30094     +   proc display c=sashelp.emcore.pathscorecode.scl;
30095     +   run;
30096     +%mend EM_PATHSCORECODE;
30097     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(HPDM_DATAPREP):   filename _hpflow;
NOTE: Fileref _HPFLOW has been deassigned.
MPRINT(EM_PATHSCORECODE):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_PATHSCORECODE):   run;
 
30098      data WORK._SCORECODE;
MPRINT(EM_PATHSCORECODE):   data WORK._SCORECODE;
30099      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
MPRINT(EM_PATHSCORECODE):   length Parent $32 nodelabel $32 description $200 tooltype $32 component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8 accumulatedScoreCode $1;
30100      nodelabel="Ids";
MPRINT(EM_PATHSCORECODE):   nodelabel="Ids";
30101      parent=" ";
MPRINT(EM_PATHSCORECODE):   parent=" ";
30102      description="Input Data Source";
MPRINT(EM_PATHSCORECODE):   description="Input Data Source";
30103      component="DataSource";
MPRINT(EM_PATHSCORECODE):   component="DataSource";
30104      tooltype="SAMPLE";
MPRINT(EM_PATHSCORECODE):   tooltype="SAMPLE";
30105      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30106      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMPUBLISHSCORECODE";
30107      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30108      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30109      output;
MPRINT(EM_PATHSCORECODE):   output;
30110      nodelabel="Varsel";
MPRINT(EM_PATHSCORECODE):   nodelabel="Varsel";
30111      parent="Ids";
MPRINT(EM_PATHSCORECODE):   parent="Ids";
30112      description="Variable selection  Class";
MPRINT(EM_PATHSCORECODE):   description="Variable selection  Class";
30113      component="VariableSelection";
MPRINT(EM_PATHSCORECODE):   component="VariableSelection";
30114      tooltype="EXPLORE";
MPRINT(EM_PATHSCORECODE):   tooltype="EXPLORE";
30115      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30116      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMFLOWSCORECODE";
30117      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30118      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30119      output;
MPRINT(EM_PATHSCORECODE):   output;
30120      nodelabel="Trans";
MPRINT(EM_PATHSCORECODE):   nodelabel="Trans";
30121      parent="Varsel";
MPRINT(EM_PATHSCORECODE):   parent="Varsel";
30122      description="Transform";
MPRINT(EM_PATHSCORECODE):   description="Transform";
30123      component="Transform";
MPRINT(EM_PATHSCORECODE):   component="Transform";
30124      tooltype="MODIFY";
MPRINT(EM_PATHSCORECODE):   tooltype="MODIFY";
30125      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30126      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMPUBLISHSCORECODE";
30127      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30128      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30129      output;
MPRINT(EM_PATHSCORECODE):   output;
30130      nodelabel="Meta";
MPRINT(EM_PATHSCORECODE):   nodelabel="Meta";
30131      parent="Trans";
MPRINT(EM_PATHSCORECODE):   parent="Trans";
30132      description="Metadata Node";
MPRINT(EM_PATHSCORECODE):   description="Metadata Node";
30133      component="Metadata";
MPRINT(EM_PATHSCORECODE):   component="Metadata";
30134      tooltype="UTILITY";
MPRINT(EM_PATHSCORECODE):   tooltype="UTILITY";
30135      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30136      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMPUBLISHSCORECODE";
30137      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30138      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30139      output;
MPRINT(EM_PATHSCORECODE):   output;
30140      nodelabel="Trans2";
MPRINT(EM_PATHSCORECODE):   nodelabel="Trans2";
30141      parent="Meta";
MPRINT(EM_PATHSCORECODE):   parent="Meta";
30142      description="Transform";
MPRINT(EM_PATHSCORECODE):   description="Transform";
30143      component="Transform";
MPRINT(EM_PATHSCORECODE):   component="Transform";
30144      tooltype="MODIFY";
MPRINT(EM_PATHSCORECODE):   tooltype="MODIFY";
30145      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30146      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMPUBLISHSCORECODE";
30147      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30148      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30149      output;
MPRINT(EM_PATHSCORECODE):   output;
30150      nodelabel="Meta2";
MPRINT(EM_PATHSCORECODE):   nodelabel="Meta2";
30151      parent="Trans2";
MPRINT(EM_PATHSCORECODE):   parent="Trans2";
30152      description="Metadata Node";
MPRINT(EM_PATHSCORECODE):   description="Metadata Node";
30153      component="Metadata";
MPRINT(EM_PATHSCORECODE):   component="Metadata";
30154      tooltype="UTILITY";
MPRINT(EM_PATHSCORECODE):   tooltype="UTILITY";
30155      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30156      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMPUBLISHSCORECODE";
30157      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30158      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30159      output;
MPRINT(EM_PATHSCORECODE):   output;
30160      nodelabel="Part2";
MPRINT(EM_PATHSCORECODE):   nodelabel="Part2";
30161      parent="Meta2";
MPRINT(EM_PATHSCORECODE):   parent="Meta2";
30162      description="Partition Class";
MPRINT(EM_PATHSCORECODE):   description="Partition Class";
30163      component="Partition";
MPRINT(EM_PATHSCORECODE):   component="Partition";
30164      tooltype="SAMPLE";
MPRINT(EM_PATHSCORECODE):   tooltype="SAMPLE";
30165      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30166      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMFLOWSCORECODE";
30167      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30168      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30169      output;
MPRINT(EM_PATHSCORECODE):   output;
30170      nodelabel="Tree4";
MPRINT(EM_PATHSCORECODE):   nodelabel="Tree4";
30171      parent="Part2";
MPRINT(EM_PATHSCORECODE):   parent="Part2";
30172      description="Extension Class";
MPRINT(EM_PATHSCORECODE):   description="Extension Class";
30173      component="DecisionTree";
MPRINT(EM_PATHSCORECODE):   component="DecisionTree";
30174      tooltype="MODEL";
MPRINT(EM_PATHSCORECODE):   tooltype="MODEL";
30175      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30176      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMPUBLISHSCORECODE";
30177      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30178      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30179      output;
MPRINT(EM_PATHSCORECODE):   output;
30180      nodelabel="MdlComp2";
MPRINT(EM_PATHSCORECODE):   nodelabel="MdlComp2";
30181      parent="Tree4";
MPRINT(EM_PATHSCORECODE):   parent="Tree4";
30182      description="Model Compare Class";
MPRINT(EM_PATHSCORECODE):   description="Model Compare Class";
30183      component="ModelCompare";
MPRINT(EM_PATHSCORECODE):   component="ModelCompare";
30184      tooltype="ASSESS";
MPRINT(EM_PATHSCORECODE):   tooltype="ASSESS";
30185      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   FlowScoreCodeFormat="DATASTEP";
30186      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_PATHSCORECODE):   PublishScoreCode="EMFLOWSCORECODE";
30187      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_PATHSCORECODE):   PublishScoreCodeFormat="DATASTEP";
30188      accumulatedScoreCode= "N";
MPRINT(EM_PATHSCORECODE):   accumulatedScoreCode= "N";
30189      output;
MPRINT(EM_PATHSCORECODE):   output;
30190      run;
MPRINT(EM_PATHSCORECODE):   run;
 
NOTE: The data set WORK._SCORECODE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_PATHSCORECODE):
MPRINT(HPDM_DATAPREP):  ;
MPRINT(HPDM_DATAPREP):   data _null_;
MPRINT(HPDM_DATAPREP):   set WORK._SCORECODE end=eof;
MPRINT(HPDM_DATAPREP):   where upcase(component) in('DATASOURCE', 'HPTMINE', 'HPDMPARTITION');
MPRINT(HPDM_DATAPREP):   if upcase(component) = 'DATASOURCE' then call symput('idsNodeid', trim(upcase(nodelabel)));
MPRINT(HPDM_DATAPREP):   if eof then do;
MPRINT(HPDM_DATAPREP):   call symput('hp_lastNodeid', trim(nodelabel));
MPRINT(HPDM_DATAPREP):   call symput('hp_lastComponent', trim(upcase(Component)));
MPRINT(HPDM_DATAPREP):   end;
MPRINT(HPDM_DATAPREP):   run;
 
NOTE: There were 1 observations read from the data set WORK._SCORECODE.
      WHERE UPCASE(component) in ('DATASOURCE', 'HPDMPARTITION', 'HPTMINE');
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.00 seconds
 
 
MPRINT(HPDM_DATAPREP):   data _null_;
MPRINT(HPDM_DATAPREP):   set EMWS1.Tree4_EMINFO;
MPRINT(HPDM_DATAPREP):   where KEY in("IDSTABLE", "HPDMSAMPLE", "HPPART_DATA", "HPPART");
MPRINT(HPDM_DATAPREP):   select(upcase(KEY));
MPRINT(HPDM_DATAPREP):   when("HPPART_DATA") do;
MPRINT(HPDM_DATAPREP):   call symput('hpdm_partdata', trim(DATA));
MPRINT(HPDM_DATAPREP):   call symput('hpdm_partitionvar', '_PartInd_');
MPRINT(HPDM_DATAPREP):   end;
MPRINT(HPDM_DATAPREP):   when("IDSTABLE") call symput('inData', trim(DATA));
MPRINT(HPDM_DATAPREP):   when("HPDMSAMPLE") call symput('hpdmSample', trim(DATA));
MPRINT(HPDM_DATAPREP):   when("HPPART") call symput('hpdm_partid', trim(DATA));
MPRINT(HPDM_DATAPREP):   otherwise;
MPRINT(HPDM_DATAPREP):   end;
MPRINT(HPDM_DATAPREP):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMINFO.
      WHERE KEY in ('HPDMSAMPLE', 'HPPART', 'HPPART_DATA', 'IDSTABLE');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_DATAPREP):   data _null_;
MPRINT(HPDM_DATAPREP):   set EMWS1.Tree4_EMINFO end=eof;
MPRINT(HPDM_DATAPREP):   where TARGET eq "HPDM" or KEY="HPPART_DATA";
MPRINT(HPDM_DATAPREP):   call symput('HPDM_DATA'!!strip(put(_N_, best.)), trim(DATA));
MPRINT(HPDM_DATAPREP):   if eof then do;
MPRINT(HPDM_DATAPREP):   call symput('HPDM_GRIDNUM', strip(put(_N_, best.)));
MPRINT(HPDM_DATAPREP):   end;
MPRINT(HPDM_DATAPREP):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE4_EMINFO.
      WHERE (TARGET='HPDM') or (KEY='HPPART_DATA');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(HPDM_DATAPREP):  ;
MPRINT(HPDM_DATAPREP):   options validvarname=V7;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):   filename temp catalog 'sashelp.hpdm.hpdmneural_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.HPDM.HPDMNEURAL_MACROS.SOURCE.
30191     +%macro HPDM_HPNEURAL(indata=,
30192     +                   IntTarget=,
30193     +                   NomTarget=,
30194     +                   freqvar=,
30195     +                   outmodel=,
30196     +                   inputstd=,
30197     +                   architecture=,
30198     +                   hidden=,
30199     +                   hiddenlayers=,
30200     +                   directconn=,
30201     +                   hoptsds=,
30202     +                   targetact=,
30203     +                   targeterror=,
30204     +                   targetstd=,
30205     +                   numtries=,
30206     +                   maxiter=,
30207     +                   optmethod=,
30208     +                   usevalid=,
30209     +                   useinverse=,
30210     +                   missaslvl=,
30211     +                   out=,
30212     +                   hpoutfit=,
30213     +                   trainhist=,
30214     +                   iterhist=,
30215     +                   fileref=
30216     +                   );
30218     +    /* run the HPNeural procedure */
30220     +   %if "&architecture" eq "USERDEFINED" and %sysfunc(exist(&hoptsds)) %then %do;
30221     +      proc sort data=&hoptsds;
30222     +         by layer;
30223     +      run;
30224     +   %end;
30226     +    proc hpneural data=&indata;
30228     +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne  %then %do;
30229     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level=int std=&inputstd;
30230     +    %end;
30232     +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED ne  %then %do;
30233     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = nom
30234     +      %if &missAsLvl eq Y %then %do;
30235     +        missing=map
30236     +      %end;
30237     +      ;
30238     +    %end;
30240     +    /* Partition variable */
30241     +    %if ("&hpdm_partitionVar" ne "") %then %do;
30242     +        partition rolevar=&hpdm_partitionVar(train=1);
30243     +    %end;
30244     +    %else %if "&indata" ne "&em_hpdm_train" %then %do;
30245     +       partition rolevar=_partInd_(train=1);
30246     +    %end;
30248     +    /* ID Variables */
30249     +    %if ("&hpdm_partitionVar" ne "") %then %do;
30250     +        id &hpdm_partitionVar %em_key &IntTarget &NomTarget;
30251     +    %end;
30252     +    %else
30253     +    %if &EM_NUM_KEY  %then %do;
30254     +       ID %EM_KEY  &IntTarget &NomTarget;
30255     +    %end;
30256     +    %else %do;
30257     +       ID  &IntTarget &NomTarget;
30258     +    %end;
30260     +    /* Freq Statement */
30261     +    %if ((&useInverse eq Y) AND (&NomTarget ne )) %then %do;
30262     +      freq _inverse_priors_;
30263     +    %end;
30264     +    %else %do;
30265     +      %if "%EM_FREQ" ne "" %then %do;
30266     +        freq %EM_FREQ;
30267     +      %end;
30268     +    %end;
30270     +    /* Target Statements - Multiple targets are supported with level of either INT or NOM */
30271     +    %if &IntTarget ne %then %do;
30272     +       target &IntTarget / level=INT act=&targetact error=&targeterror std=&targetstd;
30273     +    %end;
30274     +    %if &NomTarget ne %then %do;
30276     +       %let dsid = %sysfunc(open(&EM_DATA_VARIABLESET(where=(role="TARGET" and USE in("Y","D") and level in("NOMINAL","BINARY")))));
30277     +       %let tnamenum = %sysfunc(VARNUM(&dsid, NAME));
30278     +       %let onamenum = %sysfunc(VARNUM(&dsid, ORDER));
30279     +       %let obs = %sysfunc(fetch(&dsid));
30281     +       %do %while(&obs=0);
30282     +         %let tname = %sysfunc(getvarc(&dsid, &tnamenum));
30283     +         %let oname = %sysfunc(getvarc(&dsid, &onamenum));
30284     +         %if %length(&oname)=0 %then %let oname=DESC;
30286     +         target &tname / level=NOM order=&oname ;
30287     +         %let obs = %sysfunc(fetch(&dsid));
30288     +       %end;
30289     +       %let rc = %sysfunc(close(&dsid));
30290     +    %end;
30292     +    %let hiddennote = 0;
30293     +    %if "&architecture" ne "USERDEFINED" %then %do;
30294     +       /* Architecture Statement - pre-13.1 options */
30295     +       %if "&architecture" eq "LOGISTIC" %then %do;
30296     +         architecture &architecture;
30297     +       %end;
30298     +       %else %do;
30299     +          architecture MLP %if %index(&architecture,SKIP) %then DIRECT;;
30300     +          /* Hidden Statement*/
30302     +          %if &hidden ne %then %do;
30303     +            /* hidden must be at least 2 for 2-layer architectures */
30304     +            %if %index(&architecture,2) %then %do;
30305     +               %if &hidden=1 %then %do;
30306     +                  hidden 1;
30307     +                  hidden 1;
30308     +                  %let hiddennote=1;
30309     +               %end;
30310     +               %else %do;
30311     +                  hidden %sysevalf(&hidden / 2, ceil);
30312     +                  hidden %sysevalf(&hidden / 2, floor);
30313     +               %end;
30314     +            %end;
30315     +            %else %do;
30316     +               hidden &hidden;
30317     +            %end;
30318     +          %end;
30319     +       %end;
30320     +    %end;
30321     +    %else %do; /* user-defined */
30322     +       architecture MLP %if "&directconn"="Y" %then DIRECT;;
30323     +       %let hds=0;
30324     +       %do h=1 %to &hiddenlayers;
30325     +         %if &h=1 %then %do;
30326     +            %let hlobs=0;
30327     +            %if "&hoptsds" ne "" %then %do;
30328     +               %if %sysfunc(exist(&hoptsds)) %then %do;
30329     +                  %let hds=%sysfunc(open(&hoptsds));
30330     +                  %let hlobs=%sysfunc(attrn(&hds,nobs));
30331     +                  %let neuronnum = %sysfunc(VARNUM(&hds, NEURONS));
30332     +                  %let actnum = %sysfunc(VARNUM(&hds, ACTFUNC));
30333     +               %end;
30334     +            %end;
30335     +         %end;
30336     +         %if &hlobs ge &h %then %do;
30337     +            %let obs = %sysfunc(fetchobs(&hds,&h));
30338     +            %let neurons = %sysfunc(getvarn(&hds, &neuronnum));
30339     +            %let hactf   = %sysfunc(getvarc(&hds, &actnum));
30340     +         %end;
30341     +         %else %do;
30342     +            /* not a row in HIDDENOPTIONS table for this layer, use defaults */
30343     +            %let neurons = 3;
30344     +            %let hactf = TANH;
30345     +         %end;
30346     +         hidden &neurons / act=&hactf;
30347     +      %end;
30348     +      %if &hds %then %let hds = %sysfunc(close(&hds));
30349     +   %end;
30351     +    /* Train Statement */
30352     +    %if &outmodel ne %then %do;
30353     +      train outmodel=&outmodel numtries=&numtries maxiter=&maxiter /* opt=&optmethod */
30354     +      %if &useValid eq N and ("&hpdm_partitionVar" eq "") and ("&indata" eq "&em_hpdm_train") %then %do;
30355     +         valid=_none_
30356     +      %end;
30357     +      ;
30358     +    %end;
30360     +    /* code statement */
30361     +    code file=&fileref;
30363     +    /* output statement */
30364     +    ods output Training=&trainhist Iteration=&iterhist;
30366     +    /* Score Statement */
30367     +    %if "&out" ne "" %then %do;
30368     +        score out=&out;
30369     +    %end;
30371     +    /* Performance Statements */
30372     +    &hpdm_performance;
30374     +    run;
30375     +    quit;
30377     +    %if &hiddennote %then %do;
30378     +       %put &EM_CODEBAR;
30379     +       %put %sysfunc(sasmsg(sashelp.dmine, hpneural_hidden_note, NOQUOTE));
30380     +       %put &EM_CODEBAR;
30381     +   %end;
30382     +%mend HPDM_HPNEURAL;
NOTE: %INCLUDE (level 1) ending.
MPRINT(HPDM_NEURAL_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(HPDM_NEURAL_TRAIN):   data work.HPNNA_traindata / view=work.HPNNA_traindata;
MPRINT(HPDM_NEURAL_TRAIN):   set EMWS1.MdlComp2_TRAIN(in=_a) EMWS1.MdlComp2_VALIDATE(in=_b);
MPRINT(HPDM_NEURAL_TRAIN):   if _a then _PartInd_ = 1;
MPRINT(HPDM_NEURAL_TRAIN):   else _PartInd_=0;
MPRINT(HPDM_NEURAL_TRAIN):   run;
 
NOTE: DATA STEP view saved on file WORK.HPNNA_TRAINDATA.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP2_VALIDATE.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
 
NOTE: View EMWS1.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.44 seconds
      cpu time            0.45 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.46 seconds
      cpu time            0.47 seconds
 
 
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):   filename flowref "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
MPRINT(HPDM_HPNEURAL):   proc hpneural data=work.HPNNA_traindata;
MPRINT(HPDM_HPNEURAL):   input
MPRINT(EM_INTERVAL_INPUT):   RANGE_LOG_Total_Trans_Amt RANGE_SQRT_Avg_Utilization_Ratio RANGE_SQRT_Total_Amt_Chng_Q4_Q1 RANGE_SQRT_Total_Ct_Chng_Q4_Q1 RANGE_Total_Revolving_Bal
MPRINT(HPDM_HPNEURAL):  / level=int std=RANGE;
MPRINT(HPDM_HPNEURAL):   input
MPRINT(EM_NOMINAL_INPUT):   G_Customer_Age G_Months_Inactive_12_mon G_Total_Relationship_Count G_Total_Trans_Ct
MPRINT(HPDM_HPNEURAL):  / level = nom ;
MPRINT(HPDM_HPNEURAL):   partition rolevar=_partInd_(train=1);
MPRINT(HPDM_HPNEURAL):   ID Attrition_Flag;
MPRINT(HPDM_HPNEURAL):   target Attrition_Flag / level=NOM order=DESC ;
MPRINT(HPDM_HPNEURAL):   architecture MLP;
MPRINT(HPDM_HPNEURAL):   hidden 3;
MPRINT(HPDM_HPNEURAL):   train outmodel=EMWS1.HPNNA_OUTMODEL numtries=2 maxiter=300 ;
MPRINT(HPDM_HPNEURAL):   code file=flowref;
MPRINT(HPDM_HPNEURAL):   ods output Training=EMWS1.HPNNA_TRAINHIST Iteration=EMWS1.HPNNA_ITERHIST;
MPRINT(HPDM_HPNEURAL):   PERFORMANCE DETAILS;
MPRINT(HPDM_HPNEURAL):   run;
 
NOTE: The HPNEURAL procedure is executing in single-machine mode.
NOTE: Reading data...
NOTE: 9113 usable observations in input data set.
NOTE: Training...
NOTE: Try 1 complete after 69 iterations. Reason for stopping: Validation error=0.185563
NOTE: Try 2 complete after 80 iterations. Reason for stopping: Validation error=0.185266
NOTE: Scoring...
NOTE: Misclassification Error for target Attrition_Flag:  6.52%; Maximum Error: 22.15% for level 1
NOTE: Writing Model File...
NOTE: Writing Code File...
NOTE: There were 2025 observations read from the data set EMWS1.PART2_VALIDATE.
NOTE: There were 2025 observations read from the data set EMWS1.TREE4_VALIDATE.
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.TREE4_TRAIN.
NOTE: View WORK.HPNNA_TRAINDATA.VIEW used (Total process time):
      real time           1.04 seconds
      cpu time            1.53 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.MDLCOMP2_TRAIN.
NOTE: There were 2025 observations read from the data set EMWS1.MDLCOMP2_VALIDATE.
NOTE: The data set EMWS1.HPNNA_ITERHIST has 81 observations and 4 variables.
NOTE: The data set EMWS1.HPNNA_TRAINHIST has 2 observations and 6 variables.
NOTE: There were 9113 observations read from the data set WORK.HPNNA_TRAINDATA.
NOTE: The data set EMWS1.HPNNA_OUTMODEL has 39 observations and 18 variables.
NOTE: The PROCEDURE HPNEURAL printed page 4.
NOTE: PROCEDURE HPNEURAL used (Total process time):
      real time           1.18 seconds
      cpu time            1.56 seconds
 
 
MPRINT(HPDM_HPNEURAL):   quit;
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):   proc datasets lib=work nolist;
MPRINT(HPDM_NEURAL_TRAIN):   delete HPNNA_traindata /mt=view;
MPRINT(HPDM_NEURAL_TRAIN):   run;
 
NOTE: Deleting WORK.HPNNA_TRAINDATA (memtype=VIEW).
MPRINT(HPDM_NEURAL_TRAIN):   filename pubref "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMPUBLISHSCORE.sas";
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("flowref",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PUBREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09Apr2022:15:40:29,
      Create Time=09Apr2022:15:40:29
 
NOTE: 326 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 80.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "Attrition_Flag";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "Y";
MPRINT(EM_MODEL):   decscorecode = "Y";
MPRINT(EM_MODEL):   fitstatistics = "Y";
MPRINT(EM_MODEL):   classification = "Y";
MPRINT(EM_MODEL):   residuals = "Y";
MPRINT(EM_MODEL):   run;
 
NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(HPDM_NEURAL_TRAIN):  ;
MPRINT(HPDM_NEURAL_TRAIN):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(HPDM_NEURAL_TRAIN):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: HPNNA;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30384
30385      *------------------------------------------------------------*;
30386      * End TRAIN: HPNNA;
30387      *------------------------------------------------------------*;
 
30388      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30389      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
30390      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30391      ;
MPRINT(EM_DIAGRAM):   ;
30392      ;
MPRINT(EM_DIAGRAM):   ;
30393      ;
MPRINT(EM_DIAGRAM):   ;
30394      ;
MPRINT(EM_DIAGRAM):   ;
30395      quit;
MPRINT(EM_DIAGRAM):   quit;
30396      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30397      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
30398      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30399      /*; *"; *'; */
30400      ;
MPRINT(EM_DIAGRAM):   ;
30401      run;
MPRINT(EM_DIAGRAM):   run;
30402      quit;
MPRINT(EM_DIAGRAM):   quit;
30403      /* Reset EM Options */
30404      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
30405      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
30406      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:40:30" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 09, 2022
Time:                15:40:30
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0SCBUJC "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0SCBUJC new;
MPRINT(EM_DIAGRAM):   run;
30508      %let EMEXCEPTIONSTRING=;
30509      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30510      * SCORE: HPNNA;
MPRINT(EM_DIAGRAM):   * SCORE: HPNNA;
30511      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30512      %let EM_ACTION = SCORE;
30513      %let syscc = 0;
30514      %macro main;
30515
30516         %if %upcase(&EM_ACTION) = CREATE %then %do;
30517             filename temp catalog 'sashelp.hpdm.hpdmneural_create.source';
30518             %include temp;
30519             filename temp;
30520             %hpdm_Neural_create;
30521         %end;
30522         %else
30523         %if %upcase(&EM_ACTION) = TRAIN %then %do;
30524             filename temp catalog 'sashelp.hpdm.hpdmneural_train.source';
30525             %include temp;
30526             filename temp;
30527             %hpdm_Neural_train;
30528         %end;
30529         %else
30530         %if %upcase(&EM_ACTION) = REPORT %then %do;
30531             filename temp catalog 'sashelp.hpdm.hpdmneural_report.source';
30532             %include temp;
30533             filename temp;
30534             %hpdm_Neural_report;
30535         %end;
30536         %else
30537            %if %upcase(&EM_ACTION) = OPENTABLE  %then %do;
30538                 filename temp catalog 'sashelp.hpdm.hpdmneural_actions.source';
30539                 %include temp;
30540                 filename temp;
30541                 %hpdm_Neural_OpenTable;
30542         %end;
30543         %else
30544         %if %upcase(&EM_ACTION) = CLOSETABLE  %then %do;
30545                filename temp catalog 'sashelp.hpdm.hpdmneural_actions.source';
30546                 %include temp;
30547                 filename temp;
30548                 %hpdm_Neural_CloseTable ;
30549         %end;
30550
30551      %mend main;
30552
30553      %main;
MPRINT(EM_DIAGRAM):
MPRINT(EM_DIAGRAM):  ;
30554
30555      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30556      * End SCORE: HPNNA;
MPRINT(EM_DIAGRAM):   * End SCORE: HPNNA;
30557      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
30558      filename _emscr "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _emscr "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
30559      data _ScoreTrain/ view=_ScoreTrain;
MPRINT(EM_DIAGRAM):   data _ScoreTrain/ view=_ScoreTrain;
30560      set EMWS1.MdlComp2_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_TRAIN;
30561      %inc _emscr;
NOTE: %INCLUDE (level 1) file _EMSCR is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas.
30562     +LENGTH _UFormat $ 32;
MPRINT(EM_DIAGRAM):   LENGTH _UFormat $ 32;
30563     +_UFormat = ' ';
MPRINT(EM_DIAGRAM):   _UFormat = ' ';
30564     +LENGTH _WARN_ $4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4;
30565     +LABEL _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings';
30566     +_WARN_ = '    ';
MPRINT(EM_DIAGRAM):   _WARN_ = '    ';
30567     +_nInputMiss = 0;
MPRINT(EM_DIAGRAM):   _nInputMiss = 0;
30568     +_nInputOutRange = 0;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 0;
30569     +
30570     +/******************************************************************************/
30571     +/*                    Calculate Standardized Inputs                           */
30572     +/******************************************************************************/
30573     +
30574     +_I1 = RANGE_LOG_Total_Trans_Amt;
MPRINT(EM_DIAGRAM):   _I1 = RANGE_LOG_Total_Trans_Amt;
30575     +IF MISSING(RANGE_LOG_Total_Trans_Amt) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_LOG_Total_Trans_Amt) THEN DO;
30576     +    _I1 = 0.26846267058842; /* impute average value */
MPRINT(EM_DIAGRAM):   _I1 = 0.26846267058842;
30577     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30578     +END;
MPRINT(EM_DIAGRAM):   END;
30579     +_I1 = 2 * ( _I1 ) / 0.99999999994221 - 1;
MPRINT(EM_DIAGRAM):   _I1 = 2 * ( _I1 ) / 0.99999999994221 - 1;
30580     +
30581     +_I2 = RANGE_SQRT_Avg_Utilization_Ratio;
MPRINT(EM_DIAGRAM):   _I2 = RANGE_SQRT_Avg_Utilization_Ratio;
30582     +IF MISSING(RANGE_SQRT_Avg_Utilization_Ratio) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Avg_Utilization_Ratio) THEN DO;
30583     +    _I2 = 0.42138171279265; /* impute average value */
MPRINT(EM_DIAGRAM):   _I2 = 0.42138171279265;
30584     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30585     +END;
MPRINT(EM_DIAGRAM):   END;
30586     +_I2 = 2 * ( _I2 ) / 0.99799598996989 - 1;
MPRINT(EM_DIAGRAM):   _I2 = 2 * ( _I2 ) / 0.99799598996989 - 1;
30587     +
The SAS System
 
30588     +_I3 = RANGE_SQRT_Total_Amt_Chng_Q4_Q1;
MPRINT(EM_DIAGRAM):   _I3 = RANGE_SQRT_Total_Amt_Chng_Q4_Q1;
30589     +IF MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1) THEN DO;
30590     +    _I3 = 0.46841281572611; /* impute average value */
MPRINT(EM_DIAGRAM):   _I3 = 0.46841281572611;
30591     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30592     +END;
MPRINT(EM_DIAGRAM):   END;
30593     +_I3 = 2 * ( _I3 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I3 = 2 * ( _I3 ) / 1 - 1;
30594     +
30595     +_I4 = RANGE_SQRT_Total_Ct_Chng_Q4_Q1;
MPRINT(EM_DIAGRAM):   _I4 = RANGE_SQRT_Total_Ct_Chng_Q4_Q1;
30596     +IF MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1) THEN DO;
30597     +    _I4 = 0.43231770050692; /* impute average value */
MPRINT(EM_DIAGRAM):   _I4 = 0.43231770050692;
30598     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30599     +END;
MPRINT(EM_DIAGRAM):   END;
30600     +_I4 = 2 * ( _I4 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I4 = 2 * ( _I4 ) / 1 - 1;
30601     +
30602     +_I5 = RANGE_Total_Revolving_Bal;
MPRINT(EM_DIAGRAM):   _I5 = RANGE_Total_Revolving_Bal;
30603     +IF MISSING(RANGE_Total_Revolving_Bal) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_Total_Revolving_Bal) THEN DO;
30604     +    _I5 = 0.46336482205213; /* impute average value */
MPRINT(EM_DIAGRAM):   _I5 = 0.46336482205213;
30605     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30606     +END;
MPRINT(EM_DIAGRAM):   END;
30607     +_I5 = 2 * ( _I5 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I5 = 2 * ( _I5 ) / 1 - 1;
30608     +
30609     +_I6_0 = 0;
MPRINT(EM_DIAGRAM):   _I6_0 = 0;
30610     +_I6_1 = 0;
MPRINT(EM_DIAGRAM):   _I6_1 = 0;
30611     +_I6_2 = 0;
MPRINT(EM_DIAGRAM):   _I6_2 = 0;
30612     +_I6_3 = 0;
MPRINT(EM_DIAGRAM):   _I6_3 = 0;
30613     +_I6_4 = 0;
MPRINT(EM_DIAGRAM):   _I6_4 = 0;
30614     +_I6_5 = 0;
MPRINT(EM_DIAGRAM):   _I6_5 = 0;
30615     +_I6_6 = 0;
MPRINT(EM_DIAGRAM):   _I6_6 = 0;
30616     +_I6_7 = 0;
MPRINT(EM_DIAGRAM):   _I6_7 = 0;
30617     +_I6_8 = 0;
MPRINT(EM_DIAGRAM):   _I6_8 = 0;
30618     +_I6_9 = 0;
MPRINT(EM_DIAGRAM):   _I6_9 = 0;
30619     +_I6_10 = 0;
MPRINT(EM_DIAGRAM):   _I6_10 = 0;
30620     +IF MISSING(G_Customer_Age) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Customer_Age) THEN DO;
30621     +    _I6_6 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I6_6 = 1;
30622     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30623     +END;
MPRINT(EM_DIAGRAM):   END;
30624     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30625     +    _UFormat = LEFT(UPCASE(PUT( G_Customer_Age, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Customer_Age, BEST. )));
30626     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
30627     +        WHEN ( "0" ) _I6_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I6_0 = 1;
30628     +        WHEN ( "1" ) _I6_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I6_1 = 1;
30629     +        WHEN ( "2" ) _I6_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I6_2 = 1;
30630     +        WHEN ( "3" ) _I6_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I6_3 = 1;
30631     +        WHEN ( "4" ) _I6_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I6_4 = 1;
30632     +        WHEN ( "5" ) _I6_5 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "5" ) _I6_5 = 1;
30633     +        WHEN ( "6" ) _I6_6 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "6" ) _I6_6 = 1;
30634     +        WHEN ( "7" ) _I6_7 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "7" ) _I6_7 = 1;
30635     +        WHEN ( "8" ) _I6_8 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "8" ) _I6_8 = 1;
30636     +        WHEN ( "9" ) _I6_9 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "9" ) _I6_9 = 1;
30637     +        WHEN ( "10" ) _I6_10 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "10" ) _I6_10 = 1;
30638     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
30639     +            _I6_6 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I6_6 = 1;
30640     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
30641     +        END;
MPRINT(EM_DIAGRAM):   END;
30642     +    END;
MPRINT(EM_DIAGRAM):   END;
30643     +END;
MPRINT(EM_DIAGRAM):   END;
30644     +
30645     +_I7_0 = 0;
MPRINT(EM_DIAGRAM):   _I7_0 = 0;
30646     +_I7_1 = 0;
MPRINT(EM_DIAGRAM):   _I7_1 = 0;
30647     +_I7_2 = 0;
MPRINT(EM_DIAGRAM):   _I7_2 = 0;
30648     +_I7_3 = 0;
MPRINT(EM_DIAGRAM):   _I7_3 = 0;
30649     +_I7_4 = 0;
MPRINT(EM_DIAGRAM):   _I7_4 = 0;
30650     +IF MISSING(G_Months_Inactive_12_mon) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Months_Inactive_12_mon) THEN DO;
30651     +    _I7_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I7_2 = 1;
30652     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30653     +END;
MPRINT(EM_DIAGRAM):   END;
30654     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30655     +    _UFormat = LEFT(UPCASE(PUT( G_Months_Inactive_12_mon, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Months_Inactive_12_mon, BEST. )));
30656     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
30657     +        WHEN ( "0" ) _I7_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I7_0 = 1;
30658     +        WHEN ( "1" ) _I7_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I7_1 = 1;
30659     +        WHEN ( "2" ) _I7_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I7_2 = 1;
30660     +        WHEN ( "3" ) _I7_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I7_3 = 1;
30661     +        WHEN ( "4" ) _I7_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I7_4 = 1;
30662     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
30663     +            _I7_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I7_2 = 1;
30664     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
30665     +        END;
MPRINT(EM_DIAGRAM):   END;
30666     +    END;
MPRINT(EM_DIAGRAM):   END;
30667     +END;
MPRINT(EM_DIAGRAM):   END;
30668     +
30669     +_I8_0 = 0;
MPRINT(EM_DIAGRAM):   _I8_0 = 0;
30670     +_I8_1 = 0;
MPRINT(EM_DIAGRAM):   _I8_1 = 0;
30671     +_I8_2 = 0;
MPRINT(EM_DIAGRAM):   _I8_2 = 0;
30672     +IF MISSING(G_Total_Relationship_Count) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Total_Relationship_Count) THEN DO;
30673     +    _I8_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I8_2 = 1;
30674     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30675     +END;
MPRINT(EM_DIAGRAM):   END;
30676     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30677     +    _UFormat = LEFT(UPCASE(PUT( G_Total_Relationship_Count, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Total_Relationship_Count, BEST. )));
30678     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
30679     +        WHEN ( "0" ) _I8_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I8_0 = 1;
30680     +        WHEN ( "1" ) _I8_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I8_1 = 1;
30681     +        WHEN ( "2" ) _I8_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I8_2 = 1;
30682     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
30683     +            _I8_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I8_2 = 1;
30684     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
30685     +        END;
MPRINT(EM_DIAGRAM):   END;
30686     +    END;
MPRINT(EM_DIAGRAM):   END;
30687     +END;
MPRINT(EM_DIAGRAM):   END;
30688     +
30689     +_I9_0 = 0;
MPRINT(EM_DIAGRAM):   _I9_0 = 0;
30690     +_I9_1 = 0;
MPRINT(EM_DIAGRAM):   _I9_1 = 0;
30691     +_I9_2 = 0;
MPRINT(EM_DIAGRAM):   _I9_2 = 0;
30692     +_I9_3 = 0;
MPRINT(EM_DIAGRAM):   _I9_3 = 0;
30693     +_I9_4 = 0;
MPRINT(EM_DIAGRAM):   _I9_4 = 0;
30694     +_I9_5 = 0;
MPRINT(EM_DIAGRAM):   _I9_5 = 0;
30695     +_I9_6 = 0;
MPRINT(EM_DIAGRAM):   _I9_6 = 0;
30696     +_I9_7 = 0;
MPRINT(EM_DIAGRAM):   _I9_7 = 0;
30697     +IF MISSING(G_Total_Trans_Ct) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Total_Trans_Ct) THEN DO;
30698     +    _I9_7 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I9_7 = 1;
30699     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30700     +END;
MPRINT(EM_DIAGRAM):   END;
30701     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30702     +    _UFormat = LEFT(UPCASE(PUT( G_Total_Trans_Ct, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Total_Trans_Ct, BEST. )));
30703     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
30704     +        WHEN ( "0" ) _I9_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I9_0 = 1;
30705     +        WHEN ( "1" ) _I9_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I9_1 = 1;
30706     +        WHEN ( "2" ) _I9_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I9_2 = 1;
30707     +        WHEN ( "3" ) _I9_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I9_3 = 1;
30708     +        WHEN ( "4" ) _I9_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I9_4 = 1;
30709     +        WHEN ( "5" ) _I9_5 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "5" ) _I9_5 = 1;
30710     +        WHEN ( "6" ) _I9_6 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "6" ) _I9_6 = 1;
30711     +        WHEN ( "7" ) _I9_7 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "7" ) _I9_7 = 1;
30712     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
30713     +            _I9_7 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I9_7 = 1;
30714     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
30715     +        END;
MPRINT(EM_DIAGRAM):   END;
30716     +    END;
MPRINT(EM_DIAGRAM):   END;
30717     +END;
MPRINT(EM_DIAGRAM):   END;
30718     +
30719     +/******************************************************************************/
30720     +/*                              Set _WARN_ Value                              */
30721     +/******************************************************************************/
30722     +IF ( _nInputMiss GT 0) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _nInputMiss GT 0) THEN DO;
30723     +    SUBSTR( _WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR( _WARN_, 1, 1) = 'M';
30724     +END;
MPRINT(EM_DIAGRAM):   END;
30725     +IF ( _nInputOutRange GT 0) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _nInputOutRange GT 0) THEN DO;
30726     +    SUBSTR( _WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   SUBSTR( _WARN_, 2, 1) = 'U';
30727     +END;
MPRINT(EM_DIAGRAM):   END;
30728     +
30729     +/******************************************************************************/
30730     +/*                   Calculate Output of Hidden Layer 1                       */
30731     +/******************************************************************************/
30732     +
30733     +_H1 = -0.0497837944031
30734     +    + 2.87868898599161 * _I1
30735     +    + 0.16063372756462 * _I2
30736     +    - 0.49030529018355 * _I3
30737     +    - 2.47244064996832 * _I4
30738     +    + 1.30637034552203 * _I5
30739     +    + 0.23528586564228 * _I6_0
30740     +    + 0.26974689764919 * _I6_1
30741     +    - 0.07349823573787 * _I6_2
30742     +    + 0.16214916198249 * _I6_3
30743     +    + 0.27012524162385 * _I6_4
30744     +    + 0.32603335250487 * _I6_5
30745     +    + 0.26181228964426 * _I6_6
30746     +    + 0.143924528524 * _I6_7
30747     +    - 0.23685564369312 * _I6_8
30748     +    - 0.82763977920721 * _I6_9
30749     +    - 0.64683461376163 * _I6_10
30750     +    + 1.08759021322259 * _I7_0
30751     +    + 0.21622342803964 * _I7_1
30752     +    - 0.13939963447866 * _I7_2
30753     +    - 0.20808641757215 * _I7_3
30754     +    - 1.00237786994091 * _I7_4
30755     +    + 0.19533521889067 * _I8_0
30756     +    + 0.04292191572239 * _I8_1
30757     +    - 0.28110758697167 * _I8_2
30758     +    + 3.4988685884969 * _I9_0
30759     +    + 0.74341623880574 * _I9_1
30760     +    + 1.05107847137329 * _I9_2
30761     +    + 0.61285138014397 * _I9_3
30762     +    + 0.32628342613665 * _I9_4
30763     +    - 0.07626093385477 * _I9_5
30764     +    + 0.38690662702643 * _I9_6
30765     +    - 6.6127243083323 * _I9_7;
MPRINT(EM_DIAGRAM):   _H1 = -0.0497837944031 + 2.87868898599161 * _I1 + 0.16063372756462 * _I2 - 0.49030529018355 * _I3 - 2.47244064996832 * _I4 + 1.30637034552203 * _I5 + 0.23528586564228 * _I6_0 + 0.26974689764919 * _I6_1 - 0.07349823573787 * _I6_2 +
0.16214916198249 * _I6_3 + 0.27012524162385 * _I6_4 + 0.32603335250487 * _I6_5 + 0.26181228964426 * _I6_6 + 0.143924528524 * _I6_7 - 0.23685564369312 * _I6_8 - 0.82763977920721 * _I6_9 - 0.64683461376163 * _I6_10 + 1.08759021322259 * _I7_0 +
0.21622342803964 * _I7_1 - 0.13939963447866 * _I7_2 - 0.20808641757215 * _I7_3 - 1.00237786994091 * _I7_4 + 0.19533521889067 * _I8_0 + 0.04292191572239 * _I8_1 - 0.28110758697167 * _I8_2 + 3.4988685884969 * _I9_0 + 0.74341623880574 * _I9_1 +
1.05107847137329 * _I9_2 + 0.61285138014397 * _I9_3 + 0.32628342613665 * _I9_4 - 0.07626093385477 * _I9_5 + 0.38690662702643 * _I9_6 - 6.6127243083323 * _I9_7;
30766     +IF ( _H1 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H1 GE 0 ) THEN DO;
30767     +    _H1 = EXP( -2 * _H1 );
MPRINT(EM_DIAGRAM):   _H1 = EXP( -2 * _H1 );
30768     +    _H1 = ( 1 - _H1 ) / ( 1 + _H1 );
MPRINT(EM_DIAGRAM):   _H1 = ( 1 - _H1 ) / ( 1 + _H1 );
30769     +END;
MPRINT(EM_DIAGRAM):   END;
30770     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30771     +    _H1 = EXP( 2 * _H1 );
MPRINT(EM_DIAGRAM):   _H1 = EXP( 2 * _H1 );
30772     +    _H1 = ( _H1 - 1 ) / ( _H1 + 1 );
MPRINT(EM_DIAGRAM):   _H1 = ( _H1 - 1 ) / ( _H1 + 1 );
30773     +END;
MPRINT(EM_DIAGRAM):   END;
30774     +
30775     +_H2 = 1.83543549081065
30776     +    + 3.7783245643669 * _I1
30777     +    - 0.45347521325884 * _I2
30778     +    - 0.57027148710928 * _I3
30779     +    - 0.8277716384752 * _I4
30780     +    - 0.08136016614353 * _I5
30781     +    + 0.06679985745167 * _I6_0
30782     +    + 0.13154981728072 * _I6_1
30783     +    + 0.43124910346702 * _I6_2
30784     +    + 0.06316906722596 * _I6_3
30785     +    + 0.32142995163961 * _I6_4
30786     +    + 0.23779352451111 * _I6_5
30787     +    - 0.12561811951488 * _I6_6
30788     +    + 0.0474319212792 * _I6_7
30789     +    + 0.24576475116744 * _I6_8
30790     +    + 0.72124212244433 * _I6_9
30791     +    - 0.30429122771585 * _I6_10
30792     +    + 0.50507601560678 * _I7_0
30793     +    + 0.32573900043651 * _I7_1
30794     +    + 0.54468433063343 * _I7_2
30795     +    + 0.24409377533973 * _I7_3
30796     +    + 0.21355245825873 * _I7_4
30797     +    + 0.67614772734632 * _I8_0
30798     +    + 0.50729669251011 * _I8_1
30799     +    + 0.68568050900919 * _I8_2
30800     +    + 1.3084545575448 * _I9_0
30801     +    + 1.13758316030701 * _I9_1
30802     +    + 0.27137451357768 * _I9_2
30803     +    + 0.75533210062631 * _I9_3
30804     +    + 1.26346468811037 * _I9_4
30805     +    + 1.66500129976712 * _I9_5
30806     +    - 2.87715842442406 * _I9_6
30807     +    - 1.66528868253522 * _I9_7;
MPRINT(EM_DIAGRAM):   _H2 = 1.83543549081065 + 3.7783245643669 * _I1 - 0.45347521325884 * _I2 - 0.57027148710928 * _I3 - 0.8277716384752 * _I4 - 0.08136016614353 * _I5 + 0.06679985745167 * _I6_0 + 0.13154981728072 * _I6_1 + 0.43124910346702 * _I6_2 +
0.06316906722596 * _I6_3 + 0.32142995163961 * _I6_4 + 0.23779352451111 * _I6_5 - 0.12561811951488 * _I6_6 + 0.0474319212792 * _I6_7 + 0.24576475116744 * _I6_8 + 0.72124212244433 * _I6_9 - 0.30429122771585 * _I6_10 + 0.50507601560678 * _I7_0 +
0.32573900043651 * _I7_1 + 0.54468433063343 * _I7_2 + 0.24409377533973 * _I7_3 + 0.21355245825873 * _I7_4 + 0.67614772734632 * _I8_0 + 0.50729669251011 * _I8_1 + 0.68568050900919 * _I8_2 + 1.3084545575448 * _I9_0 + 1.13758316030701 * _I9_1 +
0.27137451357768 * _I9_2 + 0.75533210062631 * _I9_3 + 1.26346468811037 * _I9_4 + 1.66500129976712 * _I9_5 - 2.87715842442406 * _I9_6 - 1.66528868253522 * _I9_7;
30808     +IF ( _H2 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H2 GE 0 ) THEN DO;
30809     +    _H2 = EXP( -2 * _H2 );
MPRINT(EM_DIAGRAM):   _H2 = EXP( -2 * _H2 );
30810     +    _H2 = ( 1 - _H2 ) / ( 1 + _H2 );
MPRINT(EM_DIAGRAM):   _H2 = ( 1 - _H2 ) / ( 1 + _H2 );
30811     +END;
MPRINT(EM_DIAGRAM):   END;
30812     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30813     +    _H2 = EXP( 2 * _H2 );
MPRINT(EM_DIAGRAM):   _H2 = EXP( 2 * _H2 );
30814     +    _H2 = ( _H2 - 1 ) / ( _H2 + 1 );
MPRINT(EM_DIAGRAM):   _H2 = ( _H2 - 1 ) / ( _H2 + 1 );
30815     +END;
MPRINT(EM_DIAGRAM):   END;
30816     +
30817     +_H3 = 0.69506951652756
30818     +    - 1.47209478932412 * _I1
30819     +    - 1.16265728185804 * _I2
30820     +    + 0.9090683645627 * _I3
30821     +    + 2.35147897548686 * _I4
30822     +    + 3.30074578620084 * _I5
30823     +    - 0.31150547033793 * _I6_0
30824     +    - 0.76698753202567 * _I6_1
30825     +    - 0.17091045611845 * _I6_2
30826     +    - 0.33247436404483 * _I6_3
30827     +    + 0.15940016412827 * _I6_4
30828     +    - 0.0022155408578 * _I6_5
30829     +    - 0.11779165120942 * _I6_6
30830     +    + 0.03308267873366 * _I6_7
30831     +    + 0.33366973995059 * _I6_8
30832     +    + 1.65805295451413 * _I6_9
30833     +    + 0.27855621983567 * _I6_10
30834     +    - 0.16915466717604 * _I7_0
30835     +    + 0.00751172119554 * _I7_1
30836     +    - 0.00608962150266 * _I7_2
30837     +    + 0.06275301181757 * _I7_3
30838     +    + 0.86540273655389 * _I7_4
30839     +    - 0.92875364520664 * _I8_0
30840     +    + 0.67064872147019 * _I8_1
30841     +    + 1.01455195113271 * _I8_2
30842     +    - 1.87639047377756 * _I9_0
30843     +    - 0.96649938776339 * _I9_1
30844     +    - 0.74179014574167 * _I9_2
30845     +    - 0.78646800017147 * _I9_3
30846     +    - 0.16874396104659 * _I9_4
30847     +    - 0.01961079007072 * _I9_5
30848     +    - 0.05675387508415 * _I9_6
30849     +    + 5.30553811432309 * _I9_7;
MPRINT(EM_DIAGRAM):   _H3 = 0.69506951652756 - 1.47209478932412 * _I1 - 1.16265728185804 * _I2 + 0.9090683645627 * _I3 + 2.35147897548686 * _I4 + 3.30074578620084 * _I5 - 0.31150547033793 * _I6_0 - 0.76698753202567 * _I6_1 - 0.17091045611845 * _I6_2 -
0.33247436404483 * _I6_3 + 0.15940016412827 * _I6_4 - 0.0022155408578 * _I6_5 - 0.11779165120942 * _I6_6 + 0.03308267873366 * _I6_7 + 0.33366973995059 * _I6_8 + 1.65805295451413 * _I6_9 + 0.27855621983567 * _I6_10 - 0.16915466717604 * _I7_0 +
0.00751172119554 * _I7_1 - 0.00608962150266 * _I7_2 + 0.06275301181757 * _I7_3 + 0.86540273655389 * _I7_4 - 0.92875364520664 * _I8_0 + 0.67064872147019 * _I8_1 + 1.01455195113271 * _I8_2 - 1.87639047377756 * _I9_0 - 0.96649938776339 * _I9_1 -
0.74179014574167 * _I9_2 - 0.78646800017147 * _I9_3 - 0.16874396104659 * _I9_4 - 0.01961079007072 * _I9_5 - 0.05675387508415 * _I9_6 + 5.30553811432309 * _I9_7;
30850     +IF ( _H3 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H3 GE 0 ) THEN DO;
30851     +    _H3 = EXP( -2 * _H3 );
MPRINT(EM_DIAGRAM):   _H3 = EXP( -2 * _H3 );
30852     +    _H3 = ( 1 - _H3 ) / ( 1 + _H3 );
MPRINT(EM_DIAGRAM):   _H3 = ( 1 - _H3 ) / ( 1 + _H3 );
30853     +END;
MPRINT(EM_DIAGRAM):   END;
30854     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30855     +    _H3 = EXP( 2 * _H3 );
MPRINT(EM_DIAGRAM):   _H3 = EXP( 2 * _H3 );
30856     +    _H3 = ( _H3 - 1 ) / ( _H3 + 1 );
MPRINT(EM_DIAGRAM):   _H3 = ( _H3 - 1 ) / ( _H3 + 1 );
30857     +END;
MPRINT(EM_DIAGRAM):   END;
30858     +
30859     +/******************************************************************************/
30860     +/*                   Calculate Output of Target Layer                         */
30861     +/******************************************************************************/
30862     +
30863     +_T1_0 = 0.71994596163167
30864     +    + 3.25325330121454 * _H1
30865     +    + 2.71249042677312 * _H2
30866     +    - 2.93824602585615 * _H3;
MPRINT(EM_DIAGRAM):   _T1_0 = 0.71994596163167 + 3.25325330121454 * _H1 + 2.71249042677312 * _H2 - 2.93824602585615 * _H3;
30867     +LABEL P_Attrition_Flag1 = "Predicted: Attrition_Flag=1";
MPRINT(EM_DIAGRAM):   LABEL P_Attrition_Flag1 = "Predicted: Attrition_Flag=1";
30868     +IF ABS(_T1_0) < 36 THEN
30869     +    P_Attrition_Flag1 = 1.0 / (1.0 + EXP(-_T1_0));
MPRINT(EM_DIAGRAM):   IF ABS(_T1_0) < 36 THEN P_Attrition_Flag1 = 1.0 / (1.0 + EXP(-_T1_0));
30870     +ELSE
30871     +    IF _T1_0 < 0 THEN
30872     +        P_Attrition_Flag1 = 0;
MPRINT(EM_DIAGRAM):   ELSE IF _T1_0 < 0 THEN P_Attrition_Flag1 = 0;
30873     +    ELSE
30874     +        P_Attrition_Flag1 = 1;
MPRINT(EM_DIAGRAM):   ELSE P_Attrition_Flag1 = 1;
30875     +LABEL P_Attrition_Flag0 = "Predicted: Attrition_Flag=0";
MPRINT(EM_DIAGRAM):   LABEL P_Attrition_Flag0 = "Predicted: Attrition_Flag=0";
30876     +P_Attrition_Flag0 = 1.0 - P_Attrition_Flag1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1.0 - P_Attrition_Flag1;
30877     +
30878     +/******************************************************************************/
30879     +/*                        Drop temporary variables                            */
30880     +/******************************************************************************/
30881     +DROP _UFormat _nInputMiss _nInputOutRange;
MPRINT(EM_DIAGRAM):   DROP _UFormat _nInputMiss _nInputOutRange;
30882     +DROP _I1 _I2 _I3 _I4 _I5 _I6_0 _I6_1 _I6_2 _I6_3 _I6_4;
MPRINT(EM_DIAGRAM):   DROP _I1 _I2 _I3 _I4 _I5 _I6_0 _I6_1 _I6_2 _I6_3 _I6_4;
30883     +DROP _I6_5 _I6_6 _I6_7 _I6_8 _I6_9 _I6_10 _I7_0 _I7_1 _I7_2 _I7_3;
MPRINT(EM_DIAGRAM):   DROP _I6_5 _I6_6 _I6_7 _I6_8 _I6_9 _I6_10 _I7_0 _I7_1 _I7_2 _I7_3;
30884     +DROP _I7_4 _I8_0 _I8_1 _I8_2 _I9_0 _I9_1 _I9_2 _I9_3 _I9_4 _I9_5;
MPRINT(EM_DIAGRAM):   DROP _I7_4 _I8_0 _I8_1 _I8_2 _I9_0 _I9_1 _I9_2 _I9_3 _I9_4 _I9_5;
30885     +DROP _I9_6 _I9_7;
MPRINT(EM_DIAGRAM):   DROP _I9_6 _I9_7;
30886     +DROP _H1 _H2 _H3;
MPRINT(EM_DIAGRAM):   DROP _H1 _H2 _H3;
30887     +DROP _T1_0;
MPRINT(EM_DIAGRAM):   DROP _T1_0;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
30888      run;
 
NOTE: DATA STEP view saved on file WORK._SCORETRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
 
30889      filename _emscr;
MPRINT(EM_DIAGRAM):   filename _emscr;
NOTE: Fileref _EMSCR has been deassigned.
30890      filename _emscr "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas" MOD;
MPRINT(EM_DIAGRAM):    filename _emscr "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas" MOD;
30891      %makeClassificationVars(target=Attrition_Flag, data=_ScoreTrain, decmeta=EMWS1.Ids_Attrition_Flag_DM, publish=N, fref=_emscr);
MPRINT(MAKECLASSIFICATIONVARS):   data _null_;
MPRINT(MAKECLASSIFICATIONVARS):   set EMWS1.Ids_Attrition_Flag_DM end=eof;
MPRINT(MAKECLASSIFICATIONVARS):   where _TYPE_='PREDICTED';
MPRINT(MAKECLASSIFICATIONVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKECLASSIFICATIONVARS):   call symput('pred_levels'!!strip(put(_N_,BEST.)), strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKECLASSIFICATIONVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKECLASSIFICATIONVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSIFICATIONVARS):   data _null_;
MPRINT(MAKECLASSIFICATIONVARS):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(MAKECLASSIFICATIONVARS):   where _TYPE_ in('INTO', 'FROM');
MPRINT(MAKECLASSIFICATIONVARS):   if _TYPE_ = 'INTO' then do;
MPRINT(MAKECLASSIFICATIONVARS):   call symput('into_var', strip(Variable));
MPRINT(MAKECLASSIFICATIONVARS):   call symput('into_label', strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKECLASSIFICATIONVARS):   end;
MPRINT(MAKECLASSIFICATIONVARS):   else do;
MPRINT(MAKECLASSIFICATIONVARS):   call symput('from_var', strip(Variable));
MPRINT(MAKECLASSIFICATIONVARS):   call symput('from_label', strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKECLASSIFICATIONVARS):   end;
MPRINT(MAKECLASSIFICATIONVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_ in ('FROM', 'INTO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLASSIFICATIONVARS):   data _null_;
MPRINT(MAKECLASSIFICATIONVARS):   set sashelp.vformat;
MPRINT(MAKECLASSIFICATIONVARS):   where upcase(fmtname)="$CHAR17";
MPRINT(MAKECLASSIFICATIONVARS):   if libname ne '' and memname ne '' then call symput('_fmtcat', strip(libname)!!'.'!!memname);
MPRINT(MAKECLASSIFICATIONVARS):   run;
 
NOTE: There were 0 observations read from the data set SASHELP.VFORMAT.
      WHERE UPCASE(fmtname)='$CHAR17';
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.15 seconds
 
 
MPRINT(MAKECLASSIFICATIONVARS):   data _null_;
MPRINT(MAKECLASSIFICATIONVARS):   file _emscr MOD;
MPRINT(MAKECLASSIFICATIONVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKECLASSIFICATIONVARS):   put "*Computing Classification Vars: Attrition_Flag;";
MPRINT(MAKECLASSIFICATIONVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKECLASSIFICATIONVARS):   put "length _format200 $200;";
MPRINT(MAKECLASSIFICATIONVARS):   put "drop _format200;";
MPRINT(MAKECLASSIFICATIONVARS):   put "_format200= ' ' ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "length _p_ 8;";
MPRINT(MAKECLASSIFICATIONVARS):   put "_p_= 0 ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "drop _p_ ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "if P_Attrition_Flag1 - _p_ > 1e-8 then do ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "   _p_= P_Attrition_Flag1 ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "   _format200='1';";
MPRINT(MAKECLASSIFICATIONVARS):   put "end;";
MPRINT(MAKECLASSIFICATIONVARS):   put "if P_Attrition_Flag0 - _p_ > 1e-8 then do ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "   _p_= P_Attrition_Flag0 ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "   _format200='0';";
MPRINT(MAKECLASSIFICATIONVARS):   put "end;";
MPRINT(MAKECLASSIFICATIONVARS):   put
MPRINT(MAKECLASSIFICATIONVARS):   "I_Attrition_Flag=dmnorm(_format200,32); ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "if I_Attrition_Flag='1' then";
MPRINT(MAKECLASSIFICATIONVARS):   put "U_Attrition_Flag='1';";
MPRINT(MAKECLASSIFICATIONVARS):   put "if I_Attrition_Flag='0' then";
MPRINT(MAKECLASSIFICATIONVARS):   put "U_Attrition_Flag='0';";
MPRINT(MAKECLASSIFICATIONVARS):   run;
 
NOTE: The file _EMSCR is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9672,
      Last Modified=09Apr2022:15:40:29,
      Create Time=09Apr2022:15:40:28
 
NOTE: 22 records were written to the file _EMSCR.
      The minimum record length was 4.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
30892      filename _emscr;
MPRINT(EM_DIAGRAM):   filename _emscr;
NOTE: Fileref _EMSCR has been deassigned.
30893      filename _emscr "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMPUBLISHSCORE.sas" MOD;
MPRINT(EM_DIAGRAM):    filename _emscr "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMPUBLISHSCORE.sas" MOD;
30894      %makeClassificationVars(target=Attrition_Flag, data=_ScoreTrain, decmeta=EMWS1.Ids_Attrition_Flag_DM, publish=Y, fref=_emscr);
MPRINT(MAKECLASSIFICATIONVARS):   data _null_;
MPRINT(MAKECLASSIFICATIONVARS):   set EMWS1.Ids_Attrition_Flag_DM end=eof;
MPRINT(MAKECLASSIFICATIONVARS):   where _TYPE_='PREDICTED';
MPRINT(MAKECLASSIFICATIONVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKECLASSIFICATIONVARS):   call symput('pred_levels'!!strip(put(_N_,BEST.)), strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKECLASSIFICATIONVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKECLASSIFICATIONVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSIFICATIONVARS):   data _null_;
MPRINT(MAKECLASSIFICATIONVARS):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(MAKECLASSIFICATIONVARS):   where _TYPE_ in('INTO', 'FROM');
MPRINT(MAKECLASSIFICATIONVARS):   if _TYPE_ = 'INTO' then do;
MPRINT(MAKECLASSIFICATIONVARS):   call symput('into_var', strip(Variable));
MPRINT(MAKECLASSIFICATIONVARS):   call symput('into_label', strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKECLASSIFICATIONVARS):   end;
MPRINT(MAKECLASSIFICATIONVARS):   else do;
MPRINT(MAKECLASSIFICATIONVARS):   call symput('from_var', strip(Variable));
MPRINT(MAKECLASSIFICATIONVARS):   call symput('from_label', strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKECLASSIFICATIONVARS):   end;
MPRINT(MAKECLASSIFICATIONVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_ in ('FROM', 'INTO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLASSIFICATIONVARS):   data _null_;
MPRINT(MAKECLASSIFICATIONVARS):   set sashelp.vformat;
MPRINT(MAKECLASSIFICATIONVARS):   where upcase(fmtname)="$CHAR17";
MPRINT(MAKECLASSIFICATIONVARS):   if libname ne '' and memname ne '' then call symput('_fmtcat', strip(libname)!!'.'!!memname);
MPRINT(MAKECLASSIFICATIONVARS):   run;
 
NOTE: There were 0 observations read from the data set SASHELP.VFORMAT.
      WHERE UPCASE(fmtname)='$CHAR17';
NOTE: DATA statement used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
 
MPRINT(MAKECLASSIFICATIONVARS):   data _null_;
MPRINT(MAKECLASSIFICATIONVARS):   file _emscr MOD;
MPRINT(MAKECLASSIFICATIONVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKECLASSIFICATIONVARS):   put "*Computing Classification Vars: Attrition_Flag;";
MPRINT(MAKECLASSIFICATIONVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKECLASSIFICATIONVARS):   put "length _format200 $200;";
MPRINT(MAKECLASSIFICATIONVARS):   put "drop _format200;";
MPRINT(MAKECLASSIFICATIONVARS):   put "_format200= ' ' ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "length _p_ 8;";
MPRINT(MAKECLASSIFICATIONVARS):   put "_p_= 0 ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "drop _p_ ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "if P_Attrition_Flag1 - _p_ > 1e-8 then do ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "   _p_= P_Attrition_Flag1 ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "   _format200='1';";
MPRINT(MAKECLASSIFICATIONVARS):   put "end;";
MPRINT(MAKECLASSIFICATIONVARS):   put "if P_Attrition_Flag0 - _p_ > 1e-8 then do ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "   _p_= P_Attrition_Flag0 ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "   _format200='0';";
MPRINT(MAKECLASSIFICATIONVARS):   put "end;";
MPRINT(MAKECLASSIFICATIONVARS):   put
MPRINT(MAKECLASSIFICATIONVARS):   "I_Attrition_Flag=dmnorm(_format200,32); ;";
MPRINT(MAKECLASSIFICATIONVARS):   put "if I_Attrition_Flag='1' then";
MPRINT(MAKECLASSIFICATIONVARS):   put "U_Attrition_Flag='1';";
MPRINT(MAKECLASSIFICATIONVARS):   put "if I_Attrition_Flag='0' then";
MPRINT(MAKECLASSIFICATIONVARS):   put "U_Attrition_Flag='0';";
MPRINT(MAKECLASSIFICATIONVARS):   run;
 
NOTE: The file _EMSCR is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=9690,
      Last Modified=09Apr2022:15:40:29,
      Create Time=09Apr2022:15:40:29
 
NOTE: 22 records were written to the file _EMSCR.
      The minimum record length was 4.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
30895      filename _emscr;
MPRINT(EM_DIAGRAM):   filename _emscr;
NOTE: Fileref _EMSCR has been deassigned.
30896      filename _f1 "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\POSTEPSCORECODE.sas";
MPRINT(EM_DIAGRAM):    filename _f1 "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\POSTEPSCORECODE.sas";
30897      filename _f2 "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   filename _f2 "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMPUBLISHSCORE.sas";
30898      %em_copyfile(infref=_f1, outfref=_f2, append=Y);
MPRINT(EM_DIAGRAM):  ;
30899      filename _f1;
MPRINT(EM_DIAGRAM):   filename _f1;
NOTE: Fileref _F1 has been deassigned.
30900      filename _f2;
MPRINT(EM_DIAGRAM):   filename _f2;
NOTE: Fileref _F2 has been deassigned.
30901      filename _emscr "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas" MOD;
MPRINT(EM_DIAGRAM):    filename _emscr "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas" MOD;
30902      %makeResidualVars(target=Attrition_Flag, decmeta=EMWS1.Ids_Attrition_Flag_DM, fref=_emscr);
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS1.Ids_Attrition_Flag_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS1.Ids_Attrition_Flag_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)), strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)), strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file _emscr;
MPRINT(MAKERESIDUALVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: Attrition_Flag;";
MPRINT(MAKERESIDUALVARS):   put "*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Length R_Attrition_Flag1 8;";
MPRINT(MAKERESIDUALVARS):   put "Label R_Attrition_Flag1='Residual: Attrition_Flag=1';";
MPRINT(MAKERESIDUALVARS):   put "Length R_Attrition_Flag0 8;";
MPRINT(MAKERESIDUALVARS):   put "Label R_Attrition_Flag0='Residual: Attrition_Flag=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_Attrition_Flag ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_Attrition_Flag ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_Attrition_Flag1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_Attrition_Flag0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_Attrition_Flag1= - P_Attrition_Flag1;";
MPRINT(MAKERESIDUALVARS):   put "R_Attrition_Flag0= - P_Attrition_Flag0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_Attrition_Flag);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_Attrition_Flag1= R_Attrition_Flag1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_Attrition_Flag0= R_Attrition_Flag0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: The file _EMSCR is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=10299,
      Last Modified=09Apr2022:15:40:30,
      Create Time=09Apr2022:15:40:28
 
NOTE: 23 records were written to the file _EMSCR.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
30903      filename _emscr;
MPRINT(EM_DIAGRAM):   filename _emscr;
NOTE: Fileref _EMSCR has been deassigned.
30904      filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * HPNNA: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30905      *------------------------------------------------------------*;
30906      * HPNNA: Scoring DATA data;
30907      *------------------------------------------------------------*;
30908      data EMWS1.HPNNA_TRAIN
30909      / view=EMWS1.HPNNA_TRAIN
30910      ;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_TRAIN / view=EMWS1.HPNNA_TRAIN ;
30911      set EMWS1.MdlComp2_TRAIN
30912      ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_TRAIN ;
30913      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas.
30914     +LENGTH _UFormat $ 32;
MPRINT(EM_DIAGRAM):   LENGTH _UFormat $ 32;
30915     +_UFormat = ' ';
MPRINT(EM_DIAGRAM):   _UFormat = ' ';
30916     +LENGTH _WARN_ $4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4;
30917     +LABEL _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings';
30918     +_WARN_ = '    ';
MPRINT(EM_DIAGRAM):   _WARN_ = '    ';
30919     +_nInputMiss = 0;
MPRINT(EM_DIAGRAM):   _nInputMiss = 0;
30920     +_nInputOutRange = 0;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 0;
30921     +
30922     +/******************************************************************************/
30923     +/*                    Calculate Standardized Inputs                           */
30924     +/******************************************************************************/
30925     +
30926     +_I1 = RANGE_LOG_Total_Trans_Amt;
MPRINT(EM_DIAGRAM):   _I1 = RANGE_LOG_Total_Trans_Amt;
30927     +IF MISSING(RANGE_LOG_Total_Trans_Amt) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_LOG_Total_Trans_Amt) THEN DO;
30928     +    _I1 = 0.26846267058842; /* impute average value */
MPRINT(EM_DIAGRAM):   _I1 = 0.26846267058842;
30929     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30930     +END;
MPRINT(EM_DIAGRAM):   END;
30931     +_I1 = 2 * ( _I1 ) / 0.99999999994221 - 1;
MPRINT(EM_DIAGRAM):   _I1 = 2 * ( _I1 ) / 0.99999999994221 - 1;
30932     +
30933     +_I2 = RANGE_SQRT_Avg_Utilization_Ratio;
MPRINT(EM_DIAGRAM):   _I2 = RANGE_SQRT_Avg_Utilization_Ratio;
30934     +IF MISSING(RANGE_SQRT_Avg_Utilization_Ratio) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Avg_Utilization_Ratio) THEN DO;
30935     +    _I2 = 0.42138171279265; /* impute average value */
MPRINT(EM_DIAGRAM):   _I2 = 0.42138171279265;
30936     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30937     +END;
MPRINT(EM_DIAGRAM):   END;
30938     +_I2 = 2 * ( _I2 ) / 0.99799598996989 - 1;
MPRINT(EM_DIAGRAM):   _I2 = 2 * ( _I2 ) / 0.99799598996989 - 1;
30939     +
30940     +_I3 = RANGE_SQRT_Total_Amt_Chng_Q4_Q1;
MPRINT(EM_DIAGRAM):   _I3 = RANGE_SQRT_Total_Amt_Chng_Q4_Q1;
30941     +IF MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1) THEN DO;
30942     +    _I3 = 0.46841281572611; /* impute average value */
MPRINT(EM_DIAGRAM):   _I3 = 0.46841281572611;
30943     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30944     +END;
MPRINT(EM_DIAGRAM):   END;
30945     +_I3 = 2 * ( _I3 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I3 = 2 * ( _I3 ) / 1 - 1;
30946     +
30947     +_I4 = RANGE_SQRT_Total_Ct_Chng_Q4_Q1;
MPRINT(EM_DIAGRAM):   _I4 = RANGE_SQRT_Total_Ct_Chng_Q4_Q1;
30948     +IF MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1) THEN DO;
30949     +    _I4 = 0.43231770050692; /* impute average value */
MPRINT(EM_DIAGRAM):   _I4 = 0.43231770050692;
30950     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30951     +END;
MPRINT(EM_DIAGRAM):   END;
30952     +_I4 = 2 * ( _I4 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I4 = 2 * ( _I4 ) / 1 - 1;
30953     +
30954     +_I5 = RANGE_Total_Revolving_Bal;
MPRINT(EM_DIAGRAM):   _I5 = RANGE_Total_Revolving_Bal;
30955     +IF MISSING(RANGE_Total_Revolving_Bal) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_Total_Revolving_Bal) THEN DO;
30956     +    _I5 = 0.46336482205213; /* impute average value */
MPRINT(EM_DIAGRAM):   _I5 = 0.46336482205213;
30957     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30958     +END;
MPRINT(EM_DIAGRAM):   END;
30959     +_I5 = 2 * ( _I5 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I5 = 2 * ( _I5 ) / 1 - 1;
30960     +
30961     +_I6_0 = 0;
MPRINT(EM_DIAGRAM):   _I6_0 = 0;
30962     +_I6_1 = 0;
MPRINT(EM_DIAGRAM):   _I6_1 = 0;
30963     +_I6_2 = 0;
MPRINT(EM_DIAGRAM):   _I6_2 = 0;
30964     +_I6_3 = 0;
MPRINT(EM_DIAGRAM):   _I6_3 = 0;
30965     +_I6_4 = 0;
MPRINT(EM_DIAGRAM):   _I6_4 = 0;
30966     +_I6_5 = 0;
MPRINT(EM_DIAGRAM):   _I6_5 = 0;
30967     +_I6_6 = 0;
MPRINT(EM_DIAGRAM):   _I6_6 = 0;
30968     +_I6_7 = 0;
MPRINT(EM_DIAGRAM):   _I6_7 = 0;
30969     +_I6_8 = 0;
MPRINT(EM_DIAGRAM):   _I6_8 = 0;
30970     +_I6_9 = 0;
MPRINT(EM_DIAGRAM):   _I6_9 = 0;
30971     +_I6_10 = 0;
MPRINT(EM_DIAGRAM):   _I6_10 = 0;
30972     +IF MISSING(G_Customer_Age) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Customer_Age) THEN DO;
30973     +    _I6_6 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I6_6 = 1;
30974     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
30975     +END;
MPRINT(EM_DIAGRAM):   END;
30976     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30977     +    _UFormat = LEFT(UPCASE(PUT( G_Customer_Age, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Customer_Age, BEST. )));
30978     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
30979     +        WHEN ( "0" ) _I6_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I6_0 = 1;
30980     +        WHEN ( "1" ) _I6_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I6_1 = 1;
30981     +        WHEN ( "2" ) _I6_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I6_2 = 1;
30982     +        WHEN ( "3" ) _I6_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I6_3 = 1;
30983     +        WHEN ( "4" ) _I6_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I6_4 = 1;
30984     +        WHEN ( "5" ) _I6_5 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "5" ) _I6_5 = 1;
30985     +        WHEN ( "6" ) _I6_6 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "6" ) _I6_6 = 1;
30986     +        WHEN ( "7" ) _I6_7 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "7" ) _I6_7 = 1;
30987     +        WHEN ( "8" ) _I6_8 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "8" ) _I6_8 = 1;
30988     +        WHEN ( "9" ) _I6_9 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "9" ) _I6_9 = 1;
30989     +        WHEN ( "10" ) _I6_10 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "10" ) _I6_10 = 1;
30990     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
30991     +            _I6_6 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I6_6 = 1;
30992     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
30993     +        END;
MPRINT(EM_DIAGRAM):   END;
30994     +    END;
MPRINT(EM_DIAGRAM):   END;
30995     +END;
MPRINT(EM_DIAGRAM):   END;
30996     +
30997     +_I7_0 = 0;
MPRINT(EM_DIAGRAM):   _I7_0 = 0;
30998     +_I7_1 = 0;
MPRINT(EM_DIAGRAM):   _I7_1 = 0;
30999     +_I7_2 = 0;
MPRINT(EM_DIAGRAM):   _I7_2 = 0;
31000     +_I7_3 = 0;
MPRINT(EM_DIAGRAM):   _I7_3 = 0;
31001     +_I7_4 = 0;
MPRINT(EM_DIAGRAM):   _I7_4 = 0;
31002     +IF MISSING(G_Months_Inactive_12_mon) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Months_Inactive_12_mon) THEN DO;
31003     +    _I7_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I7_2 = 1;
31004     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31005     +END;
MPRINT(EM_DIAGRAM):   END;
31006     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31007     +    _UFormat = LEFT(UPCASE(PUT( G_Months_Inactive_12_mon, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Months_Inactive_12_mon, BEST. )));
31008     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31009     +        WHEN ( "0" ) _I7_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I7_0 = 1;
31010     +        WHEN ( "1" ) _I7_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I7_1 = 1;
31011     +        WHEN ( "2" ) _I7_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I7_2 = 1;
31012     +        WHEN ( "3" ) _I7_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I7_3 = 1;
31013     +        WHEN ( "4" ) _I7_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I7_4 = 1;
31014     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31015     +            _I7_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I7_2 = 1;
31016     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31017     +        END;
MPRINT(EM_DIAGRAM):   END;
31018     +    END;
MPRINT(EM_DIAGRAM):   END;
31019     +END;
MPRINT(EM_DIAGRAM):   END;
31020     +
31021     +_I8_0 = 0;
MPRINT(EM_DIAGRAM):   _I8_0 = 0;
31022     +_I8_1 = 0;
MPRINT(EM_DIAGRAM):   _I8_1 = 0;
31023     +_I8_2 = 0;
MPRINT(EM_DIAGRAM):   _I8_2 = 0;
31024     +IF MISSING(G_Total_Relationship_Count) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Total_Relationship_Count) THEN DO;
31025     +    _I8_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I8_2 = 1;
31026     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31027     +END;
MPRINT(EM_DIAGRAM):   END;
31028     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31029     +    _UFormat = LEFT(UPCASE(PUT( G_Total_Relationship_Count, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Total_Relationship_Count, BEST. )));
31030     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31031     +        WHEN ( "0" ) _I8_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I8_0 = 1;
31032     +        WHEN ( "1" ) _I8_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I8_1 = 1;
31033     +        WHEN ( "2" ) _I8_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I8_2 = 1;
31034     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31035     +            _I8_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I8_2 = 1;
31036     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31037     +        END;
MPRINT(EM_DIAGRAM):   END;
31038     +    END;
MPRINT(EM_DIAGRAM):   END;
31039     +END;
MPRINT(EM_DIAGRAM):   END;
31040     +
31041     +_I9_0 = 0;
MPRINT(EM_DIAGRAM):   _I9_0 = 0;
31042     +_I9_1 = 0;
MPRINT(EM_DIAGRAM):   _I9_1 = 0;
31043     +_I9_2 = 0;
MPRINT(EM_DIAGRAM):   _I9_2 = 0;
31044     +_I9_3 = 0;
MPRINT(EM_DIAGRAM):   _I9_3 = 0;
31045     +_I9_4 = 0;
MPRINT(EM_DIAGRAM):   _I9_4 = 0;
31046     +_I9_5 = 0;
MPRINT(EM_DIAGRAM):   _I9_5 = 0;
31047     +_I9_6 = 0;
MPRINT(EM_DIAGRAM):   _I9_6 = 0;
31048     +_I9_7 = 0;
MPRINT(EM_DIAGRAM):   _I9_7 = 0;
31049     +IF MISSING(G_Total_Trans_Ct) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Total_Trans_Ct) THEN DO;
31050     +    _I9_7 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I9_7 = 1;
31051     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31052     +END;
MPRINT(EM_DIAGRAM):   END;
31053     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31054     +    _UFormat = LEFT(UPCASE(PUT( G_Total_Trans_Ct, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Total_Trans_Ct, BEST. )));
31055     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31056     +        WHEN ( "0" ) _I9_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I9_0 = 1;
31057     +        WHEN ( "1" ) _I9_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I9_1 = 1;
31058     +        WHEN ( "2" ) _I9_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I9_2 = 1;
31059     +        WHEN ( "3" ) _I9_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I9_3 = 1;
31060     +        WHEN ( "4" ) _I9_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I9_4 = 1;
31061     +        WHEN ( "5" ) _I9_5 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "5" ) _I9_5 = 1;
31062     +        WHEN ( "6" ) _I9_6 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "6" ) _I9_6 = 1;
31063     +        WHEN ( "7" ) _I9_7 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "7" ) _I9_7 = 1;
31064     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31065     +            _I9_7 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I9_7 = 1;
31066     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31067     +        END;
MPRINT(EM_DIAGRAM):   END;
31068     +    END;
MPRINT(EM_DIAGRAM):   END;
31069     +END;
MPRINT(EM_DIAGRAM):   END;
31070     +
31071     +/******************************************************************************/
31072     +/*                              Set _WARN_ Value                              */
31073     +/******************************************************************************/
31074     +IF ( _nInputMiss GT 0) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _nInputMiss GT 0) THEN DO;
31075     +    SUBSTR( _WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR( _WARN_, 1, 1) = 'M';
31076     +END;
MPRINT(EM_DIAGRAM):   END;
31077     +IF ( _nInputOutRange GT 0) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _nInputOutRange GT 0) THEN DO;
31078     +    SUBSTR( _WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   SUBSTR( _WARN_, 2, 1) = 'U';
31079     +END;
MPRINT(EM_DIAGRAM):   END;
31080     +
31081     +/******************************************************************************/
31082     +/*                   Calculate Output of Hidden Layer 1                       */
31083     +/******************************************************************************/
31084     +
31085     +_H1 = -0.0497837944031
31086     +    + 2.87868898599161 * _I1
31087     +    + 0.16063372756462 * _I2
31088     +    - 0.49030529018355 * _I3
31089     +    - 2.47244064996832 * _I4
31090     +    + 1.30637034552203 * _I5
31091     +    + 0.23528586564228 * _I6_0
31092     +    + 0.26974689764919 * _I6_1
31093     +    - 0.07349823573787 * _I6_2
31094     +    + 0.16214916198249 * _I6_3
31095     +    + 0.27012524162385 * _I6_4
31096     +    + 0.32603335250487 * _I6_5
31097     +    + 0.26181228964426 * _I6_6
31098     +    + 0.143924528524 * _I6_7
31099     +    - 0.23685564369312 * _I6_8
31100     +    - 0.82763977920721 * _I6_9
31101     +    - 0.64683461376163 * _I6_10
31102     +    + 1.08759021322259 * _I7_0
31103     +    + 0.21622342803964 * _I7_1
31104     +    - 0.13939963447866 * _I7_2
31105     +    - 0.20808641757215 * _I7_3
31106     +    - 1.00237786994091 * _I7_4
31107     +    + 0.19533521889067 * _I8_0
31108     +    + 0.04292191572239 * _I8_1
31109     +    - 0.28110758697167 * _I8_2
31110     +    + 3.4988685884969 * _I9_0
31111     +    + 0.74341623880574 * _I9_1
31112     +    + 1.05107847137329 * _I9_2
31113     +    + 0.61285138014397 * _I9_3
31114     +    + 0.32628342613665 * _I9_4
31115     +    - 0.07626093385477 * _I9_5
31116     +    + 0.38690662702643 * _I9_6
31117     +    - 6.6127243083323 * _I9_7;
MPRINT(EM_DIAGRAM):   _H1 = -0.0497837944031 + 2.87868898599161 * _I1 + 0.16063372756462 * _I2 - 0.49030529018355 * _I3 - 2.47244064996832 * _I4 + 1.30637034552203 * _I5 + 0.23528586564228 * _I6_0 + 0.26974689764919 * _I6_1 - 0.07349823573787 * _I6_2 +
0.16214916198249 * _I6_3 + 0.27012524162385 * _I6_4 + 0.32603335250487 * _I6_5 + 0.26181228964426 * _I6_6 + 0.143924528524 * _I6_7 - 0.23685564369312 * _I6_8 - 0.82763977920721 * _I6_9 - 0.64683461376163 * _I6_10 + 1.08759021322259 * _I7_0 +
0.21622342803964 * _I7_1 - 0.13939963447866 * _I7_2 - 0.20808641757215 * _I7_3 - 1.00237786994091 * _I7_4 + 0.19533521889067 * _I8_0 + 0.04292191572239 * _I8_1 - 0.28110758697167 * _I8_2 + 3.4988685884969 * _I9_0 + 0.74341623880574 * _I9_1 +
1.05107847137329 * _I9_2 + 0.61285138014397 * _I9_3 + 0.32628342613665 * _I9_4 - 0.07626093385477 * _I9_5 + 0.38690662702643 * _I9_6 - 6.6127243083323 * _I9_7;
31118     +IF ( _H1 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H1 GE 0 ) THEN DO;
31119     +    _H1 = EXP( -2 * _H1 );
MPRINT(EM_DIAGRAM):   _H1 = EXP( -2 * _H1 );
31120     +    _H1 = ( 1 - _H1 ) / ( 1 + _H1 );
MPRINT(EM_DIAGRAM):   _H1 = ( 1 - _H1 ) / ( 1 + _H1 );
31121     +END;
MPRINT(EM_DIAGRAM):   END;
31122     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31123     +    _H1 = EXP( 2 * _H1 );
MPRINT(EM_DIAGRAM):   _H1 = EXP( 2 * _H1 );
31124     +    _H1 = ( _H1 - 1 ) / ( _H1 + 1 );
MPRINT(EM_DIAGRAM):   _H1 = ( _H1 - 1 ) / ( _H1 + 1 );
31125     +END;
MPRINT(EM_DIAGRAM):   END;
31126     +
31127     +_H2 = 1.83543549081065
31128     +    + 3.7783245643669 * _I1
31129     +    - 0.45347521325884 * _I2
31130     +    - 0.57027148710928 * _I3
31131     +    - 0.8277716384752 * _I4
31132     +    - 0.08136016614353 * _I5
31133     +    + 0.06679985745167 * _I6_0
31134     +    + 0.13154981728072 * _I6_1
31135     +    + 0.43124910346702 * _I6_2
31136     +    + 0.06316906722596 * _I6_3
31137     +    + 0.32142995163961 * _I6_4
31138     +    + 0.23779352451111 * _I6_5
31139     +    - 0.12561811951488 * _I6_6
31140     +    + 0.0474319212792 * _I6_7
31141     +    + 0.24576475116744 * _I6_8
31142     +    + 0.72124212244433 * _I6_9
31143     +    - 0.30429122771585 * _I6_10
31144     +    + 0.50507601560678 * _I7_0
31145     +    + 0.32573900043651 * _I7_1
31146     +    + 0.54468433063343 * _I7_2
31147     +    + 0.24409377533973 * _I7_3
31148     +    + 0.21355245825873 * _I7_4
31149     +    + 0.67614772734632 * _I8_0
31150     +    + 0.50729669251011 * _I8_1
31151     +    + 0.68568050900919 * _I8_2
31152     +    + 1.3084545575448 * _I9_0
31153     +    + 1.13758316030701 * _I9_1
31154     +    + 0.27137451357768 * _I9_2
31155     +    + 0.75533210062631 * _I9_3
31156     +    + 1.26346468811037 * _I9_4
31157     +    + 1.66500129976712 * _I9_5
31158     +    - 2.87715842442406 * _I9_6
31159     +    - 1.66528868253522 * _I9_7;
MPRINT(EM_DIAGRAM):   _H2 = 1.83543549081065 + 3.7783245643669 * _I1 - 0.45347521325884 * _I2 - 0.57027148710928 * _I3 - 0.8277716384752 * _I4 - 0.08136016614353 * _I5 + 0.06679985745167 * _I6_0 + 0.13154981728072 * _I6_1 + 0.43124910346702 * _I6_2 +
0.06316906722596 * _I6_3 + 0.32142995163961 * _I6_4 + 0.23779352451111 * _I6_5 - 0.12561811951488 * _I6_6 + 0.0474319212792 * _I6_7 + 0.24576475116744 * _I6_8 + 0.72124212244433 * _I6_9 - 0.30429122771585 * _I6_10 + 0.50507601560678 * _I7_0 +
0.32573900043651 * _I7_1 + 0.54468433063343 * _I7_2 + 0.24409377533973 * _I7_3 + 0.21355245825873 * _I7_4 + 0.67614772734632 * _I8_0 + 0.50729669251011 * _I8_1 + 0.68568050900919 * _I8_2 + 1.3084545575448 * _I9_0 + 1.13758316030701 * _I9_1 +
0.27137451357768 * _I9_2 + 0.75533210062631 * _I9_3 + 1.26346468811037 * _I9_4 + 1.66500129976712 * _I9_5 - 2.87715842442406 * _I9_6 - 1.66528868253522 * _I9_7;
31160     +IF ( _H2 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H2 GE 0 ) THEN DO;
31161     +    _H2 = EXP( -2 * _H2 );
MPRINT(EM_DIAGRAM):   _H2 = EXP( -2 * _H2 );
31162     +    _H2 = ( 1 - _H2 ) / ( 1 + _H2 );
MPRINT(EM_DIAGRAM):   _H2 = ( 1 - _H2 ) / ( 1 + _H2 );
31163     +END;
MPRINT(EM_DIAGRAM):   END;
31164     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31165     +    _H2 = EXP( 2 * _H2 );
MPRINT(EM_DIAGRAM):   _H2 = EXP( 2 * _H2 );
31166     +    _H2 = ( _H2 - 1 ) / ( _H2 + 1 );
MPRINT(EM_DIAGRAM):   _H2 = ( _H2 - 1 ) / ( _H2 + 1 );
31167     +END;
MPRINT(EM_DIAGRAM):   END;
31168     +
31169     +_H3 = 0.69506951652756
31170     +    - 1.47209478932412 * _I1
31171     +    - 1.16265728185804 * _I2
31172     +    + 0.9090683645627 * _I3
31173     +    + 2.35147897548686 * _I4
31174     +    + 3.30074578620084 * _I5
31175     +    - 0.31150547033793 * _I6_0
31176     +    - 0.76698753202567 * _I6_1
31177     +    - 0.17091045611845 * _I6_2
31178     +    - 0.33247436404483 * _I6_3
31179     +    + 0.15940016412827 * _I6_4
31180     +    - 0.0022155408578 * _I6_5
31181     +    - 0.11779165120942 * _I6_6
31182     +    + 0.03308267873366 * _I6_7
31183     +    + 0.33366973995059 * _I6_8
31184     +    + 1.65805295451413 * _I6_9
31185     +    + 0.27855621983567 * _I6_10
31186     +    - 0.16915466717604 * _I7_0
31187     +    + 0.00751172119554 * _I7_1
31188     +    - 0.00608962150266 * _I7_2
31189     +    + 0.06275301181757 * _I7_3
31190     +    + 0.86540273655389 * _I7_4
31191     +    - 0.92875364520664 * _I8_0
31192     +    + 0.67064872147019 * _I8_1
31193     +    + 1.01455195113271 * _I8_2
31194     +    - 1.87639047377756 * _I9_0
31195     +    - 0.96649938776339 * _I9_1
31196     +    - 0.74179014574167 * _I9_2
31197     +    - 0.78646800017147 * _I9_3
31198     +    - 0.16874396104659 * _I9_4
31199     +    - 0.01961079007072 * _I9_5
31200     +    - 0.05675387508415 * _I9_6
31201     +    + 5.30553811432309 * _I9_7;
MPRINT(EM_DIAGRAM):   _H3 = 0.69506951652756 - 1.47209478932412 * _I1 - 1.16265728185804 * _I2 + 0.9090683645627 * _I3 + 2.35147897548686 * _I4 + 3.30074578620084 * _I5 - 0.31150547033793 * _I6_0 - 0.76698753202567 * _I6_1 - 0.17091045611845 * _I6_2 -
0.33247436404483 * _I6_3 + 0.15940016412827 * _I6_4 - 0.0022155408578 * _I6_5 - 0.11779165120942 * _I6_6 + 0.03308267873366 * _I6_7 + 0.33366973995059 * _I6_8 + 1.65805295451413 * _I6_9 + 0.27855621983567 * _I6_10 - 0.16915466717604 * _I7_0 +
0.00751172119554 * _I7_1 - 0.00608962150266 * _I7_2 + 0.06275301181757 * _I7_3 + 0.86540273655389 * _I7_4 - 0.92875364520664 * _I8_0 + 0.67064872147019 * _I8_1 + 1.01455195113271 * _I8_2 - 1.87639047377756 * _I9_0 - 0.96649938776339 * _I9_1 -
0.74179014574167 * _I9_2 - 0.78646800017147 * _I9_3 - 0.16874396104659 * _I9_4 - 0.01961079007072 * _I9_5 - 0.05675387508415 * _I9_6 + 5.30553811432309 * _I9_7;
31202     +IF ( _H3 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H3 GE 0 ) THEN DO;
31203     +    _H3 = EXP( -2 * _H3 );
MPRINT(EM_DIAGRAM):   _H3 = EXP( -2 * _H3 );
31204     +    _H3 = ( 1 - _H3 ) / ( 1 + _H3 );
MPRINT(EM_DIAGRAM):   _H3 = ( 1 - _H3 ) / ( 1 + _H3 );
31205     +END;
MPRINT(EM_DIAGRAM):   END;
31206     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31207     +    _H3 = EXP( 2 * _H3 );
MPRINT(EM_DIAGRAM):   _H3 = EXP( 2 * _H3 );
31208     +    _H3 = ( _H3 - 1 ) / ( _H3 + 1 );
MPRINT(EM_DIAGRAM):   _H3 = ( _H3 - 1 ) / ( _H3 + 1 );
31209     +END;
MPRINT(EM_DIAGRAM):   END;
31210     +
31211     +/******************************************************************************/
31212     +/*                   Calculate Output of Target Layer                         */
31213     +/******************************************************************************/
31214     +
31215     +_T1_0 = 0.71994596163167
31216     +    + 3.25325330121454 * _H1
31217     +    + 2.71249042677312 * _H2
31218     +    - 2.93824602585615 * _H3;
MPRINT(EM_DIAGRAM):   _T1_0 = 0.71994596163167 + 3.25325330121454 * _H1 + 2.71249042677312 * _H2 - 2.93824602585615 * _H3;
31219     +LABEL P_Attrition_Flag1 = "Predicted: Attrition_Flag=1";
MPRINT(EM_DIAGRAM):   LABEL P_Attrition_Flag1 = "Predicted: Attrition_Flag=1";
31220     +IF ABS(_T1_0) < 36 THEN
31221     +    P_Attrition_Flag1 = 1.0 / (1.0 + EXP(-_T1_0));
MPRINT(EM_DIAGRAM):   IF ABS(_T1_0) < 36 THEN P_Attrition_Flag1 = 1.0 / (1.0 + EXP(-_T1_0));
31222     +ELSE
31223     +    IF _T1_0 < 0 THEN
31224     +        P_Attrition_Flag1 = 0;
MPRINT(EM_DIAGRAM):   ELSE IF _T1_0 < 0 THEN P_Attrition_Flag1 = 0;
31225     +    ELSE
31226     +        P_Attrition_Flag1 = 1;
MPRINT(EM_DIAGRAM):   ELSE P_Attrition_Flag1 = 1;
31227     +LABEL P_Attrition_Flag0 = "Predicted: Attrition_Flag=0";
MPRINT(EM_DIAGRAM):   LABEL P_Attrition_Flag0 = "Predicted: Attrition_Flag=0";
31228     +P_Attrition_Flag0 = 1.0 - P_Attrition_Flag1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1.0 - P_Attrition_Flag1;
31229     +
31230     +/******************************************************************************/
31231     +/*                        Drop temporary variables                            */
31232     +/******************************************************************************/
31233     +DROP _UFormat _nInputMiss _nInputOutRange;
MPRINT(EM_DIAGRAM):   DROP _UFormat _nInputMiss _nInputOutRange;
31234     +DROP _I1 _I2 _I3 _I4 _I5 _I6_0 _I6_1 _I6_2 _I6_3 _I6_4;
MPRINT(EM_DIAGRAM):   DROP _I1 _I2 _I3 _I4 _I5 _I6_0 _I6_1 _I6_2 _I6_3 _I6_4;
31235     +DROP _I6_5 _I6_6 _I6_7 _I6_8 _I6_9 _I6_10 _I7_0 _I7_1 _I7_2 _I7_3;
MPRINT(EM_DIAGRAM):   DROP _I6_5 _I6_6 _I6_7 _I6_8 _I6_9 _I6_10 _I7_0 _I7_1 _I7_2 _I7_3;
31236     +DROP _I7_4 _I8_0 _I8_1 _I8_2 _I9_0 _I9_1 _I9_2 _I9_3 _I9_4 _I9_5;
MPRINT(EM_DIAGRAM):   DROP _I7_4 _I8_0 _I8_1 _I8_2 _I9_0 _I9_1 _I9_2 _I9_3 _I9_4 _I9_5;
31237     +DROP _I9_6 _I9_7;
MPRINT(EM_DIAGRAM):   DROP _I9_6 _I9_7;
31238     +DROP _H1 _H2 _H3;
MPRINT(EM_DIAGRAM):   DROP _H1 _H2 _H3;
31239     +DROP _T1_0;
MPRINT(EM_DIAGRAM):   DROP _T1_0;
31240     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31241     +*Computing Classification Vars: Attrition_Flag;
MPRINT(EM_DIAGRAM):   *Computing Classification Vars: Attrition_Flag;
31242     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31243     +length _format200 $200;
MPRINT(EM_DIAGRAM):   length _format200 $200;
31244     +drop _format200;
MPRINT(EM_DIAGRAM):   drop _format200;
31245     +_format200= ' ' ;
MPRINT(EM_DIAGRAM):   _format200= ' ' ;
31246     +length _p_ 8;
MPRINT(EM_DIAGRAM):   length _p_ 8;
31247     +_p_= 0 ;
MPRINT(EM_DIAGRAM):   _p_= 0 ;
31248     +drop _p_ ;
MPRINT(EM_DIAGRAM):   drop _p_ ;
31249     +if P_Attrition_Flag1 - _p_ > 1e-8 then do ;
MPRINT(EM_DIAGRAM):   if P_Attrition_Flag1 - _p_ > 1e-8 then do ;
31250     +   _p_= P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   _p_= P_Attrition_Flag1 ;
31251     +   _format200='1';
MPRINT(EM_DIAGRAM):   _format200='1';
31252     +end;
MPRINT(EM_DIAGRAM):   end;
31253     +if P_Attrition_Flag0 - _p_ > 1e-8 then do ;
MPRINT(EM_DIAGRAM):   if P_Attrition_Flag0 - _p_ > 1e-8 then do ;
31254     +   _p_= P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   _p_= P_Attrition_Flag0 ;
31255     +   _format200='0';
MPRINT(EM_DIAGRAM):   _format200='0';
31256     +end;
MPRINT(EM_DIAGRAM):   end;
31257     +I_Attrition_Flag=dmnorm(_format200,32); ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag=dmnorm(_format200,32);
MPRINT(EM_DIAGRAM):   ;
31258     +if I_Attrition_Flag='1' then
31259     +U_Attrition_Flag='1';
MPRINT(EM_DIAGRAM):   if I_Attrition_Flag='1' then U_Attrition_Flag='1';
31260     +if I_Attrition_Flag='0' then
31261     +U_Attrition_Flag='0';
MPRINT(EM_DIAGRAM):   if I_Attrition_Flag='0' then U_Attrition_Flag='0';
31262     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31263     +*Computing Residual Vars: Attrition_Flag;
MPRINT(EM_DIAGRAM):   *Computing Residual Vars: Attrition_Flag;
31264     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31265     +Length R_Attrition_Flag1 8;
MPRINT(EM_DIAGRAM):   Length R_Attrition_Flag1 8;
31266     +Label R_Attrition_Flag1='Residual: Attrition_Flag=1';
MPRINT(EM_DIAGRAM):   Label R_Attrition_Flag1= 'Residual: Attrition_Flag=1';
31267     +Length R_Attrition_Flag0 8;
MPRINT(EM_DIAGRAM):   Length R_Attrition_Flag0 8;
31268     +Label R_Attrition_Flag0='Residual: Attrition_Flag=0';
MPRINT(EM_DIAGRAM):   Label R_Attrition_Flag0= 'Residual: Attrition_Flag=0';
31269     +if
31270     + F_Attrition_Flag ne '1'
31271     +and F_Attrition_Flag ne '0'
31272     + then do;
MPRINT(EM_DIAGRAM):   if F_Attrition_Flag ne '1' and F_Attrition_Flag ne '0' then do;
31273     +R_Attrition_Flag1=.;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1=.;
31274     +R_Attrition_Flag0=.;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0=.;
31275     +end;
MPRINT(EM_DIAGRAM):   end;
31276     +else do;
MPRINT(EM_DIAGRAM):   else do;
31277     +R_Attrition_Flag1= - P_Attrition_Flag1;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1= - P_Attrition_Flag1;
31278     +R_Attrition_Flag0= - P_Attrition_Flag0;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0= - P_Attrition_Flag0;
31279     +select(F_Attrition_Flag);
MPRINT(EM_DIAGRAM):   select(F_Attrition_Flag);
31280     +when('1')R_Attrition_Flag1= R_Attrition_Flag1+1;
MPRINT(EM_DIAGRAM):   when('1')R_Attrition_Flag1= R_Attrition_Flag1+1;
31281     +when('0')R_Attrition_Flag0= R_Attrition_Flag0+1;
MPRINT(EM_DIAGRAM):   when('0')R_Attrition_Flag0= R_Attrition_Flag0+1;
31282     +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
31283     +end;
MPRINT(EM_DIAGRAM):   end;
31284     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
31285      run;
 
NOTE: DATA STEP view saved on file EMWS1.HPNNA_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.22 seconds
      cpu time            0.21 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.23 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
31286      quit;
31287      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
31288      filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * HPNNA: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31289      *------------------------------------------------------------*;
31290      * HPNNA: Scoring VALIDATE data;
31291      *------------------------------------------------------------*;
31292      data EMWS1.HPNNA_VALIDATE
31293      / view=EMWS1.HPNNA_VALIDATE
31294      ;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_VALIDATE / view=EMWS1.HPNNA_VALIDATE ;
31295      set EMWS1.MdlComp2_VALIDATE
31296      ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_VALIDATE ;
31297      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas.
31298     +LENGTH _UFormat $ 32;
MPRINT(EM_DIAGRAM):   LENGTH _UFormat $ 32;
31299     +_UFormat = ' ';
MPRINT(EM_DIAGRAM):   _UFormat = ' ';
31300     +LENGTH _WARN_ $4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4;
31301     +LABEL _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings';
31302     +_WARN_ = '    ';
MPRINT(EM_DIAGRAM):   _WARN_ = '    ';
31303     +_nInputMiss = 0;
MPRINT(EM_DIAGRAM):   _nInputMiss = 0;
31304     +_nInputOutRange = 0;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 0;
31305     +
31306     +/******************************************************************************/
31307     +/*                    Calculate Standardized Inputs                           */
31308     +/******************************************************************************/
31309     +
31310     +_I1 = RANGE_LOG_Total_Trans_Amt;
MPRINT(EM_DIAGRAM):   _I1 = RANGE_LOG_Total_Trans_Amt;
31311     +IF MISSING(RANGE_LOG_Total_Trans_Amt) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_LOG_Total_Trans_Amt) THEN DO;
31312     +    _I1 = 0.26846267058842; /* impute average value */
MPRINT(EM_DIAGRAM):   _I1 = 0.26846267058842;
31313     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31314     +END;
MPRINT(EM_DIAGRAM):   END;
31315     +_I1 = 2 * ( _I1 ) / 0.99999999994221 - 1;
MPRINT(EM_DIAGRAM):   _I1 = 2 * ( _I1 ) / 0.99999999994221 - 1;
31316     +
31317     +_I2 = RANGE_SQRT_Avg_Utilization_Ratio;
MPRINT(EM_DIAGRAM):   _I2 = RANGE_SQRT_Avg_Utilization_Ratio;
31318     +IF MISSING(RANGE_SQRT_Avg_Utilization_Ratio) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Avg_Utilization_Ratio) THEN DO;
31319     +    _I2 = 0.42138171279265; /* impute average value */
MPRINT(EM_DIAGRAM):   _I2 = 0.42138171279265;
31320     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31321     +END;
MPRINT(EM_DIAGRAM):   END;
31322     +_I2 = 2 * ( _I2 ) / 0.99799598996989 - 1;
MPRINT(EM_DIAGRAM):   _I2 = 2 * ( _I2 ) / 0.99799598996989 - 1;
31323     +
31324     +_I3 = RANGE_SQRT_Total_Amt_Chng_Q4_Q1;
MPRINT(EM_DIAGRAM):   _I3 = RANGE_SQRT_Total_Amt_Chng_Q4_Q1;
31325     +IF MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1) THEN DO;
31326     +    _I3 = 0.46841281572611; /* impute average value */
MPRINT(EM_DIAGRAM):   _I3 = 0.46841281572611;
31327     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31328     +END;
MPRINT(EM_DIAGRAM):   END;
31329     +_I3 = 2 * ( _I3 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I3 = 2 * ( _I3 ) / 1 - 1;
31330     +
31331     +_I4 = RANGE_SQRT_Total_Ct_Chng_Q4_Q1;
MPRINT(EM_DIAGRAM):   _I4 = RANGE_SQRT_Total_Ct_Chng_Q4_Q1;
31332     +IF MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1) THEN DO;
31333     +    _I4 = 0.43231770050692; /* impute average value */
MPRINT(EM_DIAGRAM):   _I4 = 0.43231770050692;
31334     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31335     +END;
MPRINT(EM_DIAGRAM):   END;
31336     +_I4 = 2 * ( _I4 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I4 = 2 * ( _I4 ) / 1 - 1;
31337     +
31338     +_I5 = RANGE_Total_Revolving_Bal;
MPRINT(EM_DIAGRAM):   _I5 = RANGE_Total_Revolving_Bal;
31339     +IF MISSING(RANGE_Total_Revolving_Bal) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_Total_Revolving_Bal) THEN DO;
31340     +    _I5 = 0.46336482205213; /* impute average value */
MPRINT(EM_DIAGRAM):   _I5 = 0.46336482205213;
31341     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31342     +END;
MPRINT(EM_DIAGRAM):   END;
31343     +_I5 = 2 * ( _I5 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I5 = 2 * ( _I5 ) / 1 - 1;
31344     +
31345     +_I6_0 = 0;
MPRINT(EM_DIAGRAM):   _I6_0 = 0;
31346     +_I6_1 = 0;
MPRINT(EM_DIAGRAM):   _I6_1 = 0;
31347     +_I6_2 = 0;
MPRINT(EM_DIAGRAM):   _I6_2 = 0;
31348     +_I6_3 = 0;
MPRINT(EM_DIAGRAM):   _I6_3 = 0;
31349     +_I6_4 = 0;
MPRINT(EM_DIAGRAM):   _I6_4 = 0;
31350     +_I6_5 = 0;
MPRINT(EM_DIAGRAM):   _I6_5 = 0;
31351     +_I6_6 = 0;
MPRINT(EM_DIAGRAM):   _I6_6 = 0;
31352     +_I6_7 = 0;
MPRINT(EM_DIAGRAM):   _I6_7 = 0;
31353     +_I6_8 = 0;
MPRINT(EM_DIAGRAM):   _I6_8 = 0;
31354     +_I6_9 = 0;
MPRINT(EM_DIAGRAM):   _I6_9 = 0;
31355     +_I6_10 = 0;
MPRINT(EM_DIAGRAM):   _I6_10 = 0;
31356     +IF MISSING(G_Customer_Age) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Customer_Age) THEN DO;
31357     +    _I6_6 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I6_6 = 1;
31358     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31359     +END;
MPRINT(EM_DIAGRAM):   END;
31360     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31361     +    _UFormat = LEFT(UPCASE(PUT( G_Customer_Age, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Customer_Age, BEST. )));
31362     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31363     +        WHEN ( "0" ) _I6_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I6_0 = 1;
31364     +        WHEN ( "1" ) _I6_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I6_1 = 1;
31365     +        WHEN ( "2" ) _I6_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I6_2 = 1;
31366     +        WHEN ( "3" ) _I6_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I6_3 = 1;
31367     +        WHEN ( "4" ) _I6_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I6_4 = 1;
31368     +        WHEN ( "5" ) _I6_5 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "5" ) _I6_5 = 1;
31369     +        WHEN ( "6" ) _I6_6 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "6" ) _I6_6 = 1;
31370     +        WHEN ( "7" ) _I6_7 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "7" ) _I6_7 = 1;
31371     +        WHEN ( "8" ) _I6_8 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "8" ) _I6_8 = 1;
31372     +        WHEN ( "9" ) _I6_9 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "9" ) _I6_9 = 1;
31373     +        WHEN ( "10" ) _I6_10 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "10" ) _I6_10 = 1;
31374     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31375     +            _I6_6 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I6_6 = 1;
31376     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31377     +        END;
MPRINT(EM_DIAGRAM):   END;
31378     +    END;
MPRINT(EM_DIAGRAM):   END;
31379     +END;
MPRINT(EM_DIAGRAM):   END;
31380     +
31381     +_I7_0 = 0;
MPRINT(EM_DIAGRAM):   _I7_0 = 0;
31382     +_I7_1 = 0;
MPRINT(EM_DIAGRAM):   _I7_1 = 0;
31383     +_I7_2 = 0;
MPRINT(EM_DIAGRAM):   _I7_2 = 0;
31384     +_I7_3 = 0;
MPRINT(EM_DIAGRAM):   _I7_3 = 0;
31385     +_I7_4 = 0;
MPRINT(EM_DIAGRAM):   _I7_4 = 0;
31386     +IF MISSING(G_Months_Inactive_12_mon) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Months_Inactive_12_mon) THEN DO;
31387     +    _I7_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I7_2 = 1;
31388     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31389     +END;
MPRINT(EM_DIAGRAM):   END;
31390     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31391     +    _UFormat = LEFT(UPCASE(PUT( G_Months_Inactive_12_mon, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Months_Inactive_12_mon, BEST. )));
31392     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31393     +        WHEN ( "0" ) _I7_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I7_0 = 1;
31394     +        WHEN ( "1" ) _I7_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I7_1 = 1;
31395     +        WHEN ( "2" ) _I7_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I7_2 = 1;
31396     +        WHEN ( "3" ) _I7_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I7_3 = 1;
31397     +        WHEN ( "4" ) _I7_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I7_4 = 1;
31398     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31399     +            _I7_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I7_2 = 1;
31400     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31401     +        END;
MPRINT(EM_DIAGRAM):   END;
31402     +    END;
MPRINT(EM_DIAGRAM):   END;
31403     +END;
MPRINT(EM_DIAGRAM):   END;
31404     +
31405     +_I8_0 = 0;
MPRINT(EM_DIAGRAM):   _I8_0 = 0;
31406     +_I8_1 = 0;
MPRINT(EM_DIAGRAM):   _I8_1 = 0;
31407     +_I8_2 = 0;
MPRINT(EM_DIAGRAM):   _I8_2 = 0;
31408     +IF MISSING(G_Total_Relationship_Count) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Total_Relationship_Count) THEN DO;
31409     +    _I8_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I8_2 = 1;
31410     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31411     +END;
MPRINT(EM_DIAGRAM):   END;
31412     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31413     +    _UFormat = LEFT(UPCASE(PUT( G_Total_Relationship_Count, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Total_Relationship_Count, BEST. )));
31414     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31415     +        WHEN ( "0" ) _I8_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I8_0 = 1;
31416     +        WHEN ( "1" ) _I8_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I8_1 = 1;
31417     +        WHEN ( "2" ) _I8_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I8_2 = 1;
31418     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31419     +            _I8_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I8_2 = 1;
31420     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31421     +        END;
MPRINT(EM_DIAGRAM):   END;
31422     +    END;
MPRINT(EM_DIAGRAM):   END;
31423     +END;
MPRINT(EM_DIAGRAM):   END;
31424     +
31425     +_I9_0 = 0;
MPRINT(EM_DIAGRAM):   _I9_0 = 0;
31426     +_I9_1 = 0;
MPRINT(EM_DIAGRAM):   _I9_1 = 0;
31427     +_I9_2 = 0;
MPRINT(EM_DIAGRAM):   _I9_2 = 0;
31428     +_I9_3 = 0;
MPRINT(EM_DIAGRAM):   _I9_3 = 0;
31429     +_I9_4 = 0;
MPRINT(EM_DIAGRAM):   _I9_4 = 0;
31430     +_I9_5 = 0;
MPRINT(EM_DIAGRAM):   _I9_5 = 0;
31431     +_I9_6 = 0;
MPRINT(EM_DIAGRAM):   _I9_6 = 0;
31432     +_I9_7 = 0;
MPRINT(EM_DIAGRAM):   _I9_7 = 0;
31433     +IF MISSING(G_Total_Trans_Ct) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Total_Trans_Ct) THEN DO;
31434     +    _I9_7 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I9_7 = 1;
31435     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31436     +END;
MPRINT(EM_DIAGRAM):   END;
31437     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31438     +    _UFormat = LEFT(UPCASE(PUT( G_Total_Trans_Ct, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Total_Trans_Ct, BEST. )));
31439     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31440     +        WHEN ( "0" ) _I9_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I9_0 = 1;
31441     +        WHEN ( "1" ) _I9_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I9_1 = 1;
31442     +        WHEN ( "2" ) _I9_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I9_2 = 1;
31443     +        WHEN ( "3" ) _I9_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I9_3 = 1;
31444     +        WHEN ( "4" ) _I9_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I9_4 = 1;
31445     +        WHEN ( "5" ) _I9_5 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "5" ) _I9_5 = 1;
31446     +        WHEN ( "6" ) _I9_6 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "6" ) _I9_6 = 1;
31447     +        WHEN ( "7" ) _I9_7 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "7" ) _I9_7 = 1;
31448     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31449     +            _I9_7 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I9_7 = 1;
31450     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31451     +        END;
MPRINT(EM_DIAGRAM):   END;
31452     +    END;
MPRINT(EM_DIAGRAM):   END;
31453     +END;
MPRINT(EM_DIAGRAM):   END;
31454     +
31455     +/******************************************************************************/
31456     +/*                              Set _WARN_ Value                              */
31457     +/******************************************************************************/
31458     +IF ( _nInputMiss GT 0) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _nInputMiss GT 0) THEN DO;
31459     +    SUBSTR( _WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR( _WARN_, 1, 1) = 'M';
31460     +END;
MPRINT(EM_DIAGRAM):   END;
31461     +IF ( _nInputOutRange GT 0) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _nInputOutRange GT 0) THEN DO;
31462     +    SUBSTR( _WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   SUBSTR( _WARN_, 2, 1) = 'U';
31463     +END;
MPRINT(EM_DIAGRAM):   END;
31464     +
31465     +/******************************************************************************/
31466     +/*                   Calculate Output of Hidden Layer 1                       */
31467     +/******************************************************************************/
31468     +
31469     +_H1 = -0.0497837944031
31470     +    + 2.87868898599161 * _I1
31471     +    + 0.16063372756462 * _I2
31472     +    - 0.49030529018355 * _I3
31473     +    - 2.47244064996832 * _I4
31474     +    + 1.30637034552203 * _I5
31475     +    + 0.23528586564228 * _I6_0
31476     +    + 0.26974689764919 * _I6_1
31477     +    - 0.07349823573787 * _I6_2
31478     +    + 0.16214916198249 * _I6_3
31479     +    + 0.27012524162385 * _I6_4
31480     +    + 0.32603335250487 * _I6_5
31481     +    + 0.26181228964426 * _I6_6
31482     +    + 0.143924528524 * _I6_7
31483     +    - 0.23685564369312 * _I6_8
31484     +    - 0.82763977920721 * _I6_9
31485     +    - 0.64683461376163 * _I6_10
31486     +    + 1.08759021322259 * _I7_0
31487     +    + 0.21622342803964 * _I7_1
31488     +    - 0.13939963447866 * _I7_2
31489     +    - 0.20808641757215 * _I7_3
31490     +    - 1.00237786994091 * _I7_4
31491     +    + 0.19533521889067 * _I8_0
31492     +    + 0.04292191572239 * _I8_1
31493     +    - 0.28110758697167 * _I8_2
31494     +    + 3.4988685884969 * _I9_0
31495     +    + 0.74341623880574 * _I9_1
31496     +    + 1.05107847137329 * _I9_2
31497     +    + 0.61285138014397 * _I9_3
31498     +    + 0.32628342613665 * _I9_4
31499     +    - 0.07626093385477 * _I9_5
31500     +    + 0.38690662702643 * _I9_6
31501     +    - 6.6127243083323 * _I9_7;
MPRINT(EM_DIAGRAM):   _H1 = -0.0497837944031 + 2.87868898599161 * _I1 + 0.16063372756462 * _I2 - 0.49030529018355 * _I3 - 2.47244064996832 * _I4 + 1.30637034552203 * _I5 + 0.23528586564228 * _I6_0 + 0.26974689764919 * _I6_1 - 0.07349823573787 * _I6_2 +
0.16214916198249 * _I6_3 + 0.27012524162385 * _I6_4 + 0.32603335250487 * _I6_5 + 0.26181228964426 * _I6_6 + 0.143924528524 * _I6_7 - 0.23685564369312 * _I6_8 - 0.82763977920721 * _I6_9 - 0.64683461376163 * _I6_10 + 1.08759021322259 * _I7_0 +
0.21622342803964 * _I7_1 - 0.13939963447866 * _I7_2 - 0.20808641757215 * _I7_3 - 1.00237786994091 * _I7_4 + 0.19533521889067 * _I8_0 + 0.04292191572239 * _I8_1 - 0.28110758697167 * _I8_2 + 3.4988685884969 * _I9_0 + 0.74341623880574 * _I9_1 +
1.05107847137329 * _I9_2 + 0.61285138014397 * _I9_3 + 0.32628342613665 * _I9_4 - 0.07626093385477 * _I9_5 + 0.38690662702643 * _I9_6 - 6.6127243083323 * _I9_7;
31502     +IF ( _H1 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H1 GE 0 ) THEN DO;
31503     +    _H1 = EXP( -2 * _H1 );
MPRINT(EM_DIAGRAM):   _H1 = EXP( -2 * _H1 );
31504     +    _H1 = ( 1 - _H1 ) / ( 1 + _H1 );
MPRINT(EM_DIAGRAM):   _H1 = ( 1 - _H1 ) / ( 1 + _H1 );
31505     +END;
MPRINT(EM_DIAGRAM):   END;
31506     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31507     +    _H1 = EXP( 2 * _H1 );
MPRINT(EM_DIAGRAM):   _H1 = EXP( 2 * _H1 );
31508     +    _H1 = ( _H1 - 1 ) / ( _H1 + 1 );
MPRINT(EM_DIAGRAM):   _H1 = ( _H1 - 1 ) / ( _H1 + 1 );
31509     +END;
MPRINT(EM_DIAGRAM):   END;
31510     +
31511     +_H2 = 1.83543549081065
31512     +    + 3.7783245643669 * _I1
31513     +    - 0.45347521325884 * _I2
31514     +    - 0.57027148710928 * _I3
31515     +    - 0.8277716384752 * _I4
31516     +    - 0.08136016614353 * _I5
31517     +    + 0.06679985745167 * _I6_0
31518     +    + 0.13154981728072 * _I6_1
31519     +    + 0.43124910346702 * _I6_2
31520     +    + 0.06316906722596 * _I6_3
31521     +    + 0.32142995163961 * _I6_4
31522     +    + 0.23779352451111 * _I6_5
31523     +    - 0.12561811951488 * _I6_6
31524     +    + 0.0474319212792 * _I6_7
31525     +    + 0.24576475116744 * _I6_8
31526     +    + 0.72124212244433 * _I6_9
31527     +    - 0.30429122771585 * _I6_10
31528     +    + 0.50507601560678 * _I7_0
31529     +    + 0.32573900043651 * _I7_1
31530     +    + 0.54468433063343 * _I7_2
31531     +    + 0.24409377533973 * _I7_3
31532     +    + 0.21355245825873 * _I7_4
31533     +    + 0.67614772734632 * _I8_0
31534     +    + 0.50729669251011 * _I8_1
31535     +    + 0.68568050900919 * _I8_2
31536     +    + 1.3084545575448 * _I9_0
31537     +    + 1.13758316030701 * _I9_1
31538     +    + 0.27137451357768 * _I9_2
31539     +    + 0.75533210062631 * _I9_3
31540     +    + 1.26346468811037 * _I9_4
31541     +    + 1.66500129976712 * _I9_5
31542     +    - 2.87715842442406 * _I9_6
31543     +    - 1.66528868253522 * _I9_7;
MPRINT(EM_DIAGRAM):   _H2 = 1.83543549081065 + 3.7783245643669 * _I1 - 0.45347521325884 * _I2 - 0.57027148710928 * _I3 - 0.8277716384752 * _I4 - 0.08136016614353 * _I5 + 0.06679985745167 * _I6_0 + 0.13154981728072 * _I6_1 + 0.43124910346702 * _I6_2 +
0.06316906722596 * _I6_3 + 0.32142995163961 * _I6_4 + 0.23779352451111 * _I6_5 - 0.12561811951488 * _I6_6 + 0.0474319212792 * _I6_7 + 0.24576475116744 * _I6_8 + 0.72124212244433 * _I6_9 - 0.30429122771585 * _I6_10 + 0.50507601560678 * _I7_0 +
0.32573900043651 * _I7_1 + 0.54468433063343 * _I7_2 + 0.24409377533973 * _I7_3 + 0.21355245825873 * _I7_4 + 0.67614772734632 * _I8_0 + 0.50729669251011 * _I8_1 + 0.68568050900919 * _I8_2 + 1.3084545575448 * _I9_0 + 1.13758316030701 * _I9_1 +
0.27137451357768 * _I9_2 + 0.75533210062631 * _I9_3 + 1.26346468811037 * _I9_4 + 1.66500129976712 * _I9_5 - 2.87715842442406 * _I9_6 - 1.66528868253522 * _I9_7;
31544     +IF ( _H2 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H2 GE 0 ) THEN DO;
31545     +    _H2 = EXP( -2 * _H2 );
MPRINT(EM_DIAGRAM):   _H2 = EXP( -2 * _H2 );
31546     +    _H2 = ( 1 - _H2 ) / ( 1 + _H2 );
MPRINT(EM_DIAGRAM):   _H2 = ( 1 - _H2 ) / ( 1 + _H2 );
31547     +END;
MPRINT(EM_DIAGRAM):   END;
31548     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31549     +    _H2 = EXP( 2 * _H2 );
MPRINT(EM_DIAGRAM):   _H2 = EXP( 2 * _H2 );
31550     +    _H2 = ( _H2 - 1 ) / ( _H2 + 1 );
MPRINT(EM_DIAGRAM):   _H2 = ( _H2 - 1 ) / ( _H2 + 1 );
31551     +END;
MPRINT(EM_DIAGRAM):   END;
31552     +
31553     +_H3 = 0.69506951652756
31554     +    - 1.47209478932412 * _I1
31555     +    - 1.16265728185804 * _I2
31556     +    + 0.9090683645627 * _I3
31557     +    + 2.35147897548686 * _I4
31558     +    + 3.30074578620084 * _I5
31559     +    - 0.31150547033793 * _I6_0
31560     +    - 0.76698753202567 * _I6_1
31561     +    - 0.17091045611845 * _I6_2
31562     +    - 0.33247436404483 * _I6_3
31563     +    + 0.15940016412827 * _I6_4
31564     +    - 0.0022155408578 * _I6_5
31565     +    - 0.11779165120942 * _I6_6
31566     +    + 0.03308267873366 * _I6_7
31567     +    + 0.33366973995059 * _I6_8
31568     +    + 1.65805295451413 * _I6_9
31569     +    + 0.27855621983567 * _I6_10
31570     +    - 0.16915466717604 * _I7_0
31571     +    + 0.00751172119554 * _I7_1
31572     +    - 0.00608962150266 * _I7_2
31573     +    + 0.06275301181757 * _I7_3
31574     +    + 0.86540273655389 * _I7_4
31575     +    - 0.92875364520664 * _I8_0
31576     +    + 0.67064872147019 * _I8_1
31577     +    + 1.01455195113271 * _I8_2
31578     +    - 1.87639047377756 * _I9_0
31579     +    - 0.96649938776339 * _I9_1
31580     +    - 0.74179014574167 * _I9_2
31581     +    - 0.78646800017147 * _I9_3
31582     +    - 0.16874396104659 * _I9_4
31583     +    - 0.01961079007072 * _I9_5
31584     +    - 0.05675387508415 * _I9_6
31585     +    + 5.30553811432309 * _I9_7;
MPRINT(EM_DIAGRAM):   _H3 = 0.69506951652756 - 1.47209478932412 * _I1 - 1.16265728185804 * _I2 + 0.9090683645627 * _I3 + 2.35147897548686 * _I4 + 3.30074578620084 * _I5 - 0.31150547033793 * _I6_0 - 0.76698753202567 * _I6_1 - 0.17091045611845 * _I6_2 -
0.33247436404483 * _I6_3 + 0.15940016412827 * _I6_4 - 0.0022155408578 * _I6_5 - 0.11779165120942 * _I6_6 + 0.03308267873366 * _I6_7 + 0.33366973995059 * _I6_8 + 1.65805295451413 * _I6_9 + 0.27855621983567 * _I6_10 - 0.16915466717604 * _I7_0 +
0.00751172119554 * _I7_1 - 0.00608962150266 * _I7_2 + 0.06275301181757 * _I7_3 + 0.86540273655389 * _I7_4 - 0.92875364520664 * _I8_0 + 0.67064872147019 * _I8_1 + 1.01455195113271 * _I8_2 - 1.87639047377756 * _I9_0 - 0.96649938776339 * _I9_1 -
0.74179014574167 * _I9_2 - 0.78646800017147 * _I9_3 - 0.16874396104659 * _I9_4 - 0.01961079007072 * _I9_5 - 0.05675387508415 * _I9_6 + 5.30553811432309 * _I9_7;
31586     +IF ( _H3 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H3 GE 0 ) THEN DO;
31587     +    _H3 = EXP( -2 * _H3 );
MPRINT(EM_DIAGRAM):   _H3 = EXP( -2 * _H3 );
31588     +    _H3 = ( 1 - _H3 ) / ( 1 + _H3 );
MPRINT(EM_DIAGRAM):   _H3 = ( 1 - _H3 ) / ( 1 + _H3 );
31589     +END;
MPRINT(EM_DIAGRAM):   END;
31590     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31591     +    _H3 = EXP( 2 * _H3 );
MPRINT(EM_DIAGRAM):   _H3 = EXP( 2 * _H3 );
31592     +    _H3 = ( _H3 - 1 ) / ( _H3 + 1 );
MPRINT(EM_DIAGRAM):   _H3 = ( _H3 - 1 ) / ( _H3 + 1 );
31593     +END;
MPRINT(EM_DIAGRAM):   END;
31594     +
31595     +/******************************************************************************/
31596     +/*                   Calculate Output of Target Layer                         */
31597     +/******************************************************************************/
31598     +
31599     +_T1_0 = 0.71994596163167
31600     +    + 3.25325330121454 * _H1
31601     +    + 2.71249042677312 * _H2
31602     +    - 2.93824602585615 * _H3;
MPRINT(EM_DIAGRAM):   _T1_0 = 0.71994596163167 + 3.25325330121454 * _H1 + 2.71249042677312 * _H2 - 2.93824602585615 * _H3;
31603     +LABEL P_Attrition_Flag1 = "Predicted: Attrition_Flag=1";
MPRINT(EM_DIAGRAM):   LABEL P_Attrition_Flag1 = "Predicted: Attrition_Flag=1";
31604     +IF ABS(_T1_0) < 36 THEN
31605     +    P_Attrition_Flag1 = 1.0 / (1.0 + EXP(-_T1_0));
MPRINT(EM_DIAGRAM):   IF ABS(_T1_0) < 36 THEN P_Attrition_Flag1 = 1.0 / (1.0 + EXP(-_T1_0));
31606     +ELSE
31607     +    IF _T1_0 < 0 THEN
31608     +        P_Attrition_Flag1 = 0;
MPRINT(EM_DIAGRAM):   ELSE IF _T1_0 < 0 THEN P_Attrition_Flag1 = 0;
31609     +    ELSE
31610     +        P_Attrition_Flag1 = 1;
MPRINT(EM_DIAGRAM):   ELSE P_Attrition_Flag1 = 1;
31611     +LABEL P_Attrition_Flag0 = "Predicted: Attrition_Flag=0";
MPRINT(EM_DIAGRAM):   LABEL P_Attrition_Flag0 = "Predicted: Attrition_Flag=0";
31612     +P_Attrition_Flag0 = 1.0 - P_Attrition_Flag1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1.0 - P_Attrition_Flag1;
31613     +
31614     +/******************************************************************************/
31615     +/*                        Drop temporary variables                            */
31616     +/******************************************************************************/
31617     +DROP _UFormat _nInputMiss _nInputOutRange;
MPRINT(EM_DIAGRAM):   DROP _UFormat _nInputMiss _nInputOutRange;
31618     +DROP _I1 _I2 _I3 _I4 _I5 _I6_0 _I6_1 _I6_2 _I6_3 _I6_4;
MPRINT(EM_DIAGRAM):   DROP _I1 _I2 _I3 _I4 _I5 _I6_0 _I6_1 _I6_2 _I6_3 _I6_4;
31619     +DROP _I6_5 _I6_6 _I6_7 _I6_8 _I6_9 _I6_10 _I7_0 _I7_1 _I7_2 _I7_3;
MPRINT(EM_DIAGRAM):   DROP _I6_5 _I6_6 _I6_7 _I6_8 _I6_9 _I6_10 _I7_0 _I7_1 _I7_2 _I7_3;
31620     +DROP _I7_4 _I8_0 _I8_1 _I8_2 _I9_0 _I9_1 _I9_2 _I9_3 _I9_4 _I9_5;
MPRINT(EM_DIAGRAM):   DROP _I7_4 _I8_0 _I8_1 _I8_2 _I9_0 _I9_1 _I9_2 _I9_3 _I9_4 _I9_5;
31621     +DROP _I9_6 _I9_7;
MPRINT(EM_DIAGRAM):   DROP _I9_6 _I9_7;
31622     +DROP _H1 _H2 _H3;
MPRINT(EM_DIAGRAM):   DROP _H1 _H2 _H3;
31623     +DROP _T1_0;
MPRINT(EM_DIAGRAM):   DROP _T1_0;
31624     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31625     +*Computing Classification Vars: Attrition_Flag;
MPRINT(EM_DIAGRAM):   *Computing Classification Vars: Attrition_Flag;
31626     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31627     +length _format200 $200;
MPRINT(EM_DIAGRAM):   length _format200 $200;
31628     +drop _format200;
MPRINT(EM_DIAGRAM):   drop _format200;
31629     +_format200= ' ' ;
MPRINT(EM_DIAGRAM):   _format200= ' ' ;
31630     +length _p_ 8;
MPRINT(EM_DIAGRAM):   length _p_ 8;
31631     +_p_= 0 ;
MPRINT(EM_DIAGRAM):   _p_= 0 ;
31632     +drop _p_ ;
MPRINT(EM_DIAGRAM):   drop _p_ ;
31633     +if P_Attrition_Flag1 - _p_ > 1e-8 then do ;
MPRINT(EM_DIAGRAM):   if P_Attrition_Flag1 - _p_ > 1e-8 then do ;
31634     +   _p_= P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   _p_= P_Attrition_Flag1 ;
31635     +   _format200='1';
MPRINT(EM_DIAGRAM):   _format200='1';
31636     +end;
MPRINT(EM_DIAGRAM):   end;
31637     +if P_Attrition_Flag0 - _p_ > 1e-8 then do ;
MPRINT(EM_DIAGRAM):   if P_Attrition_Flag0 - _p_ > 1e-8 then do ;
31638     +   _p_= P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   _p_= P_Attrition_Flag0 ;
31639     +   _format200='0';
MPRINT(EM_DIAGRAM):   _format200='0';
31640     +end;
MPRINT(EM_DIAGRAM):   end;
31641     +I_Attrition_Flag=dmnorm(_format200,32); ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag=dmnorm(_format200,32);
MPRINT(EM_DIAGRAM):   ;
31642     +if I_Attrition_Flag='1' then
31643     +U_Attrition_Flag='1';
MPRINT(EM_DIAGRAM):   if I_Attrition_Flag='1' then U_Attrition_Flag='1';
31644     +if I_Attrition_Flag='0' then
31645     +U_Attrition_Flag='0';
MPRINT(EM_DIAGRAM):   if I_Attrition_Flag='0' then U_Attrition_Flag='0';
31646     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31647     +*Computing Residual Vars: Attrition_Flag;
MPRINT(EM_DIAGRAM):   *Computing Residual Vars: Attrition_Flag;
31648     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31649     +Length R_Attrition_Flag1 8;
MPRINT(EM_DIAGRAM):   Length R_Attrition_Flag1 8;
31650     +Label R_Attrition_Flag1='Residual: Attrition_Flag=1';
MPRINT(EM_DIAGRAM):   Label R_Attrition_Flag1= 'Residual: Attrition_Flag=1';
31651     +Length R_Attrition_Flag0 8;
MPRINT(EM_DIAGRAM):   Length R_Attrition_Flag0 8;
31652     +Label R_Attrition_Flag0='Residual: Attrition_Flag=0';
MPRINT(EM_DIAGRAM):   Label R_Attrition_Flag0= 'Residual: Attrition_Flag=0';
31653     +if
31654     + F_Attrition_Flag ne '1'
31655     +and F_Attrition_Flag ne '0'
31656     + then do;
MPRINT(EM_DIAGRAM):   if F_Attrition_Flag ne '1' and F_Attrition_Flag ne '0' then do;
31657     +R_Attrition_Flag1=.;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1=.;
31658     +R_Attrition_Flag0=.;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0=.;
31659     +end;
MPRINT(EM_DIAGRAM):   end;
31660     +else do;
MPRINT(EM_DIAGRAM):   else do;
31661     +R_Attrition_Flag1= - P_Attrition_Flag1;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1= - P_Attrition_Flag1;
31662     +R_Attrition_Flag0= - P_Attrition_Flag0;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0= - P_Attrition_Flag0;
31663     +select(F_Attrition_Flag);
MPRINT(EM_DIAGRAM):   select(F_Attrition_Flag);
31664     +when('1')R_Attrition_Flag1= R_Attrition_Flag1+1;
MPRINT(EM_DIAGRAM):   when('1')R_Attrition_Flag1= R_Attrition_Flag1+1;
31665     +when('0')R_Attrition_Flag0= R_Attrition_Flag0+1;
MPRINT(EM_DIAGRAM):   when('0')R_Attrition_Flag0= R_Attrition_Flag0+1;
31666     +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
31667     +end;
MPRINT(EM_DIAGRAM):   end;
31668     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
31669      run;
 
NOTE: DATA STEP view saved on file EMWS1.HPNNA_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP2_VALIDATE.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.23 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
31670      quit;
31671      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
31672      filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * HPNNA: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31673      *------------------------------------------------------------*;
31674      * HPNNA: Scoring TEST data;
31675      *------------------------------------------------------------*;
31676      data EMWS1.HPNNA_TEST
31677      / view=EMWS1.HPNNA_TEST
31678      ;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_TEST / view=EMWS1.HPNNA_TEST ;
31679      set EMWS1.MdlComp2_TEST
31680      ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp2_TEST ;
31681      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMFLOWSCORE.sas.
31682     +LENGTH _UFormat $ 32;
MPRINT(EM_DIAGRAM):   LENGTH _UFormat $ 32;
31683     +_UFormat = ' ';
MPRINT(EM_DIAGRAM):   _UFormat = ' ';
31684     +LENGTH _WARN_ $4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4;
31685     +LABEL _WARN_ = 'Warnings';
MPRINT(EM_DIAGRAM):   LABEL _WARN_ = 'Warnings';
31686     +_WARN_ = '    ';
MPRINT(EM_DIAGRAM):   _WARN_ = '    ';
31687     +_nInputMiss = 0;
MPRINT(EM_DIAGRAM):   _nInputMiss = 0;
31688     +_nInputOutRange = 0;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 0;
31689     +
31690     +/******************************************************************************/
31691     +/*                    Calculate Standardized Inputs                           */
31692     +/******************************************************************************/
31693     +
31694     +_I1 = RANGE_LOG_Total_Trans_Amt;
MPRINT(EM_DIAGRAM):   _I1 = RANGE_LOG_Total_Trans_Amt;
31695     +IF MISSING(RANGE_LOG_Total_Trans_Amt) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_LOG_Total_Trans_Amt) THEN DO;
31696     +    _I1 = 0.26846267058842; /* impute average value */
MPRINT(EM_DIAGRAM):   _I1 = 0.26846267058842;
31697     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31698     +END;
MPRINT(EM_DIAGRAM):   END;
31699     +_I1 = 2 * ( _I1 ) / 0.99999999994221 - 1;
MPRINT(EM_DIAGRAM):   _I1 = 2 * ( _I1 ) / 0.99999999994221 - 1;
31700     +
31701     +_I2 = RANGE_SQRT_Avg_Utilization_Ratio;
MPRINT(EM_DIAGRAM):   _I2 = RANGE_SQRT_Avg_Utilization_Ratio;
31702     +IF MISSING(RANGE_SQRT_Avg_Utilization_Ratio) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Avg_Utilization_Ratio) THEN DO;
31703     +    _I2 = 0.42138171279265; /* impute average value */
MPRINT(EM_DIAGRAM):   _I2 = 0.42138171279265;
31704     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31705     +END;
MPRINT(EM_DIAGRAM):   END;
31706     +_I2 = 2 * ( _I2 ) / 0.99799598996989 - 1;
MPRINT(EM_DIAGRAM):   _I2 = 2 * ( _I2 ) / 0.99799598996989 - 1;
31707     +
31708     +_I3 = RANGE_SQRT_Total_Amt_Chng_Q4_Q1;
MPRINT(EM_DIAGRAM):   _I3 = RANGE_SQRT_Total_Amt_Chng_Q4_Q1;
31709     +IF MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1) THEN DO;
31710     +    _I3 = 0.46841281572611; /* impute average value */
MPRINT(EM_DIAGRAM):   _I3 = 0.46841281572611;
31711     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31712     +END;
MPRINT(EM_DIAGRAM):   END;
31713     +_I3 = 2 * ( _I3 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I3 = 2 * ( _I3 ) / 1 - 1;
31714     +
31715     +_I4 = RANGE_SQRT_Total_Ct_Chng_Q4_Q1;
MPRINT(EM_DIAGRAM):   _I4 = RANGE_SQRT_Total_Ct_Chng_Q4_Q1;
31716     +IF MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1) THEN DO;
31717     +    _I4 = 0.43231770050692; /* impute average value */
MPRINT(EM_DIAGRAM):   _I4 = 0.43231770050692;
31718     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31719     +END;
MPRINT(EM_DIAGRAM):   END;
31720     +_I4 = 2 * ( _I4 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I4 = 2 * ( _I4 ) / 1 - 1;
31721     +
31722     +_I5 = RANGE_Total_Revolving_Bal;
MPRINT(EM_DIAGRAM):   _I5 = RANGE_Total_Revolving_Bal;
31723     +IF MISSING(RANGE_Total_Revolving_Bal) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(RANGE_Total_Revolving_Bal) THEN DO;
31724     +    _I5 = 0.46336482205213; /* impute average value */
MPRINT(EM_DIAGRAM):   _I5 = 0.46336482205213;
31725     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31726     +END;
MPRINT(EM_DIAGRAM):   END;
31727     +_I5 = 2 * ( _I5 ) / 1 - 1;
MPRINT(EM_DIAGRAM):   _I5 = 2 * ( _I5 ) / 1 - 1;
31728     +
31729     +_I6_0 = 0;
MPRINT(EM_DIAGRAM):   _I6_0 = 0;
31730     +_I6_1 = 0;
MPRINT(EM_DIAGRAM):   _I6_1 = 0;
31731     +_I6_2 = 0;
MPRINT(EM_DIAGRAM):   _I6_2 = 0;
31732     +_I6_3 = 0;
MPRINT(EM_DIAGRAM):   _I6_3 = 0;
31733     +_I6_4 = 0;
MPRINT(EM_DIAGRAM):   _I6_4 = 0;
31734     +_I6_5 = 0;
MPRINT(EM_DIAGRAM):   _I6_5 = 0;
31735     +_I6_6 = 0;
MPRINT(EM_DIAGRAM):   _I6_6 = 0;
31736     +_I6_7 = 0;
MPRINT(EM_DIAGRAM):   _I6_7 = 0;
31737     +_I6_8 = 0;
MPRINT(EM_DIAGRAM):   _I6_8 = 0;
31738     +_I6_9 = 0;
MPRINT(EM_DIAGRAM):   _I6_9 = 0;
31739     +_I6_10 = 0;
MPRINT(EM_DIAGRAM):   _I6_10 = 0;
31740     +IF MISSING(G_Customer_Age) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Customer_Age) THEN DO;
31741     +    _I6_6 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I6_6 = 1;
31742     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31743     +END;
MPRINT(EM_DIAGRAM):   END;
31744     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31745     +    _UFormat = LEFT(UPCASE(PUT( G_Customer_Age, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Customer_Age, BEST. )));
31746     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31747     +        WHEN ( "0" ) _I6_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I6_0 = 1;
31748     +        WHEN ( "1" ) _I6_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I6_1 = 1;
31749     +        WHEN ( "2" ) _I6_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I6_2 = 1;
31750     +        WHEN ( "3" ) _I6_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I6_3 = 1;
31751     +        WHEN ( "4" ) _I6_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I6_4 = 1;
31752     +        WHEN ( "5" ) _I6_5 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "5" ) _I6_5 = 1;
31753     +        WHEN ( "6" ) _I6_6 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "6" ) _I6_6 = 1;
31754     +        WHEN ( "7" ) _I6_7 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "7" ) _I6_7 = 1;
31755     +        WHEN ( "8" ) _I6_8 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "8" ) _I6_8 = 1;
31756     +        WHEN ( "9" ) _I6_9 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "9" ) _I6_9 = 1;
31757     +        WHEN ( "10" ) _I6_10 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "10" ) _I6_10 = 1;
31758     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31759     +            _I6_6 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I6_6 = 1;
31760     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31761     +        END;
MPRINT(EM_DIAGRAM):   END;
31762     +    END;
MPRINT(EM_DIAGRAM):   END;
31763     +END;
MPRINT(EM_DIAGRAM):   END;
31764     +
31765     +_I7_0 = 0;
MPRINT(EM_DIAGRAM):   _I7_0 = 0;
31766     +_I7_1 = 0;
MPRINT(EM_DIAGRAM):   _I7_1 = 0;
31767     +_I7_2 = 0;
MPRINT(EM_DIAGRAM):   _I7_2 = 0;
31768     +_I7_3 = 0;
MPRINT(EM_DIAGRAM):   _I7_3 = 0;
31769     +_I7_4 = 0;
MPRINT(EM_DIAGRAM):   _I7_4 = 0;
31770     +IF MISSING(G_Months_Inactive_12_mon) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Months_Inactive_12_mon) THEN DO;
31771     +    _I7_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I7_2 = 1;
31772     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31773     +END;
MPRINT(EM_DIAGRAM):   END;
31774     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31775     +    _UFormat = LEFT(UPCASE(PUT( G_Months_Inactive_12_mon, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Months_Inactive_12_mon, BEST. )));
31776     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31777     +        WHEN ( "0" ) _I7_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I7_0 = 1;
31778     +        WHEN ( "1" ) _I7_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I7_1 = 1;
31779     +        WHEN ( "2" ) _I7_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I7_2 = 1;
31780     +        WHEN ( "3" ) _I7_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I7_3 = 1;
31781     +        WHEN ( "4" ) _I7_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I7_4 = 1;
31782     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31783     +            _I7_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I7_2 = 1;
31784     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31785     +        END;
MPRINT(EM_DIAGRAM):   END;
31786     +    END;
MPRINT(EM_DIAGRAM):   END;
31787     +END;
MPRINT(EM_DIAGRAM):   END;
31788     +
31789     +_I8_0 = 0;
MPRINT(EM_DIAGRAM):   _I8_0 = 0;
31790     +_I8_1 = 0;
MPRINT(EM_DIAGRAM):   _I8_1 = 0;
31791     +_I8_2 = 0;
MPRINT(EM_DIAGRAM):   _I8_2 = 0;
31792     +IF MISSING(G_Total_Relationship_Count) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Total_Relationship_Count) THEN DO;
31793     +    _I8_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I8_2 = 1;
31794     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31795     +END;
MPRINT(EM_DIAGRAM):   END;
31796     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31797     +    _UFormat = LEFT(UPCASE(PUT( G_Total_Relationship_Count, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Total_Relationship_Count, BEST. )));
31798     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31799     +        WHEN ( "0" ) _I8_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I8_0 = 1;
31800     +        WHEN ( "1" ) _I8_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I8_1 = 1;
31801     +        WHEN ( "2" ) _I8_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I8_2 = 1;
31802     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31803     +            _I8_2 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I8_2 = 1;
31804     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31805     +        END;
MPRINT(EM_DIAGRAM):   END;
31806     +    END;
MPRINT(EM_DIAGRAM):   END;
31807     +END;
MPRINT(EM_DIAGRAM):   END;
31808     +
31809     +_I9_0 = 0;
MPRINT(EM_DIAGRAM):   _I9_0 = 0;
31810     +_I9_1 = 0;
MPRINT(EM_DIAGRAM):   _I9_1 = 0;
31811     +_I9_2 = 0;
MPRINT(EM_DIAGRAM):   _I9_2 = 0;
31812     +_I9_3 = 0;
MPRINT(EM_DIAGRAM):   _I9_3 = 0;
31813     +_I9_4 = 0;
MPRINT(EM_DIAGRAM):   _I9_4 = 0;
31814     +_I9_5 = 0;
MPRINT(EM_DIAGRAM):   _I9_5 = 0;
31815     +_I9_6 = 0;
MPRINT(EM_DIAGRAM):   _I9_6 = 0;
31816     +_I9_7 = 0;
MPRINT(EM_DIAGRAM):   _I9_7 = 0;
31817     +IF MISSING(G_Total_Trans_Ct) THEN DO;
MPRINT(EM_DIAGRAM):   IF MISSING(G_Total_Trans_Ct) THEN DO;
31818     +    _I9_7 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I9_7 = 1;
31819     +    _nInputMiss = 1;
MPRINT(EM_DIAGRAM):   _nInputMiss = 1;
31820     +END;
MPRINT(EM_DIAGRAM):   END;
31821     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31822     +    _UFormat = LEFT(UPCASE(PUT( G_Total_Trans_Ct, BEST. )));
MPRINT(EM_DIAGRAM):   _UFormat = LEFT(UPCASE(PUT( G_Total_Trans_Ct, BEST. )));
31823     +    SELECT ( _UFormat );
MPRINT(EM_DIAGRAM):   SELECT ( _UFormat );
31824     +        WHEN ( "0" ) _I9_0 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "0" ) _I9_0 = 1;
31825     +        WHEN ( "1" ) _I9_1 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "1" ) _I9_1 = 1;
31826     +        WHEN ( "2" ) _I9_2 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "2" ) _I9_2 = 1;
31827     +        WHEN ( "3" ) _I9_3 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "3" ) _I9_3 = 1;
31828     +        WHEN ( "4" ) _I9_4 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "4" ) _I9_4 = 1;
31829     +        WHEN ( "5" ) _I9_5 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "5" ) _I9_5 = 1;
31830     +        WHEN ( "6" ) _I9_6 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "6" ) _I9_6 = 1;
31831     +        WHEN ( "7" ) _I9_7 = 1;
MPRINT(EM_DIAGRAM):   WHEN ( "7" ) _I9_7 = 1;
31832     +        OTHERWISE DO;
MPRINT(EM_DIAGRAM):   OTHERWISE DO;
31833     +            _I9_7 = 1; /* impute most frequent level */
MPRINT(EM_DIAGRAM):   _I9_7 = 1;
31834     +            _nInputOutRange = 1;
MPRINT(EM_DIAGRAM):   _nInputOutRange = 1;
31835     +        END;
MPRINT(EM_DIAGRAM):   END;
31836     +    END;
MPRINT(EM_DIAGRAM):   END;
31837     +END;
MPRINT(EM_DIAGRAM):   END;
31838     +
31839     +/******************************************************************************/
31840     +/*                              Set _WARN_ Value                              */
31841     +/******************************************************************************/
31842     +IF ( _nInputMiss GT 0) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _nInputMiss GT 0) THEN DO;
31843     +    SUBSTR( _WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR( _WARN_, 1, 1) = 'M';
31844     +END;
MPRINT(EM_DIAGRAM):   END;
31845     +IF ( _nInputOutRange GT 0) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _nInputOutRange GT 0) THEN DO;
31846     +    SUBSTR( _WARN_, 2, 1) = 'U';
MPRINT(EM_DIAGRAM):   SUBSTR( _WARN_, 2, 1) = 'U';
31847     +END;
MPRINT(EM_DIAGRAM):   END;
31848     +
31849     +/******************************************************************************/
31850     +/*                   Calculate Output of Hidden Layer 1                       */
31851     +/******************************************************************************/
31852     +
31853     +_H1 = -0.0497837944031
31854     +    + 2.87868898599161 * _I1
31855     +    + 0.16063372756462 * _I2
31856     +    - 0.49030529018355 * _I3
31857     +    - 2.47244064996832 * _I4
31858     +    + 1.30637034552203 * _I5
31859     +    + 0.23528586564228 * _I6_0
31860     +    + 0.26974689764919 * _I6_1
31861     +    - 0.07349823573787 * _I6_2
31862     +    + 0.16214916198249 * _I6_3
31863     +    + 0.27012524162385 * _I6_4
31864     +    + 0.32603335250487 * _I6_5
31865     +    + 0.26181228964426 * _I6_6
31866     +    + 0.143924528524 * _I6_7
31867     +    - 0.23685564369312 * _I6_8
31868     +    - 0.82763977920721 * _I6_9
31869     +    - 0.64683461376163 * _I6_10
31870     +    + 1.08759021322259 * _I7_0
31871     +    + 0.21622342803964 * _I7_1
31872     +    - 0.13939963447866 * _I7_2
31873     +    - 0.20808641757215 * _I7_3
31874     +    - 1.00237786994091 * _I7_4
31875     +    + 0.19533521889067 * _I8_0
31876     +    + 0.04292191572239 * _I8_1
31877     +    - 0.28110758697167 * _I8_2
31878     +    + 3.4988685884969 * _I9_0
31879     +    + 0.74341623880574 * _I9_1
31880     +    + 1.05107847137329 * _I9_2
31881     +    + 0.61285138014397 * _I9_3
31882     +    + 0.32628342613665 * _I9_4
31883     +    - 0.07626093385477 * _I9_5
31884     +    + 0.38690662702643 * _I9_6
31885     +    - 6.6127243083323 * _I9_7;
MPRINT(EM_DIAGRAM):   _H1 = -0.0497837944031 + 2.87868898599161 * _I1 + 0.16063372756462 * _I2 - 0.49030529018355 * _I3 - 2.47244064996832 * _I4 + 1.30637034552203 * _I5 + 0.23528586564228 * _I6_0 + 0.26974689764919 * _I6_1 - 0.07349823573787 * _I6_2 +
0.16214916198249 * _I6_3 + 0.27012524162385 * _I6_4 + 0.32603335250487 * _I6_5 + 0.26181228964426 * _I6_6 + 0.143924528524 * _I6_7 - 0.23685564369312 * _I6_8 - 0.82763977920721 * _I6_9 - 0.64683461376163 * _I6_10 + 1.08759021322259 * _I7_0 +
0.21622342803964 * _I7_1 - 0.13939963447866 * _I7_2 - 0.20808641757215 * _I7_3 - 1.00237786994091 * _I7_4 + 0.19533521889067 * _I8_0 + 0.04292191572239 * _I8_1 - 0.28110758697167 * _I8_2 + 3.4988685884969 * _I9_0 + 0.74341623880574 * _I9_1 +
1.05107847137329 * _I9_2 + 0.61285138014397 * _I9_3 + 0.32628342613665 * _I9_4 - 0.07626093385477 * _I9_5 + 0.38690662702643 * _I9_6 - 6.6127243083323 * _I9_7;
31886     +IF ( _H1 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H1 GE 0 ) THEN DO;
31887     +    _H1 = EXP( -2 * _H1 );
MPRINT(EM_DIAGRAM):   _H1 = EXP( -2 * _H1 );
31888     +    _H1 = ( 1 - _H1 ) / ( 1 + _H1 );
MPRINT(EM_DIAGRAM):   _H1 = ( 1 - _H1 ) / ( 1 + _H1 );
31889     +END;
MPRINT(EM_DIAGRAM):   END;
31890     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31891     +    _H1 = EXP( 2 * _H1 );
MPRINT(EM_DIAGRAM):   _H1 = EXP( 2 * _H1 );
31892     +    _H1 = ( _H1 - 1 ) / ( _H1 + 1 );
MPRINT(EM_DIAGRAM):   _H1 = ( _H1 - 1 ) / ( _H1 + 1 );
31893     +END;
MPRINT(EM_DIAGRAM):   END;
31894     +
31895     +_H2 = 1.83543549081065
31896     +    + 3.7783245643669 * _I1
31897     +    - 0.45347521325884 * _I2
31898     +    - 0.57027148710928 * _I3
31899     +    - 0.8277716384752 * _I4
31900     +    - 0.08136016614353 * _I5
31901     +    + 0.06679985745167 * _I6_0
31902     +    + 0.13154981728072 * _I6_1
31903     +    + 0.43124910346702 * _I6_2
31904     +    + 0.06316906722596 * _I6_3
31905     +    + 0.32142995163961 * _I6_4
31906     +    + 0.23779352451111 * _I6_5
31907     +    - 0.12561811951488 * _I6_6
31908     +    + 0.0474319212792 * _I6_7
31909     +    + 0.24576475116744 * _I6_8
31910     +    + 0.72124212244433 * _I6_9
31911     +    - 0.30429122771585 * _I6_10
31912     +    + 0.50507601560678 * _I7_0
31913     +    + 0.32573900043651 * _I7_1
31914     +    + 0.54468433063343 * _I7_2
31915     +    + 0.24409377533973 * _I7_3
31916     +    + 0.21355245825873 * _I7_4
31917     +    + 0.67614772734632 * _I8_0
31918     +    + 0.50729669251011 * _I8_1
31919     +    + 0.68568050900919 * _I8_2
31920     +    + 1.3084545575448 * _I9_0
31921     +    + 1.13758316030701 * _I9_1
31922     +    + 0.27137451357768 * _I9_2
31923     +    + 0.75533210062631 * _I9_3
31924     +    + 1.26346468811037 * _I9_4
31925     +    + 1.66500129976712 * _I9_5
31926     +    - 2.87715842442406 * _I9_6
31927     +    - 1.66528868253522 * _I9_7;
MPRINT(EM_DIAGRAM):   _H2 = 1.83543549081065 + 3.7783245643669 * _I1 - 0.45347521325884 * _I2 - 0.57027148710928 * _I3 - 0.8277716384752 * _I4 - 0.08136016614353 * _I5 + 0.06679985745167 * _I6_0 + 0.13154981728072 * _I6_1 + 0.43124910346702 * _I6_2 +
0.06316906722596 * _I6_3 + 0.32142995163961 * _I6_4 + 0.23779352451111 * _I6_5 - 0.12561811951488 * _I6_6 + 0.0474319212792 * _I6_7 + 0.24576475116744 * _I6_8 + 0.72124212244433 * _I6_9 - 0.30429122771585 * _I6_10 + 0.50507601560678 * _I7_0 +
0.32573900043651 * _I7_1 + 0.54468433063343 * _I7_2 + 0.24409377533973 * _I7_3 + 0.21355245825873 * _I7_4 + 0.67614772734632 * _I8_0 + 0.50729669251011 * _I8_1 + 0.68568050900919 * _I8_2 + 1.3084545575448 * _I9_0 + 1.13758316030701 * _I9_1 +
0.27137451357768 * _I9_2 + 0.75533210062631 * _I9_3 + 1.26346468811037 * _I9_4 + 1.66500129976712 * _I9_5 - 2.87715842442406 * _I9_6 - 1.66528868253522 * _I9_7;
31928     +IF ( _H2 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H2 GE 0 ) THEN DO;
31929     +    _H2 = EXP( -2 * _H2 );
MPRINT(EM_DIAGRAM):   _H2 = EXP( -2 * _H2 );
31930     +    _H2 = ( 1 - _H2 ) / ( 1 + _H2 );
MPRINT(EM_DIAGRAM):   _H2 = ( 1 - _H2 ) / ( 1 + _H2 );
31931     +END;
MPRINT(EM_DIAGRAM):   END;
31932     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31933     +    _H2 = EXP( 2 * _H2 );
MPRINT(EM_DIAGRAM):   _H2 = EXP( 2 * _H2 );
31934     +    _H2 = ( _H2 - 1 ) / ( _H2 + 1 );
MPRINT(EM_DIAGRAM):   _H2 = ( _H2 - 1 ) / ( _H2 + 1 );
31935     +END;
MPRINT(EM_DIAGRAM):   END;
31936     +
31937     +_H3 = 0.69506951652756
31938     +    - 1.47209478932412 * _I1
31939     +    - 1.16265728185804 * _I2
31940     +    + 0.9090683645627 * _I3
31941     +    + 2.35147897548686 * _I4
31942     +    + 3.30074578620084 * _I5
31943     +    - 0.31150547033793 * _I6_0
31944     +    - 0.76698753202567 * _I6_1
31945     +    - 0.17091045611845 * _I6_2
31946     +    - 0.33247436404483 * _I6_3
31947     +    + 0.15940016412827 * _I6_4
31948     +    - 0.0022155408578 * _I6_5
31949     +    - 0.11779165120942 * _I6_6
31950     +    + 0.03308267873366 * _I6_7
31951     +    + 0.33366973995059 * _I6_8
31952     +    + 1.65805295451413 * _I6_9
31953     +    + 0.27855621983567 * _I6_10
31954     +    - 0.16915466717604 * _I7_0
31955     +    + 0.00751172119554 * _I7_1
31956     +    - 0.00608962150266 * _I7_2
31957     +    + 0.06275301181757 * _I7_3
31958     +    + 0.86540273655389 * _I7_4
31959     +    - 0.92875364520664 * _I8_0
31960     +    + 0.67064872147019 * _I8_1
31961     +    + 1.01455195113271 * _I8_2
31962     +    - 1.87639047377756 * _I9_0
31963     +    - 0.96649938776339 * _I9_1
31964     +    - 0.74179014574167 * _I9_2
31965     +    - 0.78646800017147 * _I9_3
31966     +    - 0.16874396104659 * _I9_4
31967     +    - 0.01961079007072 * _I9_5
31968     +    - 0.05675387508415 * _I9_6
31969     +    + 5.30553811432309 * _I9_7;
MPRINT(EM_DIAGRAM):   _H3 = 0.69506951652756 - 1.47209478932412 * _I1 - 1.16265728185804 * _I2 + 0.9090683645627 * _I3 + 2.35147897548686 * _I4 + 3.30074578620084 * _I5 - 0.31150547033793 * _I6_0 - 0.76698753202567 * _I6_1 - 0.17091045611845 * _I6_2 -
0.33247436404483 * _I6_3 + 0.15940016412827 * _I6_4 - 0.0022155408578 * _I6_5 - 0.11779165120942 * _I6_6 + 0.03308267873366 * _I6_7 + 0.33366973995059 * _I6_8 + 1.65805295451413 * _I6_9 + 0.27855621983567 * _I6_10 - 0.16915466717604 * _I7_0 +
0.00751172119554 * _I7_1 - 0.00608962150266 * _I7_2 + 0.06275301181757 * _I7_3 + 0.86540273655389 * _I7_4 - 0.92875364520664 * _I8_0 + 0.67064872147019 * _I8_1 + 1.01455195113271 * _I8_2 - 1.87639047377756 * _I9_0 - 0.96649938776339 * _I9_1 -
0.74179014574167 * _I9_2 - 0.78646800017147 * _I9_3 - 0.16874396104659 * _I9_4 - 0.01961079007072 * _I9_5 - 0.05675387508415 * _I9_6 + 5.30553811432309 * _I9_7;
31970     +IF ( _H3 GE 0 ) THEN DO;
MPRINT(EM_DIAGRAM):   IF ( _H3 GE 0 ) THEN DO;
31971     +    _H3 = EXP( -2 * _H3 );
MPRINT(EM_DIAGRAM):   _H3 = EXP( -2 * _H3 );
31972     +    _H3 = ( 1 - _H3 ) / ( 1 + _H3 );
MPRINT(EM_DIAGRAM):   _H3 = ( 1 - _H3 ) / ( 1 + _H3 );
31973     +END;
MPRINT(EM_DIAGRAM):   END;
31974     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
31975     +    _H3 = EXP( 2 * _H3 );
MPRINT(EM_DIAGRAM):   _H3 = EXP( 2 * _H3 );
31976     +    _H3 = ( _H3 - 1 ) / ( _H3 + 1 );
MPRINT(EM_DIAGRAM):   _H3 = ( _H3 - 1 ) / ( _H3 + 1 );
31977     +END;
MPRINT(EM_DIAGRAM):   END;
31978     +
31979     +/******************************************************************************/
31980     +/*                   Calculate Output of Target Layer                         */
31981     +/******************************************************************************/
31982     +
31983     +_T1_0 = 0.71994596163167
31984     +    + 3.25325330121454 * _H1
31985     +    + 2.71249042677312 * _H2
31986     +    - 2.93824602585615 * _H3;
MPRINT(EM_DIAGRAM):   _T1_0 = 0.71994596163167 + 3.25325330121454 * _H1 + 2.71249042677312 * _H2 - 2.93824602585615 * _H3;
31987     +LABEL P_Attrition_Flag1 = "Predicted: Attrition_Flag=1";
MPRINT(EM_DIAGRAM):   LABEL P_Attrition_Flag1 = "Predicted: Attrition_Flag=1";
31988     +IF ABS(_T1_0) < 36 THEN
31989     +    P_Attrition_Flag1 = 1.0 / (1.0 + EXP(-_T1_0));
MPRINT(EM_DIAGRAM):   IF ABS(_T1_0) < 36 THEN P_Attrition_Flag1 = 1.0 / (1.0 + EXP(-_T1_0));
31990     +ELSE
31991     +    IF _T1_0 < 0 THEN
31992     +        P_Attrition_Flag1 = 0;
MPRINT(EM_DIAGRAM):   ELSE IF _T1_0 < 0 THEN P_Attrition_Flag1 = 0;
31993     +    ELSE
31994     +        P_Attrition_Flag1 = 1;
MPRINT(EM_DIAGRAM):   ELSE P_Attrition_Flag1 = 1;
31995     +LABEL P_Attrition_Flag0 = "Predicted: Attrition_Flag=0";
MPRINT(EM_DIAGRAM):   LABEL P_Attrition_Flag0 = "Predicted: Attrition_Flag=0";
31996     +P_Attrition_Flag0 = 1.0 - P_Attrition_Flag1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1.0 - P_Attrition_Flag1;
31997     +
31998     +/******************************************************************************/
31999     +/*                        Drop temporary variables                            */
32000     +/******************************************************************************/
32001     +DROP _UFormat _nInputMiss _nInputOutRange;
MPRINT(EM_DIAGRAM):   DROP _UFormat _nInputMiss _nInputOutRange;
32002     +DROP _I1 _I2 _I3 _I4 _I5 _I6_0 _I6_1 _I6_2 _I6_3 _I6_4;
MPRINT(EM_DIAGRAM):   DROP _I1 _I2 _I3 _I4 _I5 _I6_0 _I6_1 _I6_2 _I6_3 _I6_4;
32003     +DROP _I6_5 _I6_6 _I6_7 _I6_8 _I6_9 _I6_10 _I7_0 _I7_1 _I7_2 _I7_3;
MPRINT(EM_DIAGRAM):   DROP _I6_5 _I6_6 _I6_7 _I6_8 _I6_9 _I6_10 _I7_0 _I7_1 _I7_2 _I7_3;
32004     +DROP _I7_4 _I8_0 _I8_1 _I8_2 _I9_0 _I9_1 _I9_2 _I9_3 _I9_4 _I9_5;
MPRINT(EM_DIAGRAM):   DROP _I7_4 _I8_0 _I8_1 _I8_2 _I9_0 _I9_1 _I9_2 _I9_3 _I9_4 _I9_5;
32005     +DROP _I9_6 _I9_7;
MPRINT(EM_DIAGRAM):   DROP _I9_6 _I9_7;
32006     +DROP _H1 _H2 _H3;
MPRINT(EM_DIAGRAM):   DROP _H1 _H2 _H3;
32007     +DROP _T1_0;
MPRINT(EM_DIAGRAM):   DROP _T1_0;
32008     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32009     +*Computing Classification Vars: Attrition_Flag;
MPRINT(EM_DIAGRAM):   *Computing Classification Vars: Attrition_Flag;
32010     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32011     +length _format200 $200;
MPRINT(EM_DIAGRAM):   length _format200 $200;
32012     +drop _format200;
MPRINT(EM_DIAGRAM):   drop _format200;
32013     +_format200= ' ' ;
MPRINT(EM_DIAGRAM):   _format200= ' ' ;
32014     +length _p_ 8;
MPRINT(EM_DIAGRAM):   length _p_ 8;
32015     +_p_= 0 ;
MPRINT(EM_DIAGRAM):   _p_= 0 ;
32016     +drop _p_ ;
MPRINT(EM_DIAGRAM):   drop _p_ ;
32017     +if P_Attrition_Flag1 - _p_ > 1e-8 then do ;
MPRINT(EM_DIAGRAM):   if P_Attrition_Flag1 - _p_ > 1e-8 then do ;
32018     +   _p_= P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   _p_= P_Attrition_Flag1 ;
32019     +   _format200='1';
MPRINT(EM_DIAGRAM):   _format200='1';
32020     +end;
MPRINT(EM_DIAGRAM):   end;
32021     +if P_Attrition_Flag0 - _p_ > 1e-8 then do ;
MPRINT(EM_DIAGRAM):   if P_Attrition_Flag0 - _p_ > 1e-8 then do ;
32022     +   _p_= P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   _p_= P_Attrition_Flag0 ;
32023     +   _format200='0';
MPRINT(EM_DIAGRAM):   _format200='0';
32024     +end;
MPRINT(EM_DIAGRAM):   end;
32025     +I_Attrition_Flag=dmnorm(_format200,32); ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag=dmnorm(_format200,32);
MPRINT(EM_DIAGRAM):   ;
32026     +if I_Attrition_Flag='1' then
32027     +U_Attrition_Flag='1';
MPRINT(EM_DIAGRAM):   if I_Attrition_Flag='1' then U_Attrition_Flag='1';
32028     +if I_Attrition_Flag='0' then
32029     +U_Attrition_Flag='0';
MPRINT(EM_DIAGRAM):   if I_Attrition_Flag='0' then U_Attrition_Flag='0';
32030     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32031     +*Computing Residual Vars: Attrition_Flag;
MPRINT(EM_DIAGRAM):   *Computing Residual Vars: Attrition_Flag;
32032     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32033     +Length R_Attrition_Flag1 8;
MPRINT(EM_DIAGRAM):   Length R_Attrition_Flag1 8;
32034     +Label R_Attrition_Flag1='Residual: Attrition_Flag=1';
MPRINT(EM_DIAGRAM):   Label R_Attrition_Flag1= 'Residual: Attrition_Flag=1';
32035     +Length R_Attrition_Flag0 8;
MPRINT(EM_DIAGRAM):   Length R_Attrition_Flag0 8;
32036     +Label R_Attrition_Flag0='Residual: Attrition_Flag=0';
MPRINT(EM_DIAGRAM):   Label R_Attrition_Flag0= 'Residual: Attrition_Flag=0';
32037     +if
32038     + F_Attrition_Flag ne '1'
32039     +and F_Attrition_Flag ne '0'
32040     + then do;
MPRINT(EM_DIAGRAM):   if F_Attrition_Flag ne '1' and F_Attrition_Flag ne '0' then do;
32041     +R_Attrition_Flag1=.;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1=.;
32042     +R_Attrition_Flag0=.;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0=.;
32043     +end;
MPRINT(EM_DIAGRAM):   end;
32044     +else do;
MPRINT(EM_DIAGRAM):   else do;
32045     +R_Attrition_Flag1= - P_Attrition_Flag1;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1= - P_Attrition_Flag1;
32046     +R_Attrition_Flag0= - P_Attrition_Flag0;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0= - P_Attrition_Flag0;
32047     +select(F_Attrition_Flag);
MPRINT(EM_DIAGRAM):   select(F_Attrition_Flag);
32048     +when('1')R_Attrition_Flag1= R_Attrition_Flag1+1;
MPRINT(EM_DIAGRAM):   when('1')R_Attrition_Flag1= R_Attrition_Flag1+1;
32049     +when('0')R_Attrition_Flag0= R_Attrition_Flag0+1;
MPRINT(EM_DIAGRAM):   when('0')R_Attrition_Flag0= R_Attrition_Flag0+1;
32050     +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
32051     +end;
MPRINT(EM_DIAGRAM):   end;
32052     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
32053      run;
 
NOTE: DATA STEP view saved on file EMWS1.HPNNA_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP2_TEST.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.20 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
32054      quit;
32055      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS1.HPNNA_TRAIN.VIEW used (Total process time):
      real time           0.31 seconds
      cpu time            0.32 seconds
 
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS1.HPNNA_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error" _DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong
Classifications" _DISF_= "Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train: Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ _RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_Attrition_Flag1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_Attrition_Flag1)*(R_Attrition_Flag1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_Attrition_Flag1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_Attrition_Flag0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_Attrition_Flag0)*(R_Attrition_Flag0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_Attrition_Flag0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if trim(F_Attrition_Flag) ^in("", ".") then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_Attrition_Flag ne I_Attrition_Flag);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "Attrition_Flag";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS1.HPNNA_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error" _DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong
Classifications" _DISF_= "Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid: Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ _RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_Attrition_Flag1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_Attrition_Flag1)*(R_Attrition_Flag1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_Attrition_Flag1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_Attrition_Flag0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_Attrition_Flag0)*(R_Attrition_Flag0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_Attrition_Flag0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if trim(F_Attrition_Flag) ^in("", ".") then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_Attrition_Flag ne I_Attrition_Flag);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "Attrition_Flag";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   merge WORK.OUTFITDATA _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTestFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS1.HPNNA_TEST end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Test: Target Variable" _NOBS_= "Test: Sum of Frequencies" _SSE_= "Test: Sum of Squared Errors" _MAX_= "Test: Maximum Absolute Error" _DIV_ = "Test: Divisor for ASE" _WRONG_= "Test: Number of Wrong
Classifications" _DISF_= "Test: Frequency of Classified Cases" _MISC_= "Test: Misclassification Rate" _ASE_ = "Test: Average Squared Error" _RASE_ = "Test: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_ _RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_Attrition_Flag1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_Attrition_Flag1)*(R_Attrition_Flag1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_Attrition_Flag1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_Attrition_Flag0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_Attrition_Flag0)*(R_Attrition_Flag0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_Attrition_Flag0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if trim(F_Attrition_Flag) ^in("", ".") then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_Attrition_Flag ne I_Attrition_Flag);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "Attrition_Flag";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP = TARGET);
MPRINT(EM_DIAGRAM):   set _tmpTestFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_TASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_TDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_TMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_TNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_TRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_TSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_TDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_TMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_TWRONG_;
MPRINT(EM_DIAGRAM):   data WORK.OUTFITDATA;
MPRINT(EM_DIAGRAM):   merge WORK.OUTFITDATA _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
32152      proc append base=EMWS1.HPNNA_EMOUTFIT data=WORK.OUTFITDATA force;
MPRINT(EM_DIAGRAM):    proc append base=EMWS1.HPNNA_EMOUTFIT data=WORK.OUTFITDATA force;
32153      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Appending WORK.OUTFITDATA to EMWS1.HPNNA_EMOUTFIT.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK.OUTFITDATA.
NOTE: The data set EMWS1.HPNNA_EMOUTFIT has 1 observations and 28 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
32154      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32155      * HPNNA: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * HPNNA: Computing metadata for TRAIN data;
32156      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.HPNNA_TRAIN.VIEW used (Total process time):
      real time           0.30 seconds
      cpu time            0.29 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.HPNNA_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.HPNNA_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.HPNNA_TRAIN out=WORK.M3KF2UKV noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KF2UKV;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KF2UKV(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KF2UKV;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KF2UKV;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0XSW9XQ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XSW9XQ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XSW9XQ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3DD5D62(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XSW9XQ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XSW9XQ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XSW9XQ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0XSW9XQ;
MPRINT(EMADVISECOLUMNS):   set WORK.M0XSW9XQ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.MdlComp2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "HPNNA";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_ATTRITION_FLAG1") creator = "HPNNA";
MPRINT(EM_DIAGRAM):   when("R_ATTRITION_FLAG1") creator = "HPNNA";
MPRINT(EM_DIAGRAM):   when("P_ATTRITION_FLAG0") creator = "HPNNA";
MPRINT(EM_DIAGRAM):   when("R_ATTRITION_FLAG0") creator = "HPNNA";
MPRINT(EM_DIAGRAM):   when("F_ATTRITION_FLAG") creator = "HPNNA";
MPRINT(EM_DIAGRAM):   when("I_ATTRITION_FLAG") creator = "HPNNA";
MPRINT(EM_DIAGRAM):   when("U_ATTRITION_FLAG") creator = "HPNNA";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "HPNNA";
MPRINT(EM_DIAGRAM):   when("ATTRITION_FLAG") model = "HPNNA";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * HPNNA: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
32509      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
32510      set EMWS1.HPNNA_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMINFO;
32511      where DATA='HPNNA' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='HPNNA' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
32512      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.HPNNA_EMINFO.
      WHERE (DATA='HPNNA') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32513      data EMWS1.HPNNA_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.HPNNA_EMINFO;
32514      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
32515      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
32516      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.HPNNA_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
32520      run;
32521      data EMWS1.HPNNA_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_EMINFO;
32522      set EMWS1.HPNNA_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMINFO WORK.MODELTEMP_INFO;
32523      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.HPNNA_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.HPNNA_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
32524      proc sort data = EMWS1.HPNNA_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.HPNNA_EMINFO NOTHREADS;
32525      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
32526      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.HPNNA_EMINFO.
NOTE: The data set EMWS1.HPNNA_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32527      proc sort data = EMWS1.Tree4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree4_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
32528      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
32529      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32530      proc sort data = EMWS1.HPNNA_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.HPNNA_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
32531      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
32532      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.HPNNA_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32533      data EMWS1.HPNNA_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_EMINFO;
32534      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
32535      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
32536      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.HPNNA_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
32537      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
32538      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
32539      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
32540      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.HPNNA_TRAIN.VIEW used (Total process time):
      real time           0.30 seconds
      cpu time            0.29 seconds
 
NOTE: View EMWS1.HPNNA_VALIDATE.VIEW used (Total process time):
      real time           0.33 seconds
      cpu time            0.36 seconds
 
NOTE: View EMWS1.HPNNA_TEST.VIEW used (Total process time):
      real time           0.30 seconds
      cpu time            0.29 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:40:38" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 09, 2022
Time:                15:40:38
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2L7GP49 "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\HPNNA\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2L7GP49 new;
MPRINT(EM_DIAGRAM):   run;
32564      data EMWS1.HPNNA_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.HPNNA_EMOUTFIT;
32565      set EMWS1.HPNNA_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMOUTFIT;
32566      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
32567      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
32568      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.HPNNA_EMOUTFIT.
NOTE: The data set EMWS1.HPNNA_EMOUTFIT has 1 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
32569      proc sort data=EMWS1.HPNNA_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.HPNNA_EMREPORTFIT nothreads;
32570      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
32571      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.HPNNA_EMREPORTFIT.
NOTE: The data set EMWS1.HPNNA_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
32572      %let _EMwarndup = 0;
32573      %let _EMtargetdup =;
32574      %let _EMASEtargetdup =;
32575      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
32576      set EMWS1.HPNNA_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMOUTFIT;
32577      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
32578      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
32579      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
32580      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
32581      end;
MPRINT(EM_DIAGRAM):   end;
32582      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.HPNNA_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32583      %let EMEXCEPTIONSTRING=;
32584      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32585      * REPORT: HPNNA;
MPRINT(EM_DIAGRAM):   * REPORT: HPNNA;
32586      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32587      %let EM_ACTION = REPORT;
32588      %let syscc = 0;
32589      %macro main;
32590
32591         %if %upcase(&EM_ACTION) = CREATE %then %do;
32592             filename temp catalog 'sashelp.hpdm.hpdmneural_create.source';
32593             %include temp;
32594             filename temp;
32595             %hpdm_Neural_create;
32596         %end;
32597         %else
32598         %if %upcase(&EM_ACTION) = TRAIN %then %do;
32599             filename temp catalog 'sashelp.hpdm.hpdmneural_train.source';
32600             %include temp;
32601             filename temp;
32602             %hpdm_Neural_train;
32603         %end;
32604         %else
32605         %if %upcase(&EM_ACTION) = REPORT %then %do;
32606             filename temp catalog 'sashelp.hpdm.hpdmneural_report.source';
32607             %include temp;
32608             filename temp;
32609             %hpdm_Neural_report;
32610         %end;
32611         %else
32612            %if %upcase(&EM_ACTION) = OPENTABLE  %then %do;
32613                 filename temp catalog 'sashelp.hpdm.hpdmneural_actions.source';
32614                 %include temp;
32615                 filename temp;
32616                 %hpdm_Neural_OpenTable;
32617         %end;
32618         %else
32619         %if %upcase(&EM_ACTION) = CLOSETABLE  %then %do;
32620                filename temp catalog 'sashelp.hpdm.hpdmneural_actions.source';
32621                 %include temp;
32622                 filename temp;
32623                 %hpdm_Neural_CloseTable ;
32624         %end;
32625
32626      %mend main;
32627
32628      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.hpdm.hpdmneural_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.HPDM.HPDMNEURAL_REPORT.SOURCE.
32629     +%macro hpdm_createConstellationData;
32631     +data &EM_USER_NODES;
32632     +   length Text $200 Var $200 X Y 8;
32633     +   set &EM_USER_WEIGHTDS;
32634     +   Text=TO; Var=TO; output;
32635     +   Text=FROM; Var=FROM; output;
32637     +   Keep Text Var X Y VarName;
32638     +run;
32640     +proc sort data=&EM_USER_NODES nodupkey;
32641     +  by Var;
32642     +run;
32644     +/* add targetCount and type for Target variable */
32645     +data _null_;
32646     +  set &EM_USER_WEIGHTDS(where=(type="TARGET")) end=eof;
32647     +  if _n_=1 then do;
32648     +    call execute("data &EM_USER_NODES;");
32649     +    call execute("  set &EM_USER_NODES end=_eof;");
32650     +    call execute("  retain targetCount 0;");
32651     +  end;
32652     +  newVar = tranwrd(newVar,"'","''");
32653     +  call execute("if strip(Text)= '"||strip(newVar) ||"' then do;");
32654     +  /* need to redefine targetcount since only 1 node for binary target included */
32655     +  call execute("  targetCount=targetCount+1;");
32656     +  call execute("  type='"||strip(type)||"';");
32657     +  call execute("end;");
32658     +  call execute("if _eof then call symput('targetCount',strip(targetCount));");
32659     +  if eof then do;
32660     +    call execute("run;");
32661     +  end;
32662     +run;
32664     +%if "&EM_PROPERTY_ARCHITECTURE" ne "USERDEFINED" %then %do;
32665     +   %if %index(&EM_PROPERTY_ARCHITECTURE,2) and &EM_PROPERTY_HIDDEN=1 %then %let nhiddenn=2;
32666     +   %else %let nhiddenn = &EM_PROPERTY_HIDDEN;
32667     +%end;
32669     +%if "&EM_PROPERTY_ARCHITECTURE" eq "LOGISTIC" %then %let nLayers = 0;
32670     +%else %if "&EM_PROPERTY_ARCHITECTURE" eq "USERDEFINED" %then %do;
32671     +   %let nLayers = &EM_PROPERTY_HIDDENLAYERS;
32672     +   %let hds=0;
32673     +   %EM_GETNAME(key=HIDDENOPTIONS, type=DATA);
32675     +   /* get neurons per layer */
32676     +   %do h=1 %to &nLayers;
32677     +      %if &h=1 %then %do;
32678     +         %let hlobs=0;
32679     +         %if "&EM_USER_HIDDENOPTIONS" ne "" %then %do;
32680     +            %if %sysfunc(exist(&EM_USER_HIDDENOPTIONS)) %then %do;
32681     +               %let hds=%sysfunc(open(&EM_USER_HIDDENOPTIONS));
32682     +               %let hlobs=%sysfunc(attrn(&hds,nobs));
32683     +               %let neuronnum = %sysfunc(VARNUM(&hds, NEURONS));
32684     +            %end;
32685     +         %end;
32686     +      %end;
32687     +      %if &hlobs ge &h %then %do;
32688     +         %let obs = %sysfunc(fetchobs(&hds,&h));
32689     +         %let neurons&h = %sysfunc(getvarn(&hds, &neuronnum));
32690     +      %end;
32691     +      /* not a row in HIDDENOPTIONS table for this layer, use default */
32692     +      %else %let neurons&h = 3;
32693     +   %end;
32694     +   %if &hds %then %let hds = %sysfunc(close(&hds));
32695     +%end;
32696     +%else %if (("&EM_PROPERTY_ARCHITECTURE" eq "LAYER1") OR ("&EM_PROPERTY_ARCHITECTURE" eq "LAYER1SKIP")) %then %do;
32697     +   %let nLayers = 1;
32698     +   %let neurons1 = &nhiddenn;
32699     +%end;
32700     +%else %do;
32701     +   /* two-layer architecture (not user-defined) */
32702     +   %let nLayers = 2;
32703     +   %let neurons1 = %sysevalf(&nhiddenn / 2, ceil);
32704     +   %let neurons2 = %sysevalf(&nhiddenn / 2, floor);
32705     +%end;
32707     +/* retrieve maximum y values based on _N_ to be used during plotting */
32708     +%let largestY = ;
32709     +%let dsid = %sysfunc(open(&EM_USER_NODES(where=(type ne "TARGET" and lengthn(varname) and lengthn(var)))));
32710     +%if &dsid %then %do;
32711     +  %let largestY= %sysfunc(attrn(&dsid,  NLOBSF));
32712     +%end;
32713     +%if &dsid ne %then %let dsid=%sysfunc(close(&dsid));
32715     +%let ynum = 350; /*%sysevalf(15 * (&largestY_all + 1));*/
32717     +proc sort data=&EM_USER_WEIGHTDS nodupkey out=tempsorted; by FROM ; run;
32719     +data &EM_USER_NODES;
32720     +   merge &EM_USER_NODES(where=(Var ne "BIAS")) tempsorted(rename=(FROM=VAR) keep=FROM TYPE LAYER);
32721     +   by VAR;
32722     +   retain inputcount 0;
32724     +   label x="%sysfunc(sasmsg(sashelp.dmine,rpt_varclus_label_x, NOQUOTE))"
32725     +         y="%sysfunc(sasmsg(sashelp.dmine,rpt_varclus_label_y, NOQUOTE))"
32726     +         from="%sysfunc(sasmsg(sashelp.dmine,rpt_from_vlabel, NOQUOTE))"
32727     +         layer="%sysfunc(sasmsg(sashelp.dmine,rpt_hplayer_vlabel, NOQUOTE))"
32728     +         text="%sysfunc(sasmsg(sashelp.dmine,rpt_hptext_vlabel, NOQUOTE))"
32729     +         var="%sysfunc(sasmsg(sashelp.dmine,rpt_hpvariable_vlabel, NOQUOTE))"
32730     +         targetCount="%sysfunc(sasmsg(sashelp.dmine,rpt_targetCount_vlabel, NOQUOTE))"
32731     +         type="%sysfunc(sasmsg(sashelp.dmine,meta_type_vlabel, NOQUOTE))"
32732     +   ;
32733     +   if missing(TEXT) then delete;
32734     +   if upcase(var)="BIAS" then delete;
32735     +   %if &nLayers %then %do;
32736     +      if type="HIDDEN" then do;
32737     +         %if &nLayers=1 %then %do;
32738     +           X=200;
32739     +           hiddenybw = &ynum / (&neurons1 + 1);
32740     +           %do j=1 %to &neurons1;
32741     +              %if &j=1 %then %do;
32742     +                if var="H1" then Y=hiddenybw;
32743     +              %end;
32744     +              %else %do;
32745     +                else if var="H&j" then Y= hiddenybw * &j;
32746     +              %end;
32747     +           %end;
32748     +         %end;
32749     +         %else %do;
32750     +           /* equally space X-coord for hidden layers between 0 for inputs and 400 for targets */
32751     +           hiddenxbw = 400 / (&nlayers+1);
32752     +           x= hiddenxbw * layer;
32753     +            %let numsofar = 0;
32754     +            %do i=1 %to &nLayers;
32755     +               %if &i=1 %then %do;
32756     +                  if layer=1 then do;
32757     +               %end;
32758     +               %else %do;
32759     +                  else if layer=&i then do;
32760     +               %end;
32761     +               hiddenybw = &ynum / (&&neurons&i + 1);
32762     +               %do j=1 %to &&neurons&i;
32763     +                  %let h=%sysevalf(&numsofar + &j);
32764     +                  %if &j=1 %then %do;
32765     +                     if var="H&h" then do;
32766     +                  %end;
32767     +                  %else %do;
32768     +                     else if var="H&h" then do;
32769     +                  %end;
32770     +                      Y= hiddenybw * &j;
32771     +                   end;
32772     +               %end;
32773     +               end;
32774     +               %let numsofar = %sysevalf(&numsofar + &&neurons&i);
32775     +            %end;
32777     +         %end;
32778     +      end;
32779     +      else
32780     +   %end;
32781     +   if type="INPUT" then do;
32782     +      inputybw = &ynum / (&largestY + 1);
32783     +      X=0;
32784     +      inputcount + 1;
32785     +      Y=inputybw * inputcount;
32786     +   end;
32787     +   else do;
32788     +      targetybw = &ynum / (&targetcount + 1);
32789     +      X=400;
32790     +      Y = targetybw * targetCount;
32791     +   end;
32793     +   drop VarName inputcount inputybw targetybw %if &nLayers > 1 %then hiddenxbw; %if &nLayers %then hiddenybw; ;
32794     +run;
32796     +%mend hpdm_createConstellationData;
32798     +%Macro hpdm_Neural_report;
32800     +   /* create plotting table for WEIGHT plot */
32801     +   %EM_GETNAME(KEY=OUTMODEL, TYPE=DATA);
32802     +   %EM_GETNAME(KEY=WEIGHTDS, TYPE=DATA);
32804     +   %em_checkmacro(name=EM_PROPERTY_MAXLINKS, value=1000, global=Y);
32806     +   data tempsorted;
32807     +     set &EM_USER_OUTMODEL;
32808     +     length newVar $200;
32809     +     if ^missing(VarName) then do;
32810     +       if ^missing(LevelName) then
32811     +         newVar = strip(VARNAME)||'='||strip(LEVELNAME);
32812     +       else
32813     +         newVar = strip(VARNAME);
32814     +     end;
32815     +     else do;
32816     +       newVar = NeuronId;
32817     +     end;
32818     +   run;
32819     +   proc sort data=tempsorted; by newVar; run;
32820     +   proc transpose data=tempsorted(drop=LEVEL MIN MAX AVG STDEV stdtype actfunc errfunc mostfrequentlevel) out=&EM_USER_WEIGHTDS name=To;
32821     +     by newVar;
32822     +   run;
32824     +   data &EM_USER_WEIGHTDS;
32825     +     merge &EM_USER_WEIGHTDS(where=(col1 ne . and upcase(TO) ^= "LAYER")) tempsorted(keep=NeuronId newVar VarName LevelName Layer );
32826     +     length FROM $200 type $8 linkid 8;
32827     +     by newVar;
32829     +     rename COL1  = WEIGHT;
32830     +     linkid=_N_;
32831     +     type="INPUT";
32832     +     FROM = newVar;
32834     +     /* create Text for From variable based on name and Level */
32835     +     if ^missing(VARNAME) then do;
32836     +       if ^missing(LEVELNAME) then do;
32837     +         if col1 eq . then do;
32838     +          FROM = "";
32839     +         end;
32840     +       end;
32841     +     end;
32842     +     else if NeuronId ^= "Bias" then do;
32843     +        type="HIDDEN";
32844     +     end;
32846     +     TO = substr(TO, 11);
32848     +     label TO = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))"
32849     +           FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))"
32850     +           type = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
32851     +           LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, NOQUOTE))"
32852     +           COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel, NOQUOTE))"
32853     +           NEWVAR = "%sysfunc(sasmsg(sashelp.dmine,meta_newname_vlabel, NOQUOTE))"
32854     +           NEURONID =  "%sysfunc(sasmsg(sashelp.dmine,rp_hpneuronid_vlabel, NOQUOTE))"
32855     +           VARNAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_hpvariable_vlabel, NOQUOTE))"
32856     +           LEVELNAME="%sysfunc(sasmsg(sashelp.dmine,rpt_level_vlabel, NOQUOTE))"
32857     +           LAYER="%sysfunc(sasmsg(sashelp.dmine,rpt_hplayer_vlabel, NOQUOTE))"
32858     +           TARGETCOUNT="%sysfunc(sasmsg(sashelp.dmine,rpt_targetCount_vlabel, NOQUOTE))"
32859     +           _LABEL_="%sysfunc(sasmsg(sashelp.dmine,rpt_hpg_nameavp, NOQUOTE))"
32860     +           ;
32861     +     if NeuronID = "Version" then delete;
32862     +     if NeuronId = "Bias" then delete;
32863     +     absWeight = abs(col1);
32864     +   run;
32866     +   /* assign Target Variables a role of Target */
32867     +   data _null_;
32868     +     set &EM_DATA_VARIABLESET(where=(ROLE="TARGET" and USE in ('Y', 'D'))) end=eof;
32869     +     if _n_=1 then do;
32870     +       call execute("data &EM_USER_WEIGHTDS;");
32871     +       call execute("  set &EM_USER_WEIGHTDS;");
32872     +     end;
32873     +     call execute("if strip(VarName)= '"||strip(NAME) ||"' then TYPE='TARGET';");
32874     +   run;
32876     +   /* map TO variables with values of target and add targetCount column*/
32877     +   %let targetCount = 1;
32878     +   data _null_;
32879     +     set &EM_USER_WEIGHTDS(where=(type="TARGET")) end=eof;
32880     +     if _n_=1 then do;
32881     +       call execute("data &EM_USER_WEIGHTDS;");
32882     +       call execute("  length to $200;");
32883     +       call execute("  set &EM_USER_WEIGHTDS;");
32884     +     end;
32885     +     newVar = tranwrd(newVar,"'","''");
32886     +     call execute("if strip(TO)= '"||strip(NEURONID) ||"' then TO='"||strip(newVar)||"';");
32887     +     call execute("if strip(NEURONID)= '"||strip(NEURONID) ||"' then do;");
32888     +     call execute("  targetCount="||strip(_n_)||";");
32889     +     call execute("end;");
32890     +     if eof then do;
32891     +       call execute("  call symput('targetCount',"||strip(_n_)||");");
32892     +       call execute(' label targetCount="%sysfunc(sasmsg(sashelp.dmine,rpt_targetCount_vlabel, NOQUOTE))";');
32893     +       call execute("run;");
32894     +     end;
32895     +   run;
32897     +   proc sort data=&EM_USER_WEIGHTDS;
32898     +      by descending absweight;
32899     +   run;
32901     +   /* Want to keep Target and Hidden links first, then Input links with highest abs weight */
32902     +   data &EM_USER_WEIGHTDS;
32903     +      set &EM_USER_WEIGHTDS(where=(type in ("HIDDEN","TARGET")) in=_kp)
32904     +          &EM_USER_WEIGHTDS(where=(type not in ("HIDDEN","TARGET")));
32905     +      if _n_ le &EM_PROPERTY_MAXLINKS or _kp;
32906     +      drop absweight;
32907     +   run;
32909     +   proc datasets library=work nolist;
32910     +    delete tempsorted ;
32911     +   run;
32912     +   quit;
32914     +   /* create Constellation plot */
32915     +   %EM_GETNAME(key=NODES, type=DATA);
32917     +   %hpdm_createConstellationData;
32918     +   %em_report(viewtype=Constellation, linkkey=WEIGHTDS, nodekey=NODES, linkfrom=FROM, linkto=TO, linkid=linkid, linkvalue=WEIGHT, nodeid=var, nodetip=text, x=x, y=y, description=Constellation, block=MODEL, autodisplay=Y);
32920     +   /* create HeatMap of weights */
32921     +   %em_report(key=WEIGHTDS, where=%nrbquote(TO^="."),viewtype=HISTOGRAM, X=TO, Y=FROM, FREQ=WEIGHT, description=HPWEIGHTS, block=MODEL, autodisplay=Y);
32923     +   /* train and iteration history tables/plots */
32924     +   %EM_GETNAME(key=TRAINHIST, type=DATA);
32925     +   %EM_REPORT(key=TRAINHIST, viewtype=DATA, block=MODEL, description=TRAINHIST, autodisplay=N);
32927     +   %EM_GETNAME(key=ITERHIST, type=DATA);
32929     +   %global _iter_;
32930     +   data _null_;
32931     +     set &EM_USER_ITERHIST(where=(Best="Y"));
32932     +     call symput('_iter_', put(iterationNum, 6.));
32933     +   run;
32935     +   %if &EM_PROPERTY_USEVALID eq N and (("&EM_IMPORT_VALIDATE" eq "") or (%sysfunc(exist(&EM_IMPORT_VALIDATE))=0 and %sysfunc(exist(&EM_IMPORT_VALIDATE, VIEW))=0)) and "&HPDM_PARTITIONVAR" eq "" %then %do;
32936     +     data &EM_USER_ITERHIST;
32937     +       set &EM_USER_ITERHIST;
32938     +       drop ValidationError;
32939     +     run;
32940     +     %EM_REPORT(key=ITERHIST, viewtype=LINEPLOT, x=IterationNum, y1=TrainingError, xref=&_iter_, description=ITERPLOT, block=MODEL, autodisplay=Y);
32941     +   %end;
32942     +   %else %do;
32943     +     %EM_REPORT(key=ITERHIST, viewtype=LINEPLOT, x=IterationNum, y1=TrainingError, y2=ValidationError, xref=&_iter_, description=ITERPLOT, block=MODEL, autodisplay=Y);
32944     +   %end;
32946     +%Mend hpdm_Neural_report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(HPDM_NEURAL_REPORT):   data tempsorted;
MPRINT(HPDM_NEURAL_REPORT):   set EMWS1.HPNNA_OUTMODEL;
MPRINT(HPDM_NEURAL_REPORT):   length newVar $200;
MPRINT(HPDM_NEURAL_REPORT):   if ^missing(VarName) then do;
MPRINT(HPDM_NEURAL_REPORT):   if ^missing(LevelName) then newVar = strip(VARNAME)||'='||strip(LEVELNAME);
MPRINT(HPDM_NEURAL_REPORT):   else newVar = strip(VARNAME);
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   else do;
MPRINT(HPDM_NEURAL_REPORT):   newVar = NeuronId;
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: There were 39 observations read from the data set EMWS1.HPNNA_OUTMODEL.
NOTE: The data set WORK.TEMPSORTED has 39 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):   proc sort data=tempsorted;
MPRINT(HPDM_NEURAL_REPORT):   by newVar;
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: There were 39 observations read from the data set WORK.TEMPSORTED.
NOTE: The data set WORK.TEMPSORTED has 39 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):   proc transpose data=tempsorted(drop=LEVEL MIN MAX AVG STDEV stdtype actfunc errfunc mostfrequentlevel) out=EMWS1.HPNNA_WEIGHTDS name=To;
MPRINT(HPDM_NEURAL_REPORT):   by newVar;
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: There were 39 observations read from the data set WORK.TEMPSORTED.
NOTE: The data set EMWS1.HPNNA_WEIGHTDS has 234 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):   data EMWS1.HPNNA_WEIGHTDS;
MPRINT(HPDM_NEURAL_REPORT):   merge EMWS1.HPNNA_WEIGHTDS(where=(col1 ne . and upcase(TO) ^= "LAYER")) tempsorted(keep=NeuronId newVar VarName LevelName Layer );
MPRINT(HPDM_NEURAL_REPORT):   length FROM $200 type $8 linkid 8;
MPRINT(HPDM_NEURAL_REPORT):   by newVar;
MPRINT(HPDM_NEURAL_REPORT):   rename COL1 = WEIGHT;
MPRINT(HPDM_NEURAL_REPORT):   linkid=_N_;
MPRINT(HPDM_NEURAL_REPORT):   type="INPUT";
MPRINT(HPDM_NEURAL_REPORT):   FROM = newVar;
MPRINT(HPDM_NEURAL_REPORT):   if ^missing(VARNAME) then do;
MPRINT(HPDM_NEURAL_REPORT):   if ^missing(LEVELNAME) then do;
MPRINT(HPDM_NEURAL_REPORT):   if col1 eq . then do;
MPRINT(HPDM_NEURAL_REPORT):   FROM = "";
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   else if NeuronId ^= "Bias" then do;
MPRINT(HPDM_NEURAL_REPORT):   type="HIDDEN";
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   TO = substr(TO, 11);
MPRINT(HPDM_NEURAL_REPORT):   label TO = "Into" FROM = "From" type = "Type" LINKID = "Link ID" COL1 = "Weight" NEWVAR = "New Variable Name" NEURONID = "Neuron ID" VARNAME = "Variable" LEVELNAME= "Level" LAYER= "Layer" TARGETCOUNT= "Target Count" _LABEL_=
"Name of Former Variable" ;
MPRINT(HPDM_NEURAL_REPORT):   if NeuronID = "Version" then delete;
MPRINT(HPDM_NEURAL_REPORT):   if NeuronId = "Bias" then delete;
MPRINT(HPDM_NEURAL_REPORT):   absWeight = abs(col1);
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: Variable TARGETCOUNT is uninitialized.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      2 at 164:110
NOTE: There were 103 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
      WHERE (col1 not = .) and (UPCASE(TO) not = 'LAYER');
NOTE: There were 39 observations read from the data set WORK.TEMPSORTED.
NOTE: The data set EMWS1.HPNNA_WEIGHTDS has 101 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):   data _null_;
MPRINT(HPDM_NEURAL_REPORT):   set EMWS1.HPNNA_VariableSet(where=(ROLE="TARGET" and USE in ('Y', 'D'))) end=eof;
MPRINT(HPDM_NEURAL_REPORT):   if _n_=1 then do;
MPRINT(HPDM_NEURAL_REPORT):   call execute("data EMWS1.HPNNA_WEIGHTDS;");
MPRINT(HPDM_NEURAL_REPORT):   call execute("  set EMWS1.HPNNA_WEIGHTDS;");
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   call execute("if strip(VarName)= '"||strip(NAME) ||"' then TYPE='TARGET';");
MPRINT(HPDM_NEURAL_REPORT):   run;
 
MPRINT(HPDM_NEURAL_REPORT):   data EMWS1.HPNNA_WEIGHTDS;
MPRINT(HPDM_NEURAL_REPORT):   set EMWS1.HPNNA_WEIGHTDS;
MPRINT(HPDM_NEURAL_REPORT):   if strip(VarName)= 'Attrition_Flag' then TYPE='TARGET';
NOTE: There were 1 observations read from the data set EMWS1.HPNNA_VARIABLESET.
      WHERE (ROLE='TARGET') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         + data EMWS1.HPNNA_WEIGHTDS;
2         +   set EMWS1.HPNNA_WEIGHTDS;
3         + if strip(VarName)= 'Attrition_Flag' then TYPE='TARGET';
 
NOTE: There were 101 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
NOTE: The data set EMWS1.HPNNA_WEIGHTDS has 101 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):   data _null_;
MPRINT(HPDM_NEURAL_REPORT):   set EMWS1.HPNNA_WEIGHTDS(where=(type="TARGET")) end=eof;
MPRINT(HPDM_NEURAL_REPORT):   if _n_=1 then do;
MPRINT(HPDM_NEURAL_REPORT):   call execute("data EMWS1.HPNNA_WEIGHTDS;");
MPRINT(HPDM_NEURAL_REPORT):   call execute("  length to $200;");
MPRINT(HPDM_NEURAL_REPORT):   call execute("  set EMWS1.HPNNA_WEIGHTDS;");
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   newVar = tranwrd(newVar,"'","''");
MPRINT(HPDM_NEURAL_REPORT):   call execute("if strip(TO)= '"||strip(NEURONID) ||"' then TO='"||strip(newVar)||"';");
MPRINT(HPDM_NEURAL_REPORT):   call execute("if strip(NEURONID)= '"||strip(NEURONID) ||"' then do;");
MPRINT(HPDM_NEURAL_REPORT):   call execute("  targetCount="||strip(_n_)||";");
MPRINT(HPDM_NEURAL_REPORT):   call execute("end;");
MPRINT(HPDM_NEURAL_REPORT):   if eof then do;
MPRINT(HPDM_NEURAL_REPORT):   call execute("  call symput('targetCount',"||strip(_n_)||");");
MPRINT(HPDM_NEURAL_REPORT):   call execute(' label targetCount="%sysfunc(sasmsg(sashelp.dmine,rpt_targetCount_vlabel, NOQUOTE))";');
MPRINT(HPDM_NEURAL_REPORT):   call execute("run;");
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      222:98    229:169
MPRINT(HPDM_NEURAL_REPORT):   data EMWS1.HPNNA_WEIGHTDS;
MPRINT(HPDM_NEURAL_REPORT):   length to $200;
MPRINT(HPDM_NEURAL_REPORT):   set EMWS1.HPNNA_WEIGHTDS;
MPRINT(HPDM_NEURAL_REPORT):   if strip(TO)= 'T1_1' then TO='Attrition_Flag=0';
MPRINT(HPDM_NEURAL_REPORT):   if strip(NEURONID)= 'T1_1' then do;
MPRINT(HPDM_NEURAL_REPORT):   targetCount=1;
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   if strip(TO)= 'T1_0' then TO='Attrition_Flag=1';
MPRINT(HPDM_NEURAL_REPORT):   if strip(NEURONID)= 'T1_0' then do;
MPRINT(HPDM_NEURAL_REPORT):   targetCount=2;
MPRINT(HPDM_NEURAL_REPORT):   end;
MPRINT(HPDM_NEURAL_REPORT):   call symput('targetCount',2);
MPRINT(HPDM_NEURAL_REPORT):   label targetCount="Target Count";
MPRINT(HPDM_NEURAL_REPORT):   run;
NOTE: There were 2 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
      WHERE type='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         + data EMWS1.HPNNA_WEIGHTDS;
2         +   length to $200;
MPRINT(HPDM_NEURAL_REPORT):  200
3         +   set EMWS1.HPNNA_WEIGHTDS;
4         + if strip(TO)= 'T1_1' then TO='Attrition_Flag=0';
5         + if strip(NEURONID)= 'T1_1' then do;
6         +   targetCount=1;
7         + end;
8         + if strip(TO)= 'T1_0' then TO='Attrition_Flag=1';
9         + if strip(NEURONID)= 'T1_0' then do;
10        +   targetCount=2;
11        + end;
12        +   call symput('targetCount',2);
13        +  label targetCount="Target Count";
14        + run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:30
NOTE: There were 101 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
NOTE: The data set EMWS1.HPNNA_WEIGHTDS has 101 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):   proc sort data=EMWS1.HPNNA_WEIGHTDS;
MPRINT(HPDM_NEURAL_REPORT):   by descending absweight;
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: There were 101 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
NOTE: The data set EMWS1.HPNNA_WEIGHTDS has 101 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):   data EMWS1.HPNNA_WEIGHTDS;
MPRINT(HPDM_NEURAL_REPORT):   set EMWS1.HPNNA_WEIGHTDS(where=(type in ("HIDDEN","TARGET")) in=_kp) EMWS1.HPNNA_WEIGHTDS(where=(type not in ("HIDDEN","TARGET")));
MPRINT(HPDM_NEURAL_REPORT):   if _n_ le 1000 or _kp;
MPRINT(HPDM_NEURAL_REPORT):   drop absweight;
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: There were 5 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
      WHERE type in ('HIDDEN', 'TARGET');
NOTE: There were 96 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
      WHERE type not in ('HIDDEN', 'TARGET');
NOTE: The data set EMWS1.HPNNA_WEIGHTDS has 101 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):   proc datasets library=work nolist;
MPRINT(HPDM_NEURAL_REPORT):   delete tempsorted ;
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: Deleting WORK.TEMPSORTED (memtype=DATA).
MPRINT(HPDM_NEURAL_REPORT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   data EMWS1.HPNNA_NODES;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   length Text $200 Var $200 X Y 8;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   set EMWS1.HPNNA_WEIGHTDS;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   Text=TO;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   Var=TO;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   output;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   Text=FROM;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   Var=FROM;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   output;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   Keep Text Var X Y VarName;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   run;
 
NOTE: Variable X is uninitialized.
NOTE: Variable Y is uninitialized.
NOTE: There were 101 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
NOTE: The data set EMWS1.HPNNA_NODES has 202 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_CREATECONSTELLATIONDATA):   proc sort data=EMWS1.HPNNA_NODES nodupkey;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   by Var;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   run;
 
NOTE: There were 202 observations read from the data set EMWS1.HPNNA_NODES.
NOTE: 165 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.HPNNA_NODES has 37 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(HPDM_CREATECONSTELLATIONDATA):   data _null_;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   set EMWS1.HPNNA_WEIGHTDS(where=(type="TARGET")) end=eof;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if _n_=1 then do;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("data EMWS1.HPNNA_NODES;");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("  set EMWS1.HPNNA_NODES end=_eof;");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("  retain targetCount 0;");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   end;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   newVar = tranwrd(newVar,"'","''");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("if strip(Text)= '"||strip(newVar) ||"' then do;");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("  targetCount=targetCount+1;");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("  type='"||strip(type)||"';");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("end;");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("if _eof then call symput('targetCount',strip(targetCount));");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if eof then do;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   call execute("run;");
MPRINT(HPDM_CREATECONSTELLATIONDATA):   end;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   run;
 
MPRINT(HPDM_CREATECONSTELLATIONDATA):   data EMWS1.HPNNA_NODES;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   set EMWS1.HPNNA_NODES end=_eof;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   retain targetCount 0;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if strip(Text)= 'Attrition_Flag=0' then do;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   targetCount=targetCount+1;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   type='TARGET';
MPRINT(HPDM_CREATECONSTELLATIONDATA):   end;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if _eof then call symput('targetCount',strip(targetCount));
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if strip(Text)= 'Attrition_Flag=1' then do;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   targetCount=targetCount+1;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   type='TARGET';
MPRINT(HPDM_CREATECONSTELLATIONDATA):   end;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if _eof then call symput('targetCount',strip(targetCount));
MPRINT(HPDM_CREATECONSTELLATIONDATA):   run;
NOTE: There were 2 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
      WHERE type='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         + data EMWS1.HPNNA_NODES;
2         +   set EMWS1.HPNNA_NODES end=_eof;
3         +   retain targetCount 0;
4         + if strip(Text)= 'Attrition_Flag=0' then do;
5         +   targetCount=targetCount+1;
6         +   type='TARGET';
7         + end;
8         + if _eof then call symput('targetCount',strip(targetCount));
9         + if strip(Text)= 'Attrition_Flag=1' then do;
10        +   targetCount=targetCount+1;
11        +   type='TARGET';
12        + end;
13        + if _eof then call symput('targetCount',strip(targetCount));
14        + run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      8:47    13:47
NOTE: There were 37 observations read from the data set EMWS1.HPNNA_NODES.
NOTE: The data set EMWS1.HPNNA_NODES has 37 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_CREATECONSTELLATIONDATA):   proc sort data=EMWS1.HPNNA_WEIGHTDS nodupkey out=tempsorted;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   by FROM ;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   run;
 
NOTE: There were 101 observations read from the data set EMWS1.HPNNA_WEIGHTDS.
NOTE: 65 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSORTED has 36 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(HPDM_CREATECONSTELLATIONDATA):   data EMWS1.HPNNA_NODES;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   merge EMWS1.HPNNA_NODES(where=(Var ne "BIAS")) tempsorted(rename=(FROM=VAR) keep=FROM TYPE LAYER);
MPRINT(HPDM_CREATECONSTELLATIONDATA):   by VAR;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   retain inputcount 0;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   label x= "X" y= "Y" from= "From" layer= "Layer" text= "Text" var= "Variable" targetCount= "Target Count" type= "Type" ;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if missing(TEXT) then delete;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if upcase(var)="BIAS" then delete;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if type="HIDDEN" then do;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   X=200;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   hiddenybw = 350 / (3 + 1);
MPRINT(HPDM_CREATECONSTELLATIONDATA):   if var="H1" then Y=hiddenybw;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   else if var="H2" then Y= hiddenybw * 2;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   else if var="H3" then Y= hiddenybw * 3;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   end;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   else if type="INPUT" then do;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   inputybw = 350 / (32 + 1);
MPRINT(HPDM_CREATECONSTELLATIONDATA):   X=0;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   inputcount + 1;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   Y=inputybw * inputcount;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   end;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   else do;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   targetybw = 350 / (1 + 1);
MPRINT(HPDM_CREATECONSTELLATIONDATA):   X=400;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   Y = targetybw * targetCount;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   end;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   drop VarName inputcount inputybw targetybw hiddenybw ;
MPRINT(HPDM_CREATECONSTELLATIONDATA):   run;
 
NOTE: Variable from is uninitialized.
NOTE: There were 37 observations read from the data set EMWS1.HPNNA_NODES.
      WHERE Var not = 'BIAS';
NOTE: There were 36 observations read from the data set WORK.TEMPSORTED.
NOTE: The data set EMWS1.HPNNA_NODES has 36 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Constellation";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "FALSE";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Constellation";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "x";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "y";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "WEIGHTDS";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "NODES";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "var";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "CIRCLE";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "text";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "linkid";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "WEIGHT";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "FROM";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "TO";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08516060192378;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 133 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "WEIGHTDS";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "TO^="."";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "HPWEIGHTS";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "TO";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "FROM";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "WEIGHT";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73163074801286;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 133 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 267 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TRAINHIST";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "TRAINHIST";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40699135624197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 267 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 399 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(HPDM_NEURAL_REPORT):   data _null_;
MPRINT(HPDM_NEURAL_REPORT):   set EMWS1.HPNNA_ITERHIST(where=(Best="Y"));
MPRINT(HPDM_NEURAL_REPORT):   call symput('_iter_', put(iterationNum, 6.));
MPRINT(HPDM_NEURAL_REPORT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.HPNNA_ITERHIST.
      WHERE Best='Y';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ITERHIST";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LINEPLOT";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ITERPLOT";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "IterationNum";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "39";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "TrainingError";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "ValidationError";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.92192627718761;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 399 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 531 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(HPDM_NEURAL_REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: HPNNA;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32947
32948      *------------------------------------------------------------*;
32949      * End REPORT: HPNNA;
32950      *------------------------------------------------------------*;
 
32951      /* Reset EM Options */
32952      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
32953      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
32954      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
32955      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
32956      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
32957      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 531 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 531 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
32958      proc sort data=EMWS1.MdlComp2_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.MdlComp2_CMeta_TRAIN out=WORK.SUBSETINMETA;
32959      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32960      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS1.MDLCOMP2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 27 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32961      proc sort data=EMWS1.HPNNA_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.HPNNA_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
32962      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32963      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS1.HPNNA_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 27 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
32964      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
32965      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
32966      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32967      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 27 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 27 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32968      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
32969      set EMWS1.HPNNA_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_CMeta_TRAIN;
32970      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
32971      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.HPNNA_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32972      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
32973      set EMWS1.HPNNA_TRAIN(keep=
32974      F_Attrition_Flag
32975      I_Attrition_Flag
32976      P_Attrition_Flag0
32977      P_Attrition_Flag1
32978      Q_Attrition_Flag0
32979      Q_Attrition_Flag1
32980      R_Attrition_Flag0
32981      R_Attrition_Flag1
32982      U_Attrition_Flag
32983      V_Attrition_Flag0
32984      V_Attrition_Flag1
32985      _WARN_
32986      Attrition_Flag
32987      );
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_TRAIN(keep= F_Attrition_Flag I_Attrition_Flag P_Attrition_Flag0 P_Attrition_Flag1 Q_Attrition_Flag0 Q_Attrition_Flag1 R_Attrition_Flag0 R_Attrition_Flag1 U_Attrition_Flag V_Attrition_Flag0 V_Attrition_Flag1 _WARN_
Attrition_Flag );
32988      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.TREE4_TRAIN.
NOTE: View EMWS1.HPNNA_TRAIN.VIEW used (Total process time):
      real time           0.33 seconds
      cpu time            0.34 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.MDLCOMP2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.HPNNA_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7088 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.35 seconds
      cpu time            0.35 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Attrition_Flag*F_Attrition_Flag / out = WORK.HPNNA_3T6W8DU nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.HPNNA_3T6W8DU;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.HPNNA_3T6W8DU(rename=(F_Attrition_Flag=FROM I_Attrition_Flag=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "Attrition_Flag";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.HPNNA_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.HPNNA_3T6W8DU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.HPNNA_3T6W8DU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.HPNNA_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Attrition_Flag ;
 
MPRINT(EM_ASSESS):   VAR P_Attrition_Flag1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Attrition_Flag1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Attrition_Flag P_Attrition_Flag1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Attrition_Flag ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Attrition_Flag1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Attrition_Flag1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 -
EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1606941309 _NEVENTS 1139 _NNONEVENTS 5949 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 7088));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Attrition_Flag1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Attrition_Flag1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Attrition_Flag1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Attrition_Flag1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0002937628 OVLMAX 0.999879307 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 7088 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (7088/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 7088)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 7088/20) ) / ( AVGNUMRESP / (7088/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 7088 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 7088 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 7088/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 7088/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
37269      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
37270      set EMWS1.HPNNA_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_CMeta_TRAIN;
37271      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
37271    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
37272      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.HPNNA_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
37273      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
37274      set EMWS1.HPNNA_VALIDATE(keep=
37275      F_Attrition_Flag
37276      I_Attrition_Flag
37277      P_Attrition_Flag0
37278      P_Attrition_Flag1
37279      Q_Attrition_Flag0
37280      Q_Attrition_Flag1
37281      R_Attrition_Flag0
37282      R_Attrition_Flag1
37283      U_Attrition_Flag
37284      V_Attrition_Flag0
37285      V_Attrition_Flag1
37286      _WARN_
37287      Attrition_Flag
37288      );
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_VALIDATE(keep= F_Attrition_Flag I_Attrition_Flag
P_Attrition_Flag0 P_Attrition_Flag1 Q_Attrition_Flag0 Q_Attrition_Flag1 R_Attrition_Flag0
R_Attrition_Flag1 U_Attrition_Flag V_Attrition_Flag0 V_Attrition_Flag1 _WARN_ Attrition_Flag );
37289      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2025 observations read from the data set EMWS1.PART2_VALIDATE.
NOTE: There were 2025 observations read from the data set EMWS1.TREE4_VALIDATE.
NOTE: View EMWS1.HPNNA_VALIDATE.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.31 seconds
 
NOTE: There were 2025 observations read from the data set EMWS1.MDLCOMP2_VALIDATE.
NOTE: There were 2025 observations read from the data set EMWS1.HPNNA_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2025 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.34 seconds
      cpu time            0.32 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Attrition_Flag*F_Attrition_Flag / out = WORK.HPNNA_0KPDLX9 nocol
norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.HPNNA_0KPDLX9;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.HPNNA_0KPDLX9(rename=(F_Attrition_Flag=FROM
I_Attrition_Flag=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "Attrition_Flag";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.HPNNA_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMCLASSIFICATION WORK.HPNNA_0KPDLX9;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.HPNNA_0KPDLX9;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.HPNNA_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Attrition_Flag ;
 
MPRINT(EM_ASSESS):   VAR P_Attrition_Flag1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Attrition_Flag1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Attrition_Flag P_Attrition_Flag1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Attrition_Flag ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Attrition_Flag1 NTARGET _tmpfreqvar_
WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Attrition_Flag1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1604938272 _NEVENTS
325 _NNONEVENTS 1700 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2025));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Attrition_Flag1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Attrition_Flag1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Attrition_Flag1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Attrition_Flag1 *
_FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0002920091 OVLMAX 0.9998617846 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2025 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(2025/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2025)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2025/20) ) / (
AVGNUMRESP / (2025/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2025 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2025 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2025/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 2025/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
41579      %let _cn = %sysfunc(getoption(CENTER));
41580      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
41581      proc print data=EMWS1.HPNNA_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.HPNNA_EMREPORTFIT noobs label;
41582      var STAT LABEL TRAIN
41583      VALIDATE
41584      TEST
41585      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
41586      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
41587      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41588      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
41589      run;
 
NOTE: There were 9 observations read from the data set EMWS1.HPNNA_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
41590      title10;
MPRINT(EM_DIAGRAM):   title10;
41591      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
41592      proc sort data=EMWS1.HPNNA_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.HPNNA_EMCLASSIFICATION nothreads;
41593      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
41594      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.HPNNA_EMCLASSIFICATION.
NOTE: The data set EMWS1.HPNNA_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
41595      %let _cn = %sysfunc(getoption(CENTER));
41596      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
41597      proc print data=EMWS1.HPNNA_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.HPNNA_EMCLASSIFICATION noobs label;
41598      var from into pct_row pct_col count percent
41599      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
41600      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
41601      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
41602      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
41603      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
41604      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
41605      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
41606      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
41607      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
41608      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41609      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
41610      run;
 
NOTE: There were 8 observations read from the data set EMWS1.HPNNA_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
41611      title9;
MPRINT(EM_DIAGRAM):   title9;
41612      title10;
MPRINT(EM_DIAGRAM):   title10;
41613      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
41614      %let _cn = %sysfunc(getoption(CENTER));
41615      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
41616      data EMWS1.HPNNA_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.HPNNA_EMEVENTREPORT;
41617      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
41617    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
41618      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
41618    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
41618    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
41618    ! FALSEEVENT
41619      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
41619    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
41619    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
41620         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
41621      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
41622      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
41623      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
41624      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
41625      set EMWS1.HPNNA_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.HPNNA_EMEVENTREPORT;
41626      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.HPNNA_EMEVENTREPORT.
NOTE: The data set EMWS1.HPNNA_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
41627      proc print data=EMWS1.HPNNA_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.HPNNA_EMEVENTREPORT noobs label;
41628      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41629      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
41630      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
41631      run;
 
NOTE: There were 2 observations read from the data set EMWS1.HPNNA_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41632      title10;
MPRINT(EM_DIAGRAM):   title10;
41633      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
41634      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
41635      modify HPNNA_EMRANK;
MPRINT(EM_DIAGRAM):   modify HPNNA_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
41636      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
41637      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
41637    ! ;
MPRINT(EM_DIAGRAM):   run;
41638      run;
 
NOTE: MODIFY was successful for EMWS1.HPNNA_EMRANK.DATA.
41639      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
41640      %let _cn = %sysfunc(getoption(CENTER));
41641      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
41642      proc print data=EMWS1.HPNNA_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.HPNNA_EMRANK label noobs;
41643      var
41644      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
41645      by
41646      notsorted DATAROLE
41647      notsorted TARGET
41648      notsorted TARGETLABEL
41649      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
41650      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41651      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
41652      run;
 
NOTE: There were 40 observations read from the data set EMWS1.HPNNA_EMRANK.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
41653      title10;
MPRINT(EM_DIAGRAM):   title10;
41654      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
41655      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
41656      modify HPNNA_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify HPNNA_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
41657      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
41657    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
41658      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
41658    ! ;
MPRINT(EM_DIAGRAM):   run;
41659      run;
 
NOTE: MODIFY was successful for EMWS1.HPNNA_EMSCOREDIST.DATA.
41660      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.HPNNA_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "Attrition_Flag" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
