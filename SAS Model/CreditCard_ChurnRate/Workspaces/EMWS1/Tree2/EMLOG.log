*------------------------------------------------------------*
User:                Kevin
Date:                April 09, 2022
Time:                15:11:01
Site:                70135990
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:10:50" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 09, 2022
Time:                15:10:50
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1BX3U57
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1BX3U57 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:10:50" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Kevin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70135990";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMTRAIN.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMSCORE.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMREPORT.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMOUTPUT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:10:50" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Kevin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMSCORE.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMREPORT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
193577     proc freq data=EMWS1.Tree2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree2_VariableSet noprint;
193578     table ROLE*LEVEL/out=WORK.Tree2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree2META;
193579     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
193580     proc print data=WORK.Tree2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2META label noobs;
193581     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
193582     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
193582   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
193582   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
193583     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
193584     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
193585     run;
 
NOTE: There were 5 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 113.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
193586     title10;
MPRINT(EM_DIAGRAM):   title10;
193587     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN EMWS1 Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN EMWS1 Part2_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Part2_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Attrition_Flag(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Attrition_Flag";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=Attrition_Flag));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Attrition_Flag";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_Attrition_Flag_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Attrition_Flag;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Attrition_Flag;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
193616     data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
193617     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
193618     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
193618   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
193618   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
193619        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
193619   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
193619   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
193620     set EMWS1.IDS_ATTRITION_FLAG_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_ATTRITION_FLAG_DM( where=(_TYPE_="TARGET"));
193621     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
193622     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
193623     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
193624     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
193625     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
193626     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
193627     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
193628     end;
MPRINT(EM_DIAGRAM):   end;
193629     output;
MPRINT(EM_DIAGRAM):   output;
193630     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
193631     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
193632     proc print data=WORK.Tree2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2_EVENT noobs label;
193633     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
193634     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
193635     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
193636     run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 114.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
193637     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Attrition_Flag"."
193638     proc print data = EMWS1.Ids_Attrition_Flag_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_Attrition_Flag_DM noobs label;
193639     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
193640     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
193641     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
193641   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
193641   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
193642     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
193643     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
193644     run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 115.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
193645     title10;
MPRINT(EM_DIAGRAM):   title10;
193646     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'CreditCard_ChurnRate';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'CreditCard_ChurnRate';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Attrition_Flag;
MPRINT(EM_DECDATA):   length Attrition_Flag $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8
DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   Attrition_Flag="1";
MPRINT(EM_DECDATA):   COUNT=1627;
MPRINT(EM_DECDATA):   DATAPRIOR=0.16065962279055;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.16065962279055;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Attrition_Flag="0";
MPRINT(EM_DECDATA):   COUNT=8500;
MPRINT(EM_DECDATA):   DATAPRIOR=0.83934037720944;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.83934037720944;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Attrition_Flag";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Attrition_Flag_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Attrition_Flag_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Attrition_Flag";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Attrition_Flag_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Attrition_Flag_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
194186     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
194187     * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
194188     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
194189     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
194190     %let EMEXCEPTIONSTRING=;
194191     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
194192     * TRAIN: Tree2;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree2;
194193     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
194194     %let EM_ACTION = TRAIN;
194195     %let syscc = 0;
194196     %macro main;
194197
194198       %if %upcase(&EM_ACTION) = CREATE %then %do;
194199         filename temp catalog 'sashelp.emmodl.tree_create.source';
194200         %include temp;
194201         filename temp;
194202
194203         %em_tree_create;
194204       %end;
194205
194206        %else
194207        %if %upcase(&EM_ACTION) = TRAIN %then %do;
194208
194209            filename temp catalog 'sashelp.emmodl.tree_train.source';
194210            %include temp;
194211            filename temp;
194212            %em_tree_train;
194213        %end;
194214
194215       %else
194216       %if %upcase(&EM_ACTION) = SCORE %then %do;
194217         filename temp catalog 'sashelp.emmodl.tree_score.source';
194218         %include temp;
194219         filename temp;
194220
194221         %em_tree_score;
194222
194223       %end;
194224
194225       %else
194226       %if %upcase(&EM_ACTION) = REPORT %then %do;
194227
194228            filename temp catalog 'sashelp.emmodl.tree_report.source';
194229            %include temp;
194230            filename temp;
194231
194232            %em_tree_report;
194233        %end;
194234
194235       %else
194236       %if %upcase(&EM_ACTION) = OPENINT %then %do;
194237
194238            filename temp catalog 'sashelp.emmodl.tree_actions.source';
194239            %include temp;
194240            filename temp;
194241            %EM_TREE_OPENTREEVIEWER;
194242
194243        %end;
194244
194245       %else
194246       %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
194247
194248            filename temp catalog 'sashelp.emmodl.tree_actions.source';
194249            %include temp;
194250            filename temp;
194251            %EM_TREE_CLOSETREEVIEWER;
194252
194253        %end;
194254
194255
194256        %doendm:
194257     %mend main;
194258
194259     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
194261    +%macro em_tree_train;
194263    +   %if &EM_IMPORT_DATA eq %then %do;
194264    +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
194265    +       %put &em_codebar;
194266    +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
194266   !+NOQUOTE));
194267    +       %put &errormsg;
194268    +       %put &em_codebar;
194269    +       %goto doendm;
194270    +   %end;
194271    +   %else
194272    +       %let EMEXCEPTIONSTRING =;
194274    +   %if  &EM_NUM_TARGET lt 1 %then %do;
194275    +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
194276    +        %put &em_codebar;
194277    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
194277   !+NOQUOTE));
194278    +        %put &errormsg;
194279    +        %put &em_codebar;
194280    +        %goto doendm;
194281    +   %end;
194283    +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
194283   !+(&EM_NUM_ORDINAL_INPUT < 1)
194284    +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and
194284   !+(&EM_NUM_BINARY_REJECTED <1)
194285    +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then
194285   !+%do;
194286    +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
194287    +        %put &em_codebar;
194288    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
194288   !+;
194289    +        %put &errormsg;
194290    +        %put &em_codebar;
194291    +        %goto doendm;
194292    +   %end;
194294    +   /* Initialize property macro variables */
194295    +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
194296    +   %include temp;
194297    +   filename temp;
194299    +   %EM_SetProperties;
194301    +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
194302    +   %EM_GETNAME(key=EMTREE, type=DATA);
194303    +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
194304    +     /* if import eq Y and no importtable defined, throw an exception */
194305    +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
194306    +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
194307    +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR ,
194307   !+NOQUOTE));
194308    +         %put &em_codebar;
194309    +         %put &errmsg;
194310    +         %put &em_codebar;
194311    +         %goto doendm;
194312    +      %end;
194313    +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
194314    +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
194315    +         %put &em_codebar;
194316    +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
194316   !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
194317    +         %put &errormsg;
194318    +         %put &em_codebar;
194319    +         %goto doendm;
194320    +      %end;
194321    +      %else %do;
194322    +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
194323    +         %let varnumID = %sysfunc(varnum(&dsid,ID));
194324    +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
194325    +         %let varnumX = %sysfunc(varnum(&dsid,X));
194326    +         %let varnumY = %sysfunc(varnum(&dsid,Y));
194327    +         %let dsid = %sysfunc(close(&dsid));
194328    +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
194329    +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET
194329   !+;
194330    +            %put &em_codebar;
194331    +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
194331   !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
194332    +            %put &errormsg;
194333    +            %put &em_codebar;
194334    +            %goto doendm;
194335    +         %end;
194336    +      %end;
194337    +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and
194337   !+(%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then
194337   !+%do;
194338    +         proc delete data=&EM_USER_EMTREE;
194339    +         run;
194340    +      %end;
194341    +   %end;
194342    +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or
194342   !+%sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
194343    +      proc delete data=&EM_USER_EMTREE;
194344    +      run;
194345    +   %end;
194347    +   /* load tree macros */
194348    +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
194349    +   %include temp;
194350    +   filename temp;
194352    +   /* data sets */
194353    +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
194354    +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
194355    +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
194357    +   /* files */
194358    +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
194360    +   /* check actual num of target levels */
194361    +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
194362    +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
194363    +                              nLevel=_nTargetLevel );
194364    +      %if &_nTargetLevel  > 2 %then %do;
194365    +        %let EMEXCEPTIONSTRING =
194365   !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
194366    +        %put &em_codebar;
194367    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
194367   !+NOQUOTE));
194368    +        %put &errormsg;
194369    +        %put &em_codebar;
194370    +        %goto doendm;
194371    +      %end;
194372    +   %end;
194374    +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
194375    +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
194376    +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
194377    +        %let costflag=0;
194378    +        data _null_;
194379    +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND
194379   !+^missing(COST) )) end=eof;
194380    +          if eof then call symput("costflag", _N_);
194381    +        run;
194382    +        %if &costflag gt 0 %then %do;
194383    +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
194384    +          %put &em_codebar;
194385    +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
194385   !+costnotvalidwithusedecisions_note_err, NOQUOTE));
194386    +          %put &errormsg;
194387    +          %put &em_codebar;
194388    +          %goto doendm;
194389    +       %end;
194390    +     %end;
194391    +   %end;
194393    +   /* determine if multiple targets will be processed */
194394    +   %let em_tree_multipleTargets=N;
194395    +   %let em_tree_numTarget = 1;
194396    +   %let em_tree_targetVars=;
194398    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
194399    +      /* determine if there are any ordinal target variables - if so, multiple
194399   !+targets are not supported */
194400    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
194401    +         %let em_tree_multipleTargets=N;
194402    +      %end;
194403    +      %else %do;
194404    +         /* create macro array of targets  */
194405    +         data _null_;
194406    +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'))
194406   !+end=eof;
194407    +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
194408    +           if eof then
194409    +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
194410    +        run;
194412    +        %if &em_tree_numTarget gt 1 %then %do;
194413    +           %let em_tree_multipleTargets=Y;
194414    +        %end;
194415    +      %end;
194416    +   %end;
194418    +   /* create view of only necessary variable for performance reasons */
194419    +   %let tempData = &EM_LIB..em_&EM_NODEID;
194420    +   data &tempData / view=&tempData;
194421    +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
194422    +     %if "&em_tree_multipleTargets" eq "N" %then %do;
194423    +       %EM_TARGET
194424    +     %end;
194425    +     %else %do;
194426    +       %if &em_tree_numTarget ne 0 %then %do;
194427    +         %do i=1 %to &em_tree_numTarget;
194428    +            &&em_tree_targetVars&i
194429    +         %end;
194430    +       %end;
194431    +     %end;
194432    +     );
194433    +   run;
194435    +   /* run Tree procedure */
194436    +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets)
194436   !+;
194438    +   /* Check return code and throw exception if error is detected */
194439    +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
194440    +   %if &syserr %then %do;
194441    +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
194442    +     %goto doendm;
194443    +   %end;
194445    +   /* add decision score code if multiple targets are processed */
194446    +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
194447    +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N)
194447   !+;
194448    +   %end;
194450    +   /* create outfit dataset if multiple score statements have been executed */
194451    +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
194453    +   /* create English Rules */
194454    +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
194455    +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
194456    +       %em_tree_makeEnglishRules;
194458    +       /* English Rules */
194459    +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL,
194459   !+description=ENGLISHRULES, autodisplay=N);
194461    +     %end;
194462    +   filename x;
194464    +   %doendm:
194465    +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
194466    +%macro EM_SetProperties;
194468    +   /* train properties */
194469    +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
194470    +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
194471    +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
194472    +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
194473    +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ,
194473   !+global=Y);
194474    +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
194475    +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
194476    +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
194477    +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
194478    +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
194479    +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
194480    +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
194481    +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
194482    +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
194483    +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
194484    +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
194485    +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH,
194485   !+global=Y);
194486    +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
194487    +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT,
194487   !+global=Y);
194488    +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
194489    +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS,
194489   !+global=Y);
194490    +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
194491    +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
194492    +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
194493    +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
194494    +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
194495    +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
194496    +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
194497    +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
194498    +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
194499    +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
194500    +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
194501    +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
194502    +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
194503    +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
194504    +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
194505    +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
194506    +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
194507    +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
194508    +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
194509    +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
194511    +   /* properties for interactive sample */
194512    +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
194513    +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
194514    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
194515    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
194517    +   /* report properties */
194518    +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
194519    +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
194520    +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN,
194520   !+global=Y);
194521    +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
194522    +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
194523    +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
194524    +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
194525    +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
194526    +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
194527    +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
194528    +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
194529    +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
194530    +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
194532    +   /* score properties */
194533    +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
194534    +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
194536    +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree2_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: Deleting EMWS1.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
194538    +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
194539    +  %global &nLevel;
194540    +  proc dmdb batch data=&indata
194541    +    classout=_tmp_dmdbout;
194542    +    class &target;
194543    +  run;
194544    +  data _tmp_dmdbout;
194545    +    set _tmp_dmdbout;
194546    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
194547    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
194548    +  run;
194549    +  data _null_;
194550    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
194551    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
194552    +    %let dsid = %sysfunc(close(&dsid));
194553    +     call symput("&nLevel", put(&_obs, Best12.));
194554    +  run;
194556    +  proc datasets lib=work nolist;
194557    +     delete _tmp_dmdbout;
194558    +  run;
194559    +  quit;
194560    +%Mend EM_CheckBinaryTargetLevel;
194563    +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
194565    +  /* determine the number of obs in training data */
194566    +  proc sql;
194567    +    reset noprint;
194568    +    select count(*) into :em_nobs from &indata;
194569    +  quit;
194571    +  /* determine the number of input variables */
194572    +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +
194572   !+&EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
194573    +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED +
194573   !+&EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
194575    +  /* retrieve targetEvent from decmeta */
194576    +  %let targetEvent=;
194577    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
194578    +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
194579    +      data _null_;
194580    +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
194581    +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
194582    +      run;
194583    +    %end;
194584    +  %end;
194586    +  /* create targetTable if multipleTar eq Y */
194587    +  data temptarget;
194588    +    set &EM_DATA_VARIABLESET;
194589    +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
194590    +  run;
194592    + /* data sets */
194593    + %EM_GETNAME(key=OUTSTATS,      type=DATA);
194594    + %EM_GETNAME(key=EMTREE,        type=DATA);
194595    + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
194596    + %EM_GETNAME(key=OUTSEQ,        type=DATA);
194597    + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
194598    + %EM_GETNAME(key=OUTNODES,      type=DATA);
194599    + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
194600    + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
194601    + %EM_GETNAME(key=OUTPATH,       type=DATA);
194602    + %EM_GETNAME(key=OUTRULES,      type=DATA);
194604    + /* files */
194605    + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
194606    + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
194608    + /* turn on pmml if requested */
194609    + %let nnpmml=0;
194610    + %if %symexist(EM_PMML) %then %do;
194611    +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
194612    +       %let nnpmml=1;
194614    +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
194615    +   %end;
194616    +%end;
194618    +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET +
194618   !+&EM_NUM_ORDINAL_TARGET);
194620    +%if &nnpmml or &numClassTarget %then %do;
194622    +    /* create dmdb needed for pmml generation */
194623    +    %let tree_maxlevel = 512;
194624    +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
194625    +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
194626    +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
194627    +      %end;
194628    +    %end;
194629    +    %if &tree_maxlevel gt 0 %then %do;
194630    +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
194631    +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
194632    +    %end;
194634    +    %let targetOrderString =;
194635    +    %let targetString = ;
194636    +    data _null_;
194637    +       length orderString nameString $10000;
194638    +       retain orderString nameString;
194639    +       set &em_data_variableset end=eof;
194640    +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then
194640   !+ %do;
194641    +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
194642    +       %end;
194643    +       %else %do;
194644    +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE
194644   !+='Y';
194645    +       %end;          select(order);
194646    +         when('')        order ='DESC';
194647    +         when('FMTASC')  order='ASCFMT';
194648    +         when('FMTDESC') order='DESFMT';
194649    +         otherwise;
194650    +       end;
194651    +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
194652    +       nameString = trim(nameString)!!' '!!trim(NAME);
194654    +       if eof then do;
194655    +          call symput('targetOrderString', trim(orderString));
194656    +          call symput('targetString', trim(nameString));
194657    +       end;
194658    +    run;
194660    +    %let arborkluge= "work._treeDMDB";
194662    +    proc dmdb batch data=&indata
194663    +    %if &nnpmml %then %do;
194664    +        PMML
194665    +    %end;
194666    +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
194668    +      %if &nnpmml %then %do;
194669    +           %if "%EM_ID" ne "" %then %do;
194670    +             id %EM_ID;
194671    +           %end;
194672    +           %if &EM_NUM_CLASS gt 0 %then %do;
194673    +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
194674    +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
194675    +                  &targetOrderString;
194676    +           %end;
194677    +           %if &EM_NUM_INTERVAL gt 0 %then %do;
194678    +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
194679    +           %end;
194680    +           target &targetString %EM_INTERVAL_TARGET;
194681    +           %if "%EM_FREQ" ne "" %then %do;
194682    +             freq %EM_FREQ;
194683    +           %end;
194684    +      %end;
194685    +      %else %do;
194686    +         class  &targetOrderString;
194687    +         target &targetString %EM_INTERVAL_TARGET;
194688    +      %end;
194689    +    run;
194690    +    quit;
194692    +    proc datasets lib=work nolist;
194693    +       delete classout varout;
194694    +    run;
194695    +    quit;
194697    + %end;
194700    + /* run Arbor procedure */
194701    + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
194702    +  proc arbor data=&INDATA
194704    +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
194705    +    Leafsize = &EM_PROPERTY_LEAFSIZE
194706    +  %end;
194708    +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs))
194708   !+%then %do;
194709    +    Splitsize = &EM_PROPERTY_SPLITSIZE
194710    +  %end;
194712    +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
194713    +    MinCatSize = &EM_PROPERTY_MINCATSIZE
194714    +  %end;
194716    +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
194717    +    MaxBranch = &EM_PROPERTY_MAXBRANCH
194718    +  %end;
194720    +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
194721    +    MaxDepth = &EM_PROPERTY_MAXDEPTH
194722    +  %end;
194724    +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then
194724   !+%do;
194725    +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
194726    +  %end;
194727    +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
194728    +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
194729    +  %end;
194730    +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
194731    +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
194732    +  %end;
194734    +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
194735    +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
194736    +      alpha = &EM_PROPERTY_SIGLEVEL
194737    +    %end;
194738    +  %end;
194740    +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or
194740   !+("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
194741    +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion"
194741   !+ eq "DEFAULT")) %then %do;
194742    +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
194743    +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
194744    +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
194746    +        padjust =
194747    +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
194748    +          &chaid
194749    +        %end;
194750    +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
194751    +          DEPTH
194752    +        %end;
194753    +      %end;
194754    +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
194755    +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
194756    +         pvars = &num_inputs
194757    +      %end;
194758    +    %end;
194759    +  %end;
194760    +  %else %do;
194761    +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR
194761   !+("&Criterion" eq "DEFAULT")) %then %do;
194762    +         padjust = NONE
194763    +      %end;
194764    +  %end;
194766    +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
194767    +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
194768    +    Maxrules = &num_nrules
194769    +  %end;
194771    +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
194772    +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
194773    +    Maxsurrs = &num_nsurrs
194774    +  %end;
194776    +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
194777    +     Missing=&EM_PROPERTY_MISSINGVALUE
194778    +  %end;
194780    +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
194781    +     USEVARONCE
194782    +  %end;
194784    +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
194785    +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
194786    +  %end;
194789    +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
194790    +    event = "&targetEvent"
194791    +  %end;
194793    +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
194794    +     DECSEARCH
194795    +  %end;
194797    +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
194798    +     PRIORSSEARCH
194799    +  %end;
194801    +  %if &arbor_1 ne %then %do;
194802    +    &arbor_1
194803    +  %end;
194805    +  %if &em_arbor ne %then %do;
194806    +     &em_arbor
194807    +  %end;
194808    +  ;
194809    + %end;
194810    + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
194811    +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
194812    +       Performance &EM_PROPERTY_PERFORMANCE
194813    +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
194814    +         nodesize=&EM_PROPERTY_NODESAMPLE
194815    +       %end;
194816    +       ;
194817    +       interact;
194818    + %end;
194819    + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
194820    +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
194821    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
194822    +    %put &em_codebar;
194823    +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
194823   !+NOQUOTE));
194824    +    %put &errormsg;
194825    +    %put &em_codebar;
194826    +    %goto doendm;
194827    +   %end;
194828    +   %else %do;
194829    +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
194830    +       Performance &EM_PROPERTY_PERFORMANCE
194831    +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
194832    +         nodesize=&EM_PROPERTY_NODESAMPLE
194833    +       %end;
194834    +       ;
194835    +       interact;
194836    +   %end;
194837    + %end;
194839    + %else %do;
194840    +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
194841    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
194842    +    %put &em_codebar;
194843    +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
194843   !+NOQUOTE));
194844    +    %put &errormsg;
194845    +    %put &em_codebar;
194846    +    %goto doendm;
194847    +   %end;
194848    +   %else %do;
194849    +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
194850    +       Performance &EM_PROPERTY_PERFORMANCE
194851    +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
194852    +         nodesize=&EM_PROPERTY_NODESAMPLE
194853    +       %end;
194854    +       ;
194855    +        interact;
194856    +   %end;
194857    + %end;
194859    + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
194860    +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
194861    +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
194862    +    %end;
194864    +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
194865    +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
194866    +    %end;
194868    +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
194869    +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
194870    +    %end;
194872    +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
194873    +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
194874    +    %end;
194876    +    %if "%EM_FREQ" ne "" %then %do;
194877    +       freq %EM_FREQ;
194878    +    %end;
194880    +    %if "&multipleTar" eq "Y" %then %do;
194881    +       /* cycle through all target vars in variableset */
194882    +       %let tdsid = %sysfunc(open(temptarget));
194883    +       %if &tdsid %then %do;
194884    +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
194885    +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
194886    +          %do %while(^ %sysfunc(fetch(&tdsid)));
194887    +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
194888    +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
194889    +             target &var / level = &lvl
194890    +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
194891    +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
194892    +             %end;
194893    +             %else %if "&lvl" eq "INTERVAL" %then %do;
194894    +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
194895    +             %end;
194896    +             %else %if "&lvl" eq "ORDINAL" %then %do;
194897    +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
194898    +             %end;
194899    +          %end;
194900    +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
194901    +       %end;
194902    +       useTarget variable = %EM_TARGET;
194903    +    %end;
194904    +    %else %do;
194905    +      target %EM_TARGET / level = %EM_TARGET_LEVEL
194906    +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL"))
194906   !+%then %do;
194907    +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
194908    +      %end;
194909    +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
194910    +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
194911    +      %end;
194912    +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
194913    +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
194914    +      %end;
194915    +    %end;
194917    +    %if "&multipleTar" eq "N" %then %do;
194918    +      &EM_DEC_STATEMENT;
194919    +    %end;
194921    +    Performance &EM_PROPERTY_PERFORMANCE
194922    +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
194923    +      nodesize=&EM_PROPERTY_NODESAMPLE
194924    +    %end;
194925    +    ;
194927    +    %if "&intFlag" eq "Y" %then %do;
194928    +       INTERACT Largest;
194929    +       Train maxnewdepth=0;
194930    +    %end;
194932    +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
194933    +         Assess
194934    +         %if (("&EM_IMPORT_VALIDATE" ne "") AND
194934   !+(%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW))
194934   !+)) %then %do;
194935    +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
194936    +              %put &em_codebar;
194937    +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
194937   !+novalidationwithcv_note, NOQUOTE));
194938    +              %put &errormsg;
194939    +              %put &em_codebar;
194940    +            %end;
194941    +            %else %do;
194942    +               Validata=&EM_IMPORT_VALIDATE
194943    +            %end;
194944    +         %end;
194945    +         %else %do;
194946    +           NoValidata
194947    +         %end;
194948    +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
194949    +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
194950    +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
194951    +               %if &dsid %then %do;
194952    +                 %let usenum = %sysfunc(varnum(&dsid, USE));
194953    +                 %do %while(^ %sysfunc(fetch(&dsid)));
194954    +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
194955    +                   %if "&use" eq "Y" %then %let measure=PROFIT;
194956    +                   %else %do;
194957    +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
194958    +                      %else %let measure= MISC;
194959    +                   %end;
194960    +                 %end;
194961    +               %end;
194962    +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
194963    +            %end;
194964    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
194965    +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
194966    +                 %let measure=ASE;
194967    +              %end;
194968    +              %else %do;
194969    +                 %let measure=MISC;
194970    +              %end;
194971    +            %end;
194972    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
194973    +              %let measure=ASE;
194974    +            %end;
194975    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
194976    +               %let measure = LIFT;
194977    +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
194978    +               %if &dsid %then %do;
194979    +                 %let usenum = %sysfunc(varnum(&dsid, USE));
194980    +                 %do %while(^ %sysfunc(fetch(&dsid)));
194981    +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
194982    +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
194983    +                 %end;
194984    +               %end;
194985    +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
194986    +            %end;
194987    +            measure=&measure
194988    +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL"))
194988   !+%then %do;
194989    +               event = "&targetEvent"
194990    +            %end;
194991    +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
194992    +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
194993    +            %end;
194994    +         %end;
194995    +         %if "&multipleTar" eq "N" %then %do;
194996    +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
194997    +               CV
194998    +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
194999    +                 CVNITer = &EM_PROPERTY_CVNITER
195000    +               %end;
195001    +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
195002    +                 CVRepeat = &EM_PROPERTY_CVREPEAT
195003    +               %end;
195004    +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
195005    +                 CVSeed = &EM_PROPERTY_CVSEED
195006    +               %end;
195007    +            %end;
195008    +         %end;
195009    +       %end;
195010    +      ;
195012    +      %if "&intFlag" ne "Y" %then %do;
195013    +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
195014    +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
195015    +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
195016    +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
195018    +          SUBTREE &subtree
195019    +          %if "&subtree" eq "NLEAVES" %then %do;
195020    +            =&EM_PROPERTY_NSUBTREE
195021    +          %end;
195022    +          ;
195023    +        %end;
195025    +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then
195025   !+ %do;
195026    +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
195027    +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP
195027   !+nvars=&EM_PROPERTY_NUMSINGLEIMP;
195028    +          %end;
195029    +       %end;
195030    +      %end;
195031    + %end;
195034    + MakeMacro nleaves = nleaves;
195035    + save
195036    + %if "&EM_USER_EMTREE" ne "" %then %do;
195037    +   MODEL=&EM_USER_EMTREE
195038    + %end;
195039    + %if "&EM_USER_OUTSEQ" ne "" %then %do;
195040    +   SEQUENCE=&EM_USER_OUTSEQ
195041    + %end;
195042    + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
195043    +   IMPORTANCE=&EM_USER_OUTIMPORT
195044    + %end;
195045    + %if "&EM_USER_OUTNODES" ne "" %then %do;
195046    +   NODESTAT=&EM_USER_OUTNODES
195047    + %end;
195048    + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
195049    +   SUMMARY=&EM_USER_OUTSUMMARY
195050    + %end;
195051    + %if "&EM_USER_OUTSTATS" ne "" %then %do;
195052    +   STATSBYNODE=&EM_USER_OUTSTATS
195053    + %end;
195054    + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
195055    +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
195056    + %end;
195057    + %if "&EM_USER_OUTPATH" ne "" %then %do;
195058    +   Pathlistnonmissing=&EM_USER_OUTPATH
195059    + %end;
195060    + %if "&EM_USER_OUTRULES" ne "" %then %do;
195061    +   RULES = &EM_USER_OUTRULES
195062    + %end;
195063    + ;
195065    + %if "&intFlag" ne "Y" %then %do;
195067    +   %let lookupString = ;
195068    +   %if ^%symexist(EM_OPTION) %then
195069    +      %let EM_OPTION=;
195071    +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or
195071   !+%sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
195072    +      %let lookupString = LOOKUP=SELECT;
195073    +   %end;
195075    +   %let codetext=;
195076    +   %let norescodetxt=;
195078    +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
195079    +     %let codetext=&codetext DUMMY;
195080    +     %let norescodetxt=&norescodetxt DUMMY;
195081    +   %end;
195082    +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
195083    +     %let codetext=&codetext NOLEAFID;
195084    +     %let norescodetxt=&norescodetxt NOLEAFID;
195085    +   %end;
195086    +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
195087    +     %let norescodetxt=&norescodetxt NOPRED;
195088    +   %end;
195090    +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
195091    +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid
195091   !+&lookupString;
195093    +   %if &nnpmml %then %do;
195094    +     code pmml;
195095    +   %end;
195097    +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
195098    +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
195099    +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
195100    +   %end;
195101    +   %if "&EM_IMPORT_TEST" ne "" %then %do;
195102    +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
195103    +   %end;
195104    + %end;
195106    + run;
195107    + quit;
195109    + /*%em_checkerror(); */
195110    +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
195111    +   /* Delete DMDB catalog */
195112    +   proc datasets lib=work nolist;
195113    +       delete _treeDMDB / mt=cat;
195114    +  run;
195115    +  %end;
195117    + %if &nnpmml %then %do;
195118    +    ods pmml close;
195119    + %end;
195121    +  %doendm:
195123    +%mend em_tree_runTreeProcedure;
195125    +%macro em_tree_createFitStats( multipleTar= );
195128    +  /* create targetTable is multipleTar eq Y */
195129    +  data temptarget;
195130    +    set &EM_DATA_VARIABLESET;
195131    +    where ROLE="TARGET";
195132    +  run;
195134    +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
195135    +   data &EM_USER_EMOUTFIT;
195136    +     length target $32;
195137    +     merge work.fit_train
195138    +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
195139    +       work.fit_valid
195140    +     %end;
195141    +     %if "&EM_IMPORT_TEST" ne "" %then %do;
195142    +       work.fit_test
195143    +     %end;
195144    +     ;
195145    +     %if "&multipleTar" eq "N" %then %do;
195146    +       target="%EM_TARGET";
195147    +     %end;
195148    +     %else %do;
195149    +       target = _TARGET_;
195150    +     %end;
195151    +     drop _NW_ _SUMW_
195152    +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
195153    +        _VSUMW_
195154    +     %end;
195155    +     ;
195156    +   run;
195158    +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
195159    +     proc datasets library=work nolist;
195160    +       delete fit_valid;
195161    +     run;
195162    +   %end;
195163    +   %if "&EM_IMPORT_TEST" ne "" %then %do;
195164    +     proc datasets library=work nolist;
195165    +       delete fit_test;
195166    +     run;
195167    +   %end;
195169    +%mend em_tree_createFitStats;
195172    +%macro em_tree_makeEnglishRules;
195174    +  %EM_GETNAME(key=OUTNODES, type=DATA);
195175    +  %EM_GETNAME(key=OUTPATH, type=DATA);
195177    +  /* verify that necessary tables exist and if not, skip processing */
195178    +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
195179    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
195180    +    %goto doendm;
195181    +  %end;
195182    +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
195183    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
195184    +    %goto doendm;
195185    +  %end;
195187    +  /* determine length of variable in outpath dataset */
195188    +  %let vlength= ;
195189    +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
195190    +  %if &dsid ne %then %do;
195191    +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
195192    +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
195193    +  %end;
195194    +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
195196    +  data tempoutpath;
195197    +    length varname $&vlength;
195198    +    retain varname;
195199    +    set &EM_USER_OUTPATH;
195201    +    if ^missing(variable) then varname=variable;
195202    +    else if ^missing(var_name) then varname=var_name;
195203    +    output;
195204    +  run;
195206    +  /* create an array of generated predicted variable names */
195207    +  %let tree_pred_vars = ;
195208    +  %let tree_pred_label = ;
195209    +  %let numpred= 0;
195210    +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
195212    +    data _null_;
195213    +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
195214    +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
195215    +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
195215   !+strip(tranwrd(LABEL,'"','""')));
195216    +     if eof then
195217    +       call symput('numpred', strip(put(_N_, BEST.)));
195218    +    run;
195219    +  %end;
195221    +  /* determine if NPRIORS exists in outnodes  */
195222    +  %local nprior_flag;
195223    +  data _null_;
195224    +    set &EM_USER_OUTNODES(obs=2) end=eof;
195225    +    if eof then do;
195226    +      call symput('nprior_flag', strip(put(npriors, best.)));
195227    +    end;
195228    +  run;
195230    +  proc sort data=tempoutpath; by node; run;
195231    +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
195233    +  data tempoutpath;
195234    +    merge tempoutpath(in=_a) outnodes(keep= node
195235    +    %if "&nprior_flag" ne "." %then %do;
195236    +      NPRIORS
195237    +    %end;
195238    +    %else %do;
195239    +      N
195240    +    %end;
195241    +    %if &numpred gt 0 %then %do;
195242    +      %do i=1 %to &numpred;
195243    +        &&tree_pred_vars&i
195244    +      %end;
195245    +    %end;
195246    +    );
195247    +    by node;
195248    +    if _a;
195249    +  run;
195251    +  proc sort data=tempoutpath; by node descending varname descending numeric_value;
195251   !+run;
195253    +  data _null_;
195254    +    file x;
195255    +    set tempoutpath;
195256    +    by node descending varname;
195257    +    retain origvar oldnode string;
195258    +    length origvar $32 oldnode 8 string $200;
195260    +    if _N_ = 1 then do;
195261    +      origvar = varname;
195262    +      oldnode = node;
195263    +    end;
195265    +    if first.node then do;
195266    +       put "&EM_CODEBAR";
195267    +       put " Node = " node;
195268    +       put "&EM_CODEBAR";
195269    +    end;
195271    +      if first.varname then do;
195272    +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
195273    +            if MISSING(CHARACTER_VALUE) then do;
195274    +             if NUMERIC_VALUE ne .  then do;
195275    +              if ^first.node then do;
195276    +                string= "AND "|| strip(varname)||" "||strip(relation)||"
195276   !+"||strip(numeric_value);
195277    +              end;
195278    +              else do;
195279    +                string= "if "|| strip(varname)||" "||strip(relation)||"
195279   !+"||strip(numeric_value);
195280    +              end;
195281    +             end;
195282    +            end;
195283    +            else do;
195284    +              if ^first.node then do;
195285    +                string= "AND "|| strip(varname)||" "||strip(relation)||"
195285   !+"||strip(character_value);
195286    +              end;
195287    +              else do;
195288    +                string= "if "|| strip(varname)||" "||strip(relation)||"
195288   !+"||strip(character_value);
195289    +              end;
195290    +             end;
195291    +         end;
195292    +         else if RELATION in ("=") then do;
195293    +            if ^first.node then do;
195294    +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
195295    +            end;
195296    +            else do;
195297    +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
195298    +            end;
195299    +         end;
195300    +         else if RELATION in ("ISMISSING") then do;
195301    +            if ^first.node then do;
195302    +              string = " AND "|| strip(varname) || " equals Missing";
195303    +            end;
195304    +            else do;
195305    +              string = "if "|| strip(varname) ||" equals Missing";
195306    +            end;
195307    +         end;
195308    +         else if RELATION in ("ISNOTMISSING") then do;
195309    +            if ^first.node then do;
195310    +              string = " AND "|| strip(varname) || " equals All Values";
195311    +            end;
195312    +            else do;
195313    +              string = "if "|| strip(varname) ||" equals All Values";
195314    +            end;
195315    +         end;
195316    +         if ^missing(varname) then origvar = varname;
195317    +         oldnode=node;
195319    +      end;
195320    +      else do;
195321    +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
195322    +          if MISSING(CHARACTER_VALUE) then do;
195323    +           if  NUMERIC_VALUE ne .  then do;
195324    +            if ^MISSING(string) then
195325    +              string= strip(string)||" AND "|| strip(varname)||"
195325   !+"||strip(relation)||" "||strip(numeric_value);
195326    +            else
195327    +              string= " if "|| strip(varname)||" "||strip(relation)||"
195327   !+"||strip(numeric_value);
195328    +           end;
195329    +          end;
195330    +          else do;
195331    +            if ^MISSING(string) then
195332    +              string= strip(string)||" AND "|| strip(varname)||"
195332   !+"||strip(relation)||" "||strip(character_value);
195333    +            else
195334    +              string= " if "|| strip(varname)||" "||strip(relation)||"
195334   !+"||strip(character_value);
195335    +          end;
195337    +         end;
195338    +         else if RELATION in ("=") then do;
195339    +           string = strip(string)||", "||strip(character_value);
195340    +         end;
195341    +         else if RELATION in ("ISMISSING") then do;
195343    +         end;
195344    +         if ^missing(varname) then origvar = varname;
195345    +         oldnode=node;
195346    +      end;
195347    +      if last.varname then do;
195348    +         if RELATION in ("ISMISSING") then do;
195349    +           if ^first.varname then do;
195350    +             string = strip(string) || " or MISSING";
195351    +           end;
195352    +         end;
195353    +         put string;
195354    +         if ^missing(varname) then origvar = varname;
195355    +         oldnode=node;
195356    +      end;
195358    +      if last.node then do;
195359    +         put "then ";
195360    +         put " Tree Node Identifier   = " node;
195362    +         %if "&nprior_flag" ne "." %then %do;
195363    +           put " Number of Observations = " NPRIORS;
195364    +         %end;
195365    +         %else %do;
195366    +           put " Number of Observations = " N;
195367    +         %end;
195369    +         %if &numpred gt 0 %then %do;
195370    +           %do i=1 %to &numpred;
195371    +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
195372    +           %end;
195373    +         %end;
195375    +         put " ";
195376    +         if ^missing(varname) then origvar = varname;
195377    +         oldnode=node;
195378    +      end;
195380    +  run;
195382    +  proc datasets lib=work nolist;
195383    +    delete tempoutpath outnodes;
195384    +  run;
195386    +  %doendm:
195387    +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1
property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS1.Part2_TRAIN
classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class Attrition_Flag;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Records processed = 7088   Memory used = 511K.
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree2 / view=EMWS1.em_Tree2;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part2_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =G_Contacts_Count_12_mon G_Customer_Age G_Months_Inactive_12_mon
G_Months_on_book G_Total_Relationship_Count G_Total_Trans_Ct RANGE_LOG_Total_Trans_Amt
RANGE_SQRT_Avg_Utilization_Ratio RANGE_SQRT_Total_Amt_Chng_Q4_Q1
RANGE_SQRT_Total_Ct_Chng_Q4_Q1 RANGE_Total_Revolving_Bal Attrition_Flag Attrition_Flag );
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree2;
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree2_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree2_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL",
"ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!'
'!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS1.em_Tree2 dmdbcat=_treeDMDB
classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class Attrition_Flag(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target Attrition_Flag
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Records processed = 7088   Memory used = 511K.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.11 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree2 Leafsize = 5 MinCatSize = 5
MaxBranch = 4 MaxDepth = 8
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Maxrules = 5 Maxsurrs = 0 Missing=USEINSEARCH
Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   RANGE_LOG_Total_Trans_Amt RANGE_SQRT_Avg_Utilization_Ratio
RANGE_SQRT_Total_Amt_Chng_Q4_Q1 RANGE_SQRT_Total_Ct_Chng_Q4_Q1 RANGE_Total_Revolving_Bal
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   G_Contacts_Count_12_mon G_Customer_Age G_Months_Inactive_12_mon
G_Months_on_book G_Total_Relationship_Count G_Total_Trans_Ct
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Attrition_Flag
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=GINI;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part2_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=MISC
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1562783 kilobytes of physical memory.
NOTE: Will use 7088 out of 7088 training cases.
NOTE: Using memory pool with 162713600 bytes.
NOTE: Passed training data 14 times.
NOTE: Training used 2166088 bytes of work memory.
NOTE: The subtree sequence contains 251 subtrees. The largest has 378 nodes and 254 leaves.
NOTE: Using subtree with 133 nodes and 96 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 133 nodes and 96 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 96.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree2_EMTREE SEQUENCE=EMWS1.Tree2_OUTSEQ
IMPORTANCE=EMWS1.Tree2_OUTIMPORT NODESTAT=EMWS1.Tree2_OUTNODES SUMMARY=EMWS1.Tree2_OUTSUMMARY
STATSBYNODE=EMWS1.Tree2_OUTSTATS TOPOLOGY=EMWS1.Tree2_OUTTOPOLOGY
Pathlistnonmissing=EMWS1.Tree2_OUTPATH RULES = EMWS1.Tree2_OUTRULES ;
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 11 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 12396 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 133 observations and 24 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 700 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 3059 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 251 observations and 20 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 931 observations and 5 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 133 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code
file="D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\TREEFLOW.sas" res group=Tree2
;
NOTE: External file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\TREEFLOW.sas
      opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code
file="D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas" nores
group=Tree2 ;
NOTE: External file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas
      opened.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree2 out=_NULL_ outfit=work.fit_train
role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part2_VALIDATE out=_NULL_
outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part2_TEST out=_NULL_
outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.85 seconds
      cpu time            0.84 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.86 seconds
      cpu time            0.85 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree2_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree2_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Attrition_Flag";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt" encoding='utf-8'
NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $46;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree2_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 700 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 700 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set
EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)),
strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree2_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 700 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 700 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree2_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 133 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 133 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS
P_Attrition_Flag1 P_Attrition_Flag0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 700 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 133 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 700 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 700 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 700 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF:
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF:
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||"
"||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||"
"||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Attrition_Flag=1 = " P_Attrition_Flag1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Attrition_Flag=0 = " P_Attrition_Flag0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=09Apr2022:15:10:53,
      Create Time=09Apr2022:15:10:53
 
NOTE: 1202 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 133.
NOTE: There were 700 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48112029558099;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195389
195390     *------------------------------------------------------------*;
195391     * End TRAIN: Tree2;
195392     *------------------------------------------------------------*;
 
195393     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
195394     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
195395     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195396     ;
MPRINT(EM_DIAGRAM):   ;
195397     ;
MPRINT(EM_DIAGRAM):   ;
195398     ;
MPRINT(EM_DIAGRAM):   ;
195399     ;
MPRINT(EM_DIAGRAM):   ;
195400     quit;
MPRINT(EM_DIAGRAM):   quit;
195401     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195402     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
195403     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195404     /*; *"; *'; */
195405     ;
MPRINT(EM_DIAGRAM):   ;
195406     run;
MPRINT(EM_DIAGRAM):   run;
195407     quit;
MPRINT(EM_DIAGRAM):   quit;
195408     /* Reset EM Options */
195409     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
195410     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
195411     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
195412     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
195413     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
195414     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:10:54" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 09, 2022
Time:                15:10:54
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1TE8A8W "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1TE8A8W new;
MPRINT(EM_DIAGRAM):   run;
195516     %let EMEXCEPTIONSTRING=;
195517     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
195518     * SCORE: Tree2;
MPRINT(EM_DIAGRAM):   * SCORE: Tree2;
195519     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195520     %let EM_ACTION = SCORE;
195521     %let syscc = 0;
195522     %macro main;
195523
195524       %if %upcase(&EM_ACTION) = CREATE %then %do;
195525         filename temp catalog 'sashelp.emmodl.tree_create.source';
195526         %include temp;
195527         filename temp;
195528
195529         %em_tree_create;
195530       %end;
195531
195532        %else
195533        %if %upcase(&EM_ACTION) = TRAIN %then %do;
195534
195535            filename temp catalog 'sashelp.emmodl.tree_train.source';
195536            %include temp;
195537            filename temp;
195538            %em_tree_train;
195539        %end;
195540
195541       %else
195542       %if %upcase(&EM_ACTION) = SCORE %then %do;
195543         filename temp catalog 'sashelp.emmodl.tree_score.source';
195544         %include temp;
195545         filename temp;
195546
195547         %em_tree_score;
195548
195549       %end;
195550
195551       %else
195552       %if %upcase(&EM_ACTION) = REPORT %then %do;
195553
195554            filename temp catalog 'sashelp.emmodl.tree_report.source';
195555            %include temp;
195556            filename temp;
195557
195558            %em_tree_report;
195559        %end;
195560
195561       %else
195562       %if %upcase(&EM_ACTION) = OPENINT %then %do;
195563
195564            filename temp catalog 'sashelp.emmodl.tree_actions.source';
195565            %include temp;
195566            filename temp;
195567            %EM_TREE_OPENTREEVIEWER;
195568
195569        %end;
195570
195571       %else
195572       %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
195573
195574            filename temp catalog 'sashelp.emmodl.tree_actions.source';
195575            %include temp;
195576            filename temp;
195577            %EM_TREE_CLOSETREEVIEWER;
195578
195579        %end;
195580
195581
195582        %doendm:
195583     %mend main;
195584
195585     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
195587    +%macro em_tree_score;
195589    +   /* determine if multiple targets will be processed */
195590    +   %let em_tree_multipleTargets=N;
195591    +   %let em_tree_numTarget=1;
195592    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
195593    +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
195594    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
195595    +         %let em_tree_multipleTargets=N;
195596    +      %end;
195597    +      %else %do;
195598    +         /* create macro array of targets  */
195599    +         data _null_;
195600    +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
195601    +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
195602    +           if eof then
195603    +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
195604    +        run;
195606    +        %if &em_tree_numTarget gt 1 %then %do;
195607    +           %let em_tree_multipleTargets=Y;
195608    +        %end;
195609    +      %end;
195610    +   %end;
195612    +   /* build flow and publish scoring code */
195613    +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
195614    +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
195616    +   filename treeflow "&EM_USER_TREEFLOW";
195617    +   filename treepub "&EM_USER_TREEPUBLISH";
195619    +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
195620    +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
195622    +   %em_copyfile(infref=treeflow, outfref=flowref);
195623    +   %em_copyfile(infref=treepub, outfref=pubref);
195625    +   filename treeflow;
195626    +   filename treepub;
195628    +   /* if priors are used, add code to generate unadjusted residuals in export */
195629    +   %let useAdjPriors = N;
195630    +   data _null_;
195631    +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
195632    +     if USE="Y" then call symput('useAdjPriors', 'Y');
195633    +   run;
195634    +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
195635    +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
195636    +      %include temp;
195637    +      filename temp;
195639    +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
195640    +      filename adjref "&EM_USER_adjResidualCode";
195641    +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
195643    +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
195645    +      filename adjref;
195646    +   %end;
195648    +   /* LEAF */
195649    +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
195650    +      data _null_;
195651    +        file flowref mod;
195652    +        put 'drop _LEAF_;';
195653    +      run;
195655    +      data _null_;
195656    +        file pubref mod;
195657    +        put 'drop _LEAF_;';
195658    +      run;
195660    +   %end;
195662    +   filename flowref;
195663    +   filename pubref;
195665    +   /* em_metachange code */
195666    +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
195667    +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
195668    +   %end;
195670    +   /* variable selection based on importance stat    */
195671    +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
195672    +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
195673    +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
195674    +     %let varnum = %sysfunc(varnum(&dsid, NAME));
195675    +     %let obs = %sysfunc(fetch(&dsid));
195676    +     %do %while(&obs=0);
195677    +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
195678    +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
195679    +       %EM_METACHANGE(name=&varname, role=REJECTED);
195680    +       %let obs = %sysfunc(fetch(&dsid));
195681    +     %end;
195682    +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
195683    +   %end;
195685    +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
195686    +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
195687    +    %let tree_pred_vars = ;
195688    +    %let tree_pred_lvl =;
195689    +    %let numpred= 0;
195691    +    data _null_;
195692    +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
195693    +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
195694    +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
195695    +     if eof then
195696    +       call symput('numpred', strip(put(_N_, BEST.)));
195697    +    run;
195698    +   %end;
195700    +   %if &numpred ne 0 %then %do;
195701    +    %do i=1 %to &numpred;
195702    +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
195703    +      %EM_METACHANGE(name=&qpred, role=ASSESS);
195704    +    %end;
195705    +   %end;
195707    +   /* determine if multiple targets will be processed */
195708    +   %let em_tree_multipleTargets=N;
195709    +   %let em_tree_numTarget=1;
195710    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
195711    +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
195712    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
195713    +         %let em_tree_multipleTargets=N;
195714    +      %end;
195715    +      %else %do;
195716    +        data _null_;
195717    +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
195718    +          if eof then
195719    +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
195720    +        run;
195722    +        %if &em_tree_numTarget gt 1 %then %do;
195723    +           %let em_tree_multipleTargets=Y;
195724    +        %end;
195725    +     %end;
195726    +   %end;
195728    +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
195729    +   %if "&em_tree_multipleTargets" eq "N" %then %do;
195731    +      /* variable importance */
195732    +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
195733    +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
195735    +         %let validexist=0;
195736    +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
195737    +           %let validexist=1;
195738    +         %end;
195740    +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
195741    +         /* and the columns may not be generated                                                                                 */
195742    +         %let em_tree_cvexists=;
195743    +         %let em_tree_surrexists=.;
195744    +         data _null_;
195745    +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
195746    +            if eof then do ;
195747    +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
195748    +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
195749    +            end;
195750    +         run;
195752    +         data &EM_USER_OUTIMPORT;
195753    +            set &EM_USER_OUTIMPORT;
195755    +            /* format columns based on Precison value specified */
195756    +            format importance 15.&EM_PROPERTY_PRECISION
195757    +                 %if &validexist %then %do;
195758    +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
195759    +                 %end;
195760    +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
195761    +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
195762    +                 %end;
195763    +            ;
195764    +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
195765    +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
195766    +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
195767    +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
195768    +                 %if "&em_tree_surrexists" ne "" %then %do;
195769    +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
195770    +                 %end;
195771    +                 %if &validexist %then %do;
195772    +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
195773    +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
195774    +                 %end;
195775    +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
195776    +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
195777    +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
195778    +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
195779    +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
195780    +                 %end;
195781    +            ;
195782    +         run;
195784    +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
195785    +      %end;
195786    +   %end;
195788    +   %doendm:
195789    +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file FLOWREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09Apr2022:15:10:53,
      Create Time=09Apr2022:15:10:53
 
NOTE: 1406 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 76.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PUBREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09Apr2022:15:10:54,
      Create Time=09Apr2022:15:10:54
 
NOTE: 1384 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 76.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file FLOWREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=62973,
      Last Modified=09Apr2022:15:10:54,
      Create Time=09Apr2022:15:10:53
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file PUBREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=62189,
      Last Modified=09Apr2022:15:10:54,
      Create Time=09Apr2022:15:10:54
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("G_Contacts_Count_12_mon         ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("G_Months_on_book                ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("G_Months_Inactive_12_mon        ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Attrition_Flag1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Attrition_Flag0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree2_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data EMWS1.Tree2_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree2_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training
Importance" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance" CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 11 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11126259393583;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195790
195791     *------------------------------------------------------------*;
195792     * End SCORE: Tree2;
195793     *------------------------------------------------------------*;
 
195794     proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
195795     by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
195796     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
195797     filename x "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
195798     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
195799     file x;
MPRINT(EM_DIAGRAM):   file x;
195800     put 'if upcase(NAME) = "G_CONTACTS_COUNT_12_MON" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "G_CONTACTS_COUNT_12_MON" then do;';
195801     put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
195802     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
195803     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
195804     put 'if upcase(NAME) = "G_MONTHS_INACTIVE_12_MON" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "G_MONTHS_INACTIVE_12_MON" then do;';
195805     put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
195806     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
195807     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
195808     put 'if upcase(NAME) = "G_MONTHS_ON_BOOK" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "G_MONTHS_ON_BOOK" then do;';
195809     put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
195810     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
195811     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
195812     put 'if upcase(NAME) = "Q_ATTRITION_FLAG0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_ATTRITION_FLAG0" then do;';
195813     put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
195814     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
195815     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
195816     put 'if upcase(NAME) = "Q_ATTRITION_FLAG1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_ATTRITION_FLAG1" then do;';
195817     put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
195818     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
195819     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
195820     put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
195821     put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
195822     put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
195823     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
195824     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file X is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=09Apr2022:15:10:54,
      Create Time=29Mar2022:21:42:22
 
NOTE: 24 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
195825     filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
195826     filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
195827     *------------------------------------------------------------*;
195828     * Tree2: Scoring DATA data;
195829     *------------------------------------------------------------*;
195830     data EMWS1.Tree2_TRAIN
195831     / view=EMWS1.Tree2_TRAIN
195832     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_TRAIN / view=EMWS1.Tree2_TRAIN ;
195833     set EMWS1.Part2_TRAIN
195834     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part2_TRAIN ;
195835     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
195836    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
195837    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
195838    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
195839    +
195840    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
195841    +LENGTH F_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH F_Attrition_Flag $ 17;
195842    +LENGTH I_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH I_Attrition_Flag $ 17;
195843    +LENGTH U_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH U_Attrition_Flag $ 17;
195844    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
195845    +
195846    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
195847    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
195848    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
195849    +label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
195850    +label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
195851    +label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
195852    +label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
195853    +label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
195854    +label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
195855    +label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
195856    +label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
195857    +label F_Attrition_Flag = 'From: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label F_Attrition_Flag = 'From: Attrition_Flag' ;
195858    +label I_Attrition_Flag = 'Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label I_Attrition_Flag = 'Into: Attrition_Flag' ;
195859    +label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
195860    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
195861    +
195862    +
195863    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
195864    +LENGTH _ARBFMT_17 $     17; DROP _ARBFMT_17;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_17 $ 17;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_17;
195865    +_ARBFMT_17 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = ' ';
195866    +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
195867    +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
195868    +
195869    +
195870    +_ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
195871    + %DMNORMCP( _ARBFMT_17, F_Attrition_Flag );
MPRINT(DMNORMCP):   F_Attrition_Flag=dmnorm(_ARBFMT_17,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
195872    +
195873    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
195874    +IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
195875    +  RANGE_LOG_Total_Trans_Amt  <     0.03868641322523 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03868641322523 THEN DO;
195876    +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
195877    +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
195878    +  P_Attrition_Flag0  =     0.09649122807017;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.09649122807017;
195879    +  P_Attrition_Flag1  =     0.90350877192982;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.90350877192982;
195880    +  Q_Attrition_Flag0  =     0.09649122807017;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.09649122807017;
195881    +  Q_Attrition_Flag1  =     0.90350877192982;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.90350877192982;
195882    +  V_Attrition_Flag0  =     0.16129032258064;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16129032258064;
195883    +  V_Attrition_Flag1  =     0.83870967741935;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83870967741935;
195884    +  I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
195885    +  U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
195886    +  END;
MPRINT(EM_DIAGRAM):   END;
195887    +ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
195888    +      0.03868641322523 <= RANGE_LOG_Total_Trans_Amt  AND
195889    +  RANGE_LOG_Total_Trans_Amt  <     0.11189168159095 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.03868641322523 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.11189168159095 THEN DO;
195890    +  _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
195891    +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
195892    +  IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
195893    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
195894    +          0.37739607587341 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
195895    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39380951152569 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.37739607587341 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39380951152569 THEN DO;
195896    +      _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
195897    +      _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
195898    +      P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
195899    +      P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
195900    +      Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
195901    +      Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
195902    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
195903    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
195904    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
195905    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
195906    +      END;
MPRINT(EM_DIAGRAM):   END;
195907    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
195908    +          0.39380951152569 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
195909    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.51192553209568 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.39380951152569 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.51192553209568 THEN DO;
195910    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
195911    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.3736695996306 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.3736695996306 THEN DO;
195912    +        _NODE_  =                   71;
MPRINT(EM_DIAGRAM):   _NODE_ = 71;
195913    +        _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
195914    +        P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
195915    +        P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
195916    +        Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
195917    +        Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
195918    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
195919    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
195920    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
195921    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
195922    +        END;
MPRINT(EM_DIAGRAM):   END;
195923    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
195924    +            0.49243977177414 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
195925    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.52686491804492 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49243977177414 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.52686491804492 THEN DO;
195926    +        _NODE_  =                   73;
MPRINT(EM_DIAGRAM):   _NODE_ = 73;
195927    +        _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
195928    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
195929    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
195930    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
195931    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
195932    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
195933    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
195934    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
195935    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
195936    +        END;
MPRINT(EM_DIAGRAM):   END;
195937    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
195938    +            0.52686491804492 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.52686491804492 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
195939    +        _NODE_  =                   74;
MPRINT(EM_DIAGRAM):   _NODE_ = 74;
195940    +        _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
195941    +        P_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85714285714285;
195942    +        P_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.14285714285714;
195943    +        Q_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85714285714285;
195944    +        Q_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.14285714285714;
195945    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
195946    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
195947    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
195948    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
195949    +        END;
MPRINT(EM_DIAGRAM):   END;
195950    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
195951    +        _NODE_  =                   72;
MPRINT(EM_DIAGRAM):   _NODE_ = 72;
195952    +        _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
195953    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
195954    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
195955    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
195956    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
195957    +        V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
195958    +        V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
195959    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
195960    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
195961    +        END;
MPRINT(EM_DIAGRAM):   END;
195962    +      END;
MPRINT(EM_DIAGRAM):   END;
195963    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
195964    +          0.51192553209568 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.51192553209568 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
195965    +      _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
195966    +      _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
195967    +      P_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85714285714285;
195968    +      P_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.14285714285714;
195969    +      Q_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85714285714285;
195970    +      Q_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.14285714285714;
195971    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
195972    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
195973    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
195974    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
195975    +      END;
MPRINT(EM_DIAGRAM):   END;
195976    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
195977    +      _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
195978    +      _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
195979    +      P_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05555555555555;
195980    +      P_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94444444444444;
195981    +      Q_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05555555555555;
195982    +      Q_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94444444444444;
195983    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
195984    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
195985    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
195986    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
195987    +      END;
MPRINT(EM_DIAGRAM):   END;
195988    +    END;
MPRINT(EM_DIAGRAM):   END;
195989    +  ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
195990    +    IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
195991    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.06895472974897 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.06895472974897 THEN DO;
195992    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
195993    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.26277731155559 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.26277731155559 THEN DO;
195994    +        _NODE_  =                   77;
MPRINT(EM_DIAGRAM):   _NODE_ = 77;
195995    +        _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
195996    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
195997    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
195998    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
195999    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
196000    +        V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
196001    +        V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
196002    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196003    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196004    +        END;
MPRINT(EM_DIAGRAM):   END;
196005    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196006    +            0.41754003895588 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
196007    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.46047296215175 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.41754003895588 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.46047296215175 THEN DO;
196008    +        _NODE_  =                   79;
MPRINT(EM_DIAGRAM):   _NODE_ = 79;
196009    +        _LEAF_  =                   16;
MPRINT(EM_DIAGRAM):   _LEAF_ = 16;
196010    +        P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
196011    +        P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
196012    +        Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
196013    +        Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
196014    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196015    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196016    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196017    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196018    +        END;
MPRINT(EM_DIAGRAM):   END;
196019    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196020    +            0.46047296215175 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46047296215175 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
196021    +        _NODE_  =                   80;
MPRINT(EM_DIAGRAM):   _NODE_ = 80;
196022    +        _LEAF_  =                   17;
MPRINT(EM_DIAGRAM):   _LEAF_ = 17;
196023    +        P_Attrition_Flag0  =     0.92857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92857142857142;
196024    +        P_Attrition_Flag1  =     0.07142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.07142857142857;
196025    +        Q_Attrition_Flag0  =     0.92857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92857142857142;
196026    +        Q_Attrition_Flag1  =     0.07142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.07142857142857;
196027    +        V_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.85714285714285;
196028    +        V_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.14285714285714;
196029    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196030    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196031    +        END;
MPRINT(EM_DIAGRAM):   END;
196032    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196033    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196034    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.35658658871759 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.35658658871759 THEN DO;
196035    +          _NODE_  =                  186;
MPRINT(EM_DIAGRAM):   _NODE_ = 186;
196036    +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
196037    +          P_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.125;
196038    +          P_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.875;
196039    +          Q_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.125;
196040    +          Q_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.875;
196041    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196042    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196043    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196044    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196045    +          END;
MPRINT(EM_DIAGRAM):   END;
196046    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196047    +              0.43860103445126 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
196048    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.50400402406364 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43860103445126 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.50400402406364 THEN DO;
196049    +          _NODE_  =                  188;
MPRINT(EM_DIAGRAM):   _NODE_ = 188;
196050    +          _LEAF_  =                   14;
MPRINT(EM_DIAGRAM):   _LEAF_ = 14;
196051    +          P_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.75;
196052    +          P_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.25;
196053    +          Q_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.75;
196054    +          Q_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.25;
196055    +          V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
196056    +          V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
196057    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196058    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196059    +          END;
MPRINT(EM_DIAGRAM):   END;
196060    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196061    +              0.50400402406364 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.50400402406364 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
196062    +          _NODE_  =                  189;
MPRINT(EM_DIAGRAM):   _NODE_ = 189;
196063    +          _LEAF_  =                   15;
MPRINT(EM_DIAGRAM):   _LEAF_ = 15;
196064    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
196065    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
196066    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
196067    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
196068    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196069    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196070    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196071    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196072    +          END;
MPRINT(EM_DIAGRAM):   END;
196073    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196074    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196075    +            RANGE_LOG_Total_Trans_Amt  <     0.07601985120135 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.07601985120135 THEN DO;
196076    +            _NODE_  =                  319;
MPRINT(EM_DIAGRAM):   _NODE_ = 319;
196077    +            _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
196078    +            P_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.71428571428571;
196079    +            P_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.28571428571428;
196080    +            Q_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.71428571428571;
196081    +            Q_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.28571428571428;
196082    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196083    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196084    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196085    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196086    +            END;
MPRINT(EM_DIAGRAM):   END;
196087    +          ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196088    +                0.07601985120135 <= RANGE_LOG_Total_Trans_Amt  AND
196089    +            RANGE_LOG_Total_Trans_Amt  <     0.08497717470581 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.07601985120135 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.08497717470581 THEN DO;
196090    +            _NODE_  =                  320;
MPRINT(EM_DIAGRAM):   _NODE_ = 320;
196091    +            _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
196092    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
196093    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
196094    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
196095    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
196096    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196097    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196098    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196099    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196100    +            END;
MPRINT(EM_DIAGRAM):   END;
196101    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196102    +            _NODE_  =                  321;
MPRINT(EM_DIAGRAM):   _NODE_ = 321;
196103    +            _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
196104    +            P_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.08333333333333;
196105    +            P_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.91666666666666;
196106    +            Q_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.08333333333333;
196107    +            Q_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.91666666666666;
196108    +            V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196109    +            V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196110    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196111    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196112    +            END;
MPRINT(EM_DIAGRAM):   END;
196113    +          END;
MPRINT(EM_DIAGRAM):   END;
196114    +        END;
MPRINT(EM_DIAGRAM):   END;
196115    +      END;
MPRINT(EM_DIAGRAM):   END;
196116    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
196117    +          0.73554854712342 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
196118    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.93801897378516 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.73554854712342 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.93801897378516 THEN DO;
196119    +      _NODE_  =                   32;
MPRINT(EM_DIAGRAM):   _NODE_ = 32;
196120    +      _LEAF_  =                   19;
MPRINT(EM_DIAGRAM):   _LEAF_ = 19;
196121    +      P_Attrition_Flag0  =     0.91891891891891;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.91891891891891;
196122    +      P_Attrition_Flag1  =     0.08108108108108;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08108108108108;
196123    +      Q_Attrition_Flag0  =     0.91891891891891;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.91891891891891;
196124    +      Q_Attrition_Flag1  =     0.08108108108108;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08108108108108;
196125    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196126    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196127    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196128    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196129    +      END;
MPRINT(EM_DIAGRAM):   END;
196130    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
196131    +          0.93801897378516 <= RANGE_SQRT_Avg_Utilization_Ratio  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.93801897378516 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
196132    +      _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
196133    +      _LEAF_  =                   20;
MPRINT(EM_DIAGRAM):   _LEAF_ = 20;
196134    +      P_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.28571428571428;
196135    +      P_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.71428571428571;
196136    +      Q_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.28571428571428;
196137    +      Q_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.71428571428571;
196138    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196139    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196140    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196141    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196142    +      END;
MPRINT(EM_DIAGRAM):   END;
196143    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196144    +      _NODE_  =                   31;
MPRINT(EM_DIAGRAM):   _NODE_ = 31;
196145    +      _LEAF_  =                   18;
MPRINT(EM_DIAGRAM):   _LEAF_ = 18;
196146    +      P_Attrition_Flag0  =     0.93298969072164;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93298969072164;
196147    +      P_Attrition_Flag1  =     0.06701030927835;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06701030927835;
196148    +      Q_Attrition_Flag0  =     0.93298969072164;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93298969072164;
196149    +      Q_Attrition_Flag1  =     0.06701030927835;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06701030927835;
196150    +      V_Attrition_Flag0  =     0.88135593220339;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88135593220339;
196151    +      V_Attrition_Flag1  =     0.11864406779661;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11864406779661;
196152    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196153    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196154    +      END;
MPRINT(EM_DIAGRAM):   END;
196155    +    END;
MPRINT(EM_DIAGRAM):   END;
196156    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196157    +    IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196158    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.30595739522413 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.30595739522413 THEN DO;
196159    +      _NODE_  =                   34;
MPRINT(EM_DIAGRAM):   _NODE_ = 34;
196160    +      _LEAF_  =                   21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 21;
196161    +      P_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.33333333333333;
196162    +      P_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.66666666666666;
196163    +      Q_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.33333333333333;
196164    +      Q_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.66666666666666;
196165    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196166    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196167    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196168    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196169    +      END;
MPRINT(EM_DIAGRAM):   END;
196170    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196171    +          0.30595739522413 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
196172    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.32936001420324 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.30595739522413 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.32936001420324 THEN DO;
196173    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196174    +            0.08965890365538 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.08965890365538 <= RANGE_LOG_Total_Trans_Amt THEN DO;
196175    +        _NODE_  =                   92;
MPRINT(EM_DIAGRAM):   _NODE_ = 92;
196176    +        _LEAF_  =                   23;
MPRINT(EM_DIAGRAM):   _LEAF_ = 23;
196177    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
196178    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
196179    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
196180    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
196181    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196182    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196183    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196184    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196185    +        END;
MPRINT(EM_DIAGRAM):   END;
196186    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196187    +        _NODE_  =                   91;
MPRINT(EM_DIAGRAM):   _NODE_ = 91;
196188    +        _LEAF_  =                   22;
MPRINT(EM_DIAGRAM):   _LEAF_ = 22;
196189    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
196190    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
196191    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
196192    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
196193    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
196194    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
196195    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196196    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196197    +        END;
MPRINT(EM_DIAGRAM):   END;
196198    +      END;
MPRINT(EM_DIAGRAM):   END;
196199    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196200    +          0.32936001420324 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
196201    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.4029256733266 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.32936001420324 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.4029256733266 THEN DO;
196202    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196203    +            0.07868249310586 <= RANGE_LOG_Total_Trans_Amt  AND
196204    +        RANGE_LOG_Total_Trans_Amt  <      0.0930893358681 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.07868249310586 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.0930893358681 THEN DO;
196205    +        _NODE_  =                   94;
MPRINT(EM_DIAGRAM):   _NODE_ = 94;
196206    +        _LEAF_  =                   25;
MPRINT(EM_DIAGRAM):   _LEAF_ = 25;
196207    +        P_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.89361702127659;
196208    +        P_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1063829787234;
196209    +        Q_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.89361702127659;
196210    +        Q_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1063829787234;
196211    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196212    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196213    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196214    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196215    +        END;
MPRINT(EM_DIAGRAM):   END;
196216    +      ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196217    +             0.0930893358681 <= RANGE_LOG_Total_Trans_Amt  AND
196218    +        RANGE_LOG_Total_Trans_Amt  <     0.10593732785727 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.0930893358681 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.10593732785727 THEN DO;
196219    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196220    +              0.37882399682161 <= RANGE_Total_Revolving_Bal  AND
196221    +          RANGE_Total_Revolving_Bal  <     0.50258243941199 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.37882399682161 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.50258243941199 THEN DO;
196222    +          _NODE_  =                  210;
MPRINT(EM_DIAGRAM):   _NODE_ = 210;
196223    +          _LEAF_  =                   27;
MPRINT(EM_DIAGRAM):   _LEAF_ = 27;
196224    +          P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
196225    +          P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
196226    +          Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
196227    +          Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
196228    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
196229    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
196230    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196231    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196232    +          END;
MPRINT(EM_DIAGRAM):   END;
196233    +        ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196234    +              0.50258243941199 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.50258243941199 <= RANGE_Total_Revolving_Bal THEN DO;
196235    +          _NODE_  =                  211;
MPRINT(EM_DIAGRAM):   _NODE_ = 211;
196236    +          _LEAF_  =                   28;
MPRINT(EM_DIAGRAM):   _LEAF_ = 28;
196237    +          P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
196238    +          P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
196239    +          Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
196240    +          Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
196241    +          V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
196242    +          V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
196243    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196244    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196245    +          END;
MPRINT(EM_DIAGRAM):   END;
196246    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196247    +          _NODE_  =                  209;
MPRINT(EM_DIAGRAM):   _NODE_ = 209;
196248    +          _LEAF_  =                   26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 26;
196249    +          P_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.08333333333333;
196250    +          P_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.91666666666666;
196251    +          Q_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.08333333333333;
196252    +          Q_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.91666666666666;
196253    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
196254    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
196255    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196256    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196257    +          END;
MPRINT(EM_DIAGRAM):   END;
196258    +        END;
MPRINT(EM_DIAGRAM):   END;
196259    +      ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196260    +            0.10593732785727 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.10593732785727 <= RANGE_LOG_Total_Trans_Amt THEN DO;
196261    +        _NODE_  =                   96;
MPRINT(EM_DIAGRAM):   _NODE_ = 96;
196262    +        _LEAF_  =                   29;
MPRINT(EM_DIAGRAM):   _LEAF_ = 29;
196263    +        P_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.21428571428571;
196264    +        P_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.78571428571428;
196265    +        Q_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.21428571428571;
196266    +        Q_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.78571428571428;
196267    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196268    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196269    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196270    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196271    +        END;
MPRINT(EM_DIAGRAM):   END;
196272    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196273    +        _NODE_  =                   93;
MPRINT(EM_DIAGRAM):   _NODE_ = 93;
196274    +        _LEAF_  =                   24;
MPRINT(EM_DIAGRAM):   _LEAF_ = 24;
196275    +        P_Attrition_Flag0  =     0.94782608695652;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.94782608695652;
196276    +        P_Attrition_Flag1  =     0.05217391304347;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.05217391304347;
196277    +        Q_Attrition_Flag0  =     0.94782608695652;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.94782608695652;
196278    +        Q_Attrition_Flag1  =     0.05217391304347;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.05217391304347;
196279    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196280    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196281    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196282    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196283    +        END;
MPRINT(EM_DIAGRAM):   END;
196284    +      END;
MPRINT(EM_DIAGRAM):   END;
196285    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196286    +      _NODE_  =                   37;
MPRINT(EM_DIAGRAM):   _NODE_ = 37;
196287    +      _LEAF_  =                   30;
MPRINT(EM_DIAGRAM):   _LEAF_ = 30;
196288    +      P_Attrition_Flag0  =     0.97118155619596;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.97118155619596;
196289    +      P_Attrition_Flag1  =     0.02881844380403;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.02881844380403;
196290    +      Q_Attrition_Flag0  =     0.97118155619596;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.97118155619596;
196291    +      Q_Attrition_Flag1  =     0.02881844380403;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.02881844380403;
196292    +      V_Attrition_Flag0  =     0.96938775510204;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.96938775510204;
196293    +      V_Attrition_Flag1  =     0.03061224489795;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.03061224489795;
196294    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196295    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196296    +      END;
MPRINT(EM_DIAGRAM):   END;
196297    +    END;
MPRINT(EM_DIAGRAM):   END;
196298    +  END;
MPRINT(EM_DIAGRAM):   END;
196299    +ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196300    +      0.11189168159095 <= RANGE_LOG_Total_Trans_Amt  AND
196301    +  RANGE_LOG_Total_Trans_Amt  <     0.18180873549344 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11189168159095 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.18180873549344 THEN DO;
196302    +  IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196303    +        0.23122765196662 <= RANGE_Total_Revolving_Bal  AND
196304    +    RANGE_Total_Revolving_Bal  <     0.43365117203019 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.23122765196662 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.43365117203019 THEN DO;
196305    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
196306    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
196307    +    IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ) THEN DO;
196308    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196309    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.44589881136633 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.44589881136633 THEN DO;
196310    +        _NODE_  =                  117;
MPRINT(EM_DIAGRAM):   _NODE_ = 117;
196311    +        _LEAF_  =                   39;
MPRINT(EM_DIAGRAM):   _LEAF_ = 39;
196312    +        P_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.16666666666666;
196313    +        P_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.83333333333333;
196314    +        Q_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.16666666666666;
196315    +        Q_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.83333333333333;
196316    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196317    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196318    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196319    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196320    +        END;
MPRINT(EM_DIAGRAM):   END;
196321    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196322    +            0.49070999374543 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49070999374543 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
196323    +        _NODE_  =                  119;
MPRINT(EM_DIAGRAM):   _NODE_ = 119;
196324    +        _LEAF_  =                   41;
MPRINT(EM_DIAGRAM):   _LEAF_ = 41;
196325    +        P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
196326    +        P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
196327    +        Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
196328    +        Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
196329    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196330    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196331    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196332    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196333    +        END;
MPRINT(EM_DIAGRAM):   END;
196334    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196335    +        _NODE_  =                  118;
MPRINT(EM_DIAGRAM):   _NODE_ = 118;
196336    +        _LEAF_  =                   40;
MPRINT(EM_DIAGRAM):   _LEAF_ = 40;
196337    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
196338    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
196339    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
196340    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
196341    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
196342    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
196343    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196344    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196345    +        END;
MPRINT(EM_DIAGRAM):   END;
196346    +      END;
MPRINT(EM_DIAGRAM):   END;
196347    +    ELSE IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('2' ) THEN DO;
196348    +      _NODE_  =                   43;
MPRINT(EM_DIAGRAM):   _NODE_ = 43;
196349    +      _LEAF_  =                   42;
MPRINT(EM_DIAGRAM):   _LEAF_ = 42;
196350    +      P_Attrition_Flag0  =     0.48148148148148;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.48148148148148;
196351    +      P_Attrition_Flag1  =     0.51851851851851;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.51851851851851;
196352    +      Q_Attrition_Flag0  =     0.48148148148148;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.48148148148148;
196353    +      Q_Attrition_Flag1  =     0.51851851851851;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.51851851851851;
196354    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
196355    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
196356    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196357    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196358    +      END;
MPRINT(EM_DIAGRAM):   END;
196359    +    ELSE IF _ARBFMT_12 IN ('3' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('3' ) THEN DO;
196360    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196361    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.40123192150453 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.40123192150453 THEN DO;
196362    +        _NODE_  =                  123;
MPRINT(EM_DIAGRAM):   _NODE_ = 123;
196363    +        _LEAF_  =                   43;
MPRINT(EM_DIAGRAM):   _LEAF_ = 43;
196364    +        P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
196365    +        P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
196366    +        Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
196367    +        Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
196368    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196369    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196370    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196371    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196372    +        END;
MPRINT(EM_DIAGRAM):   END;
196373    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196374    +        _NODE_  =                  124;
MPRINT(EM_DIAGRAM):   _NODE_ = 124;
196375    +        _LEAF_  =                   44;
MPRINT(EM_DIAGRAM):   _LEAF_ = 44;
196376    +        P_Attrition_Flag0  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.91666666666666;
196377    +        P_Attrition_Flag1  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08333333333333;
196378    +        Q_Attrition_Flag0  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.91666666666666;
196379    +        Q_Attrition_Flag1  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08333333333333;
196380    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
196381    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
196382    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196383    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196384    +        END;
MPRINT(EM_DIAGRAM):   END;
196385    +      END;
MPRINT(EM_DIAGRAM):   END;
196386    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196387    +      _NODE_  =                   45;
MPRINT(EM_DIAGRAM):   _NODE_ = 45;
196388    +      _LEAF_  =                   45;
MPRINT(EM_DIAGRAM):   _LEAF_ = 45;
196389    +      P_Attrition_Flag0  =     0.93650793650793;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93650793650793;
196390    +      P_Attrition_Flag1  =     0.06349206349206;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06349206349206;
196391    +      Q_Attrition_Flag0  =     0.93650793650793;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93650793650793;
196392    +      Q_Attrition_Flag1  =     0.06349206349206;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06349206349206;
196393    +      V_Attrition_Flag0  =     0.82608695652173;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.82608695652173;
196394    +      V_Attrition_Flag1  =     0.17391304347826;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.17391304347826;
196395    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196396    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196397    +      END;
MPRINT(EM_DIAGRAM):   END;
196398    +    END;
MPRINT(EM_DIAGRAM):   END;
196399    +  ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196400    +        0.43365117203019 <= RANGE_Total_Revolving_Bal  AND
196401    +    RANGE_Total_Revolving_Bal  <     0.94656336909018 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.43365117203019 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.94656336909018 THEN DO;
196402    +    IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
196403    +          0.57734961836774 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
196404    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.67857196850263 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.57734961836774 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.67857196850263 THEN DO;
196405    +      _NODE_  =                   47;
MPRINT(EM_DIAGRAM):   _NODE_ = 47;
196406    +      _LEAF_  =                   47;
MPRINT(EM_DIAGRAM):   _LEAF_ = 47;
196407    +      P_Attrition_Flag0  =     0.66037735849056;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66037735849056;
196408    +      P_Attrition_Flag1  =     0.33962264150943;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33962264150943;
196409    +      Q_Attrition_Flag0  =     0.66037735849056;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66037735849056;
196410    +      Q_Attrition_Flag1  =     0.33962264150943;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33962264150943;
196411    +      V_Attrition_Flag0  =     0.84210526315789;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.84210526315789;
196412    +      V_Attrition_Flag1  =      0.1578947368421;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.1578947368421;
196413    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196414    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196415    +      END;
MPRINT(EM_DIAGRAM):   END;
196416    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
196417    +          0.67857196850263 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
196418    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.88446718550085 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.67857196850263 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.88446718550085 THEN DO;
196419    +      _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
196420    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
196421    +      IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
196422    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196423    +              0.63567739372268 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.63567739372268 <= RANGE_Total_Revolving_Bal THEN DO;
196424    +          _NODE_  =                  267;
MPRINT(EM_DIAGRAM):   _NODE_ = 267;
196425    +          _LEAF_  =                   49;
MPRINT(EM_DIAGRAM):   _LEAF_ = 49;
196426    +          P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
196427    +          P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
196428    +          Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
196429    +          Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
196430    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196431    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196432    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196433    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196434    +          END;
MPRINT(EM_DIAGRAM):   END;
196435    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196436    +          _NODE_  =                  266;
MPRINT(EM_DIAGRAM):   _NODE_ = 266;
196437    +          _LEAF_  =                   48;
MPRINT(EM_DIAGRAM):   _LEAF_ = 48;
196438    +          P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
196439    +          P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
196440    +          Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
196441    +          Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
196442    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196443    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196444    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196445    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196446    +          END;
MPRINT(EM_DIAGRAM):   END;
196447    +        END;
MPRINT(EM_DIAGRAM):   END;
196448    +      ELSE IF _ARBFMT_12 IN ('6' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ,'4' ) THEN DO;
196449    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196450    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.35478871362639 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.35478871362639 THEN DO;
196451    +          _NODE_  =                  268;
MPRINT(EM_DIAGRAM):   _NODE_ = 268;
196452    +          _LEAF_  =                   50;
MPRINT(EM_DIAGRAM):   _LEAF_ = 50;
196453    +          P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
196454    +          P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
196455    +          Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
196456    +          Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
196457    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
196458    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
196459    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196460    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196461    +          END;
MPRINT(EM_DIAGRAM):   END;
196462    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196463    +              0.35478871362639 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
196464    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39278572866989 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.35478871362639 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39278572866989 THEN DO;
196465    +          _NODE_  =                  269;
MPRINT(EM_DIAGRAM):   _NODE_ = 269;
196466    +          _LEAF_  =                   51;
MPRINT(EM_DIAGRAM):   _LEAF_ = 51;
196467    +          P_Attrition_Flag0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.55555555555555;
196468    +          P_Attrition_Flag1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.44444444444444;
196469    +          Q_Attrition_Flag0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.55555555555555;
196470    +          Q_Attrition_Flag1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.44444444444444;
196471    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196472    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196473    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196474    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196475    +          END;
MPRINT(EM_DIAGRAM):   END;
196476    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196477    +              0.46338100692678 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46338100692678 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
196478    +          _NODE_  =                  271;
MPRINT(EM_DIAGRAM):   _NODE_ = 271;
196479    +          _LEAF_  =                   53;
MPRINT(EM_DIAGRAM):   _LEAF_ = 53;
196480    +          P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
196481    +          P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
196482    +          Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
196483    +          Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
196484    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196485    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196486    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196487    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196488    +          END;
MPRINT(EM_DIAGRAM):   END;
196489    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196490    +          _NODE_  =                  270;
MPRINT(EM_DIAGRAM):   _NODE_ = 270;
196491    +          _LEAF_  =                   52;
MPRINT(EM_DIAGRAM):   _LEAF_ = 52;
196492    +          P_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.84615384615384;
196493    +          P_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.15384615384615;
196494    +          Q_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.84615384615384;
196495    +          Q_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.15384615384615;
196496    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196497    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196498    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196499    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196500    +          END;
MPRINT(EM_DIAGRAM):   END;
196501    +        END;
MPRINT(EM_DIAGRAM):   END;
196502    +      ELSE IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('7' ) THEN DO;
196503    +        _NODE_  =                  137;
MPRINT(EM_DIAGRAM):   _NODE_ = 137;
196504    +        _LEAF_  =                   54;
MPRINT(EM_DIAGRAM):   _LEAF_ = 54;
196505    +        P_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92;
196506    +        P_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08;
196507    +        Q_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92;
196508    +        Q_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08;
196509    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196510    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196511    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196512    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196513    +        END;
MPRINT(EM_DIAGRAM):   END;
196514    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196515    +        _NODE_  =                  138;
MPRINT(EM_DIAGRAM):   _NODE_ = 138;
196516    +        _LEAF_  =                   55;
MPRINT(EM_DIAGRAM):   _LEAF_ = 55;
196517    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
196518    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
196519    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
196520    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
196521    +        V_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88888888888888;
196522    +        V_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11111111111111;
196523    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196524    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196525    +        END;
MPRINT(EM_DIAGRAM):   END;
196526    +      END;
MPRINT(EM_DIAGRAM):   END;
196527    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
196528    +          0.88446718550085 <= RANGE_SQRT_Avg_Utilization_Ratio  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.88446718550085 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
196529    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196530    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.4282290309541 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.4282290309541 THEN DO;
196531    +        _NODE_  =                  139;
MPRINT(EM_DIAGRAM):   _NODE_ = 139;
196532    +        _LEAF_  =                   56;
MPRINT(EM_DIAGRAM):   _LEAF_ = 56;
196533    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
196534    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
196535    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
196536    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
196537    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
196538    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
196539    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196540    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196541    +        END;
MPRINT(EM_DIAGRAM):   END;
196542    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196543    +             0.4282290309541 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
196544    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.46117076258442 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.4282290309541 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.46117076258442 THEN DO;
196545    +        _NODE_  =                  140;
MPRINT(EM_DIAGRAM):   _NODE_ = 140;
196546    +        _LEAF_  =                   57;
MPRINT(EM_DIAGRAM):   _LEAF_ = 57;
196547    +        P_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.5;
196548    +        P_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.5;
196549    +        Q_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.5;
196550    +        Q_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.5;
196551    +        V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
196552    +        V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
196553    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196554    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196555    +        END;
MPRINT(EM_DIAGRAM):   END;
196556    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196557    +            0.55833789970036 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.55833789970036 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
196558    +        _NODE_  =                  142;
MPRINT(EM_DIAGRAM):   _NODE_ = 142;
196559    +        _LEAF_  =                   61;
MPRINT(EM_DIAGRAM):   _LEAF_ = 61;
196560    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
196561    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
196562    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
196563    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
196564    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196565    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196566    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196567    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196568    +        END;
MPRINT(EM_DIAGRAM):   END;
196569    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196570    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196571    +          RANGE_LOG_Total_Trans_Amt  <     0.13809305548926 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.13809305548926 THEN DO;
196572    +          _NODE_  =                  274;
MPRINT(EM_DIAGRAM):   _NODE_ = 274;
196573    +          _LEAF_  =                   58;
MPRINT(EM_DIAGRAM):   _LEAF_ = 58;
196574    +          P_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.6;
196575    +          P_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.4;
196576    +          Q_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.6;
196577    +          Q_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.4;
196578    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196579    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196580    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196581    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196582    +          END;
MPRINT(EM_DIAGRAM):   END;
196583    +        ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196584    +               0.1555658134984 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.1555658134984 <= RANGE_LOG_Total_Trans_Amt THEN DO;
196585    +          _NODE_  =                  276;
MPRINT(EM_DIAGRAM):   _NODE_ = 276;
196586    +          _LEAF_  =                   60;
MPRINT(EM_DIAGRAM):   _LEAF_ = 60;
196587    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
196588    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
196589    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
196590    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
196591    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196592    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196593    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196594    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196595    +          END;
MPRINT(EM_DIAGRAM):   END;
196596    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196597    +          _NODE_  =                  275;
MPRINT(EM_DIAGRAM):   _NODE_ = 275;
196598    +          _LEAF_  =                   59;
MPRINT(EM_DIAGRAM):   _LEAF_ = 59;
196599    +          P_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.125;
196600    +          P_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.875;
196601    +          Q_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.125;
196602    +          Q_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.875;
196603    +          V_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.6;
196604    +          V_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.4;
196605    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196606    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196607    +          END;
MPRINT(EM_DIAGRAM):   END;
196608    +        END;
MPRINT(EM_DIAGRAM):   END;
196609    +      END;
MPRINT(EM_DIAGRAM):   END;
196610    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196611    +      _NODE_  =                   46;
MPRINT(EM_DIAGRAM):   _NODE_ = 46;
196612    +      _LEAF_  =                   46;
MPRINT(EM_DIAGRAM):   _LEAF_ = 46;
196613    +      P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
196614    +      P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
196615    +      Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
196616    +      Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
196617    +      V_Attrition_Flag0  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.93333333333333;
196618    +      V_Attrition_Flag1  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.06666666666666;
196619    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196620    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196621    +      END;
MPRINT(EM_DIAGRAM):   END;
196622    +    END;
MPRINT(EM_DIAGRAM):   END;
196623    +  ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196624    +        0.94656336909018 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.94656336909018 <= RANGE_Total_Revolving_Bal THEN DO;
196625    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196626    +          0.38148119675298 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
196627    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.43211655021394 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.38148119675298 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.43211655021394 THEN DO;
196628    +      _NODE_  =                   51;
MPRINT(EM_DIAGRAM):   _NODE_ = 51;
196629    +      _LEAF_  =                   63;
MPRINT(EM_DIAGRAM):   _LEAF_ = 63;
196630    +      P_Attrition_Flag0  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.36363636363636;
196631    +      P_Attrition_Flag1  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.63636363636363;
196632    +      Q_Attrition_Flag0  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.36363636363636;
196633    +      Q_Attrition_Flag1  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.63636363636363;
196634    +      V_Attrition_Flag0  =                  0.1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.1;
196635    +      V_Attrition_Flag1  =                  0.9;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.9;
196636    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196637    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196638    +      END;
MPRINT(EM_DIAGRAM):   END;
196639    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196640    +          0.43211655021394 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
196641    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.45174095048192 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.43211655021394 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.45174095048192 THEN DO;
196642    +      _NODE_  =                   52;
MPRINT(EM_DIAGRAM):   _NODE_ = 52;
196643    +      _LEAF_  =                   64;
MPRINT(EM_DIAGRAM):   _LEAF_ = 64;
196644    +      P_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.5;
196645    +      P_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.5;
196646    +      Q_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.5;
196647    +      Q_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.5;
196648    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
196649    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
196650    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196651    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196652    +      END;
MPRINT(EM_DIAGRAM):   END;
196653    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196654    +          0.45174095048192 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45174095048192 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
196655    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196656    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.43248733988054 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.43248733988054 THEN DO;
196657    +        _NODE_  =                  150;
MPRINT(EM_DIAGRAM):   _NODE_ = 150;
196658    +        _LEAF_  =                   65;
MPRINT(EM_DIAGRAM):   _LEAF_ = 65;
196659    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
196660    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
196661    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
196662    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
196663    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196664    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196665    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196666    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196667    +        END;
MPRINT(EM_DIAGRAM):   END;
196668    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196669    +            0.43248733988054 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
196670    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.47205488095581 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43248733988054 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.47205488095581 THEN DO;
196671    +        _NODE_  =                  151;
MPRINT(EM_DIAGRAM):   _NODE_ = 151;
196672    +        _LEAF_  =                   66;
MPRINT(EM_DIAGRAM):   _LEAF_ = 66;
196673    +        P_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.6;
196674    +        P_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.4;
196675    +        Q_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.6;
196676    +        Q_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.4;
196677    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196678    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196679    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196680    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196681    +        END;
MPRINT(EM_DIAGRAM):   END;
196682    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196683    +            0.53325640118613 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.53325640118613 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
196684    +        _NODE_  =                  153;
MPRINT(EM_DIAGRAM):   _NODE_ = 153;
196685    +        _LEAF_  =                   68;
MPRINT(EM_DIAGRAM):   _LEAF_ = 68;
196686    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
196687    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
196688    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
196689    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
196690    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196691    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196692    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196693    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196694    +        END;
MPRINT(EM_DIAGRAM):   END;
196695    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196696    +        _NODE_  =                  152;
MPRINT(EM_DIAGRAM):   _NODE_ = 152;
196697    +        _LEAF_  =                   67;
MPRINT(EM_DIAGRAM):   _LEAF_ = 67;
196698    +        P_Attrition_Flag0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.9090909090909;
196699    +        P_Attrition_Flag1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.09090909090909;
196700    +        Q_Attrition_Flag0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.9090909090909;
196701    +        Q_Attrition_Flag1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.09090909090909;
196702    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196703    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196704    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196705    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196706    +        END;
MPRINT(EM_DIAGRAM):   END;
196707    +      END;
MPRINT(EM_DIAGRAM):   END;
196708    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196709    +      _NODE_  =                   50;
MPRINT(EM_DIAGRAM):   _NODE_ = 50;
196710    +      _LEAF_  =                   62;
MPRINT(EM_DIAGRAM):   _LEAF_ = 62;
196711    +      P_Attrition_Flag0  =     0.04651162790697;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.04651162790697;
196712    +      P_Attrition_Flag1  =     0.95348837209302;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.95348837209302;
196713    +      Q_Attrition_Flag0  =     0.04651162790697;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.04651162790697;
196714    +      Q_Attrition_Flag1  =     0.95348837209302;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.95348837209302;
196715    +      V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
196716    +      V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
196717    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196718    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196719    +      END;
MPRINT(EM_DIAGRAM):   END;
196720    +    END;
MPRINT(EM_DIAGRAM):   END;
196721    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196722    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
196723    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
196724    +    IF _ARBFMT_12 IN ('6' ,'7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('6' ,'7' ) THEN DO;
196725    +      _NODE_  =                   38;
MPRINT(EM_DIAGRAM):   _NODE_ = 38;
196726    +      _LEAF_  =                   31;
MPRINT(EM_DIAGRAM):   _LEAF_ = 31;
196727    +      P_Attrition_Flag0  =                 0.96;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96;
196728    +      P_Attrition_Flag1  =                 0.04;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.04;
196729    +      Q_Attrition_Flag0  =                 0.96;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96;
196730    +      Q_Attrition_Flag1  =                 0.04;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.04;
196731    +      V_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.84615384615384;
196732    +      V_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.15384615384615;
196733    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196734    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196735    +      END;
MPRINT(EM_DIAGRAM):   END;
196736    +    ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
196737    +      _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
196738    +      _LEAF_  =                   32;
MPRINT(EM_DIAGRAM):   _LEAF_ = 32;
196739    +      P_Attrition_Flag0  =     0.29032258064516;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.29032258064516;
196740    +      P_Attrition_Flag1  =     0.70967741935483;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.70967741935483;
196741    +      Q_Attrition_Flag0  =     0.29032258064516;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.29032258064516;
196742    +      Q_Attrition_Flag1  =     0.70967741935483;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.70967741935483;
196743    +      V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
196744    +      V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
196745    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196746    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196747    +      END;
MPRINT(EM_DIAGRAM):   END;
196748    +    ELSE IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
196749    +      _NODE_  =                   40;
MPRINT(EM_DIAGRAM):   _NODE_ = 40;
196750    +      _LEAF_  =                   33;
MPRINT(EM_DIAGRAM):   _LEAF_ = 33;
196751    +      P_Attrition_Flag0  =     0.11403508771929;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.11403508771929;
196752    +      P_Attrition_Flag1  =      0.8859649122807;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8859649122807;
196753    +      Q_Attrition_Flag0  =     0.11403508771929;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.11403508771929;
196754    +      Q_Attrition_Flag1  =      0.8859649122807;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8859649122807;
196755    +      V_Attrition_Flag0  =     0.21153846153846;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.21153846153846;
196756    +      V_Attrition_Flag1  =     0.78846153846153;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.78846153846153;
196757    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196758    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196759    +      END;
MPRINT(EM_DIAGRAM):   END;
196760    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196761    +      _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
196762    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
196763    +      IF _ARBFMT_12 IN ('9' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ) THEN DO;
196764    +        _NODE_  =                  113;
MPRINT(EM_DIAGRAM):   _NODE_ = 113;
196765    +        _LEAF_  =                   34;
MPRINT(EM_DIAGRAM):   _LEAF_ = 34;
196766    +        P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
196767    +        P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
196768    +        Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
196769    +        Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
196770    +        V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
196771    +        V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
196772    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196773    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196774    +        END;
MPRINT(EM_DIAGRAM):   END;
196775    +      ELSE IF _ARBFMT_12 IN ('8' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('8' ) THEN DO;
196776    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196777    +              0.14717998848492 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.14717998848492 <= RANGE_LOG_Total_Trans_Amt THEN DO;
196778    +          _NODE_  =                  238;
MPRINT(EM_DIAGRAM):   _NODE_ = 238;
196779    +          _LEAF_  =                   36;
MPRINT(EM_DIAGRAM):   _LEAF_ = 36;
196780    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
196781    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
196782    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
196783    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
196784    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196785    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196786    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196787    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196788    +          END;
MPRINT(EM_DIAGRAM):   END;
196789    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196790    +          _NODE_  =                  237;
MPRINT(EM_DIAGRAM):   _NODE_ = 237;
196791    +          _LEAF_  =                   35;
MPRINT(EM_DIAGRAM):   _LEAF_ = 35;
196792    +          P_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.71428571428571;
196793    +          P_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.28571428571428;
196794    +          Q_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.71428571428571;
196795    +          Q_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.28571428571428;
196796    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
196797    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
196798    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196799    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196800    +          END;
MPRINT(EM_DIAGRAM):   END;
196801    +        END;
MPRINT(EM_DIAGRAM):   END;
196802    +      ELSE IF _ARBFMT_12 IN ('6' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ,'2' ) THEN DO;
196803    +        _NODE_  =                  115;
MPRINT(EM_DIAGRAM):   _NODE_ = 115;
196804    +        _LEAF_  =                   37;
MPRINT(EM_DIAGRAM):   _LEAF_ = 37;
196805    +        P_Attrition_Flag0  =     0.06944444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.06944444444444;
196806    +        P_Attrition_Flag1  =     0.93055555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.93055555555555;
196807    +        Q_Attrition_Flag0  =     0.06944444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.06944444444444;
196808    +        Q_Attrition_Flag1  =     0.93055555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.93055555555555;
196809    +        V_Attrition_Flag0  =     0.05882352941176;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.05882352941176;
196810    +        V_Attrition_Flag1  =     0.94117647058823;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.94117647058823;
196811    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196812    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196813    +        END;
MPRINT(EM_DIAGRAM):   END;
196814    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196815    +        _NODE_  =                  116;
MPRINT(EM_DIAGRAM):   _NODE_ = 116;
196816    +        _LEAF_  =                   38;
MPRINT(EM_DIAGRAM):   _LEAF_ = 38;
196817    +        P_Attrition_Flag0  =      0.0188679245283;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.0188679245283;
196818    +        P_Attrition_Flag1  =     0.98113207547169;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.98113207547169;
196819    +        Q_Attrition_Flag0  =      0.0188679245283;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.0188679245283;
196820    +        Q_Attrition_Flag1  =     0.98113207547169;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.98113207547169;
196821    +        V_Attrition_Flag0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.06666666666666;
196822    +        V_Attrition_Flag1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.93333333333333;
196823    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196824    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196825    +        END;
MPRINT(EM_DIAGRAM):   END;
196826    +      END;
MPRINT(EM_DIAGRAM):   END;
196827    +    END;
MPRINT(EM_DIAGRAM):   END;
196828    +  END;
MPRINT(EM_DIAGRAM):   END;
196829    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196830    +  IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
196831    +        0.33903522463476 <= RANGE_LOG_Total_Trans_Amt  AND
196832    +    RANGE_LOG_Total_Trans_Amt  <      0.5292669551731 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.33903522463476 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.5292669551731 THEN DO;
196833    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
196834    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
196835    +    IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
196836    +      IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
196837    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.15336512310644 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.15336512310644 THEN DO;
196838    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196839    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.42306142585878 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.42306142585878 THEN DO;
196840    +          _NODE_  =                  300;
MPRINT(EM_DIAGRAM):   _NODE_ = 300;
196841    +          _LEAF_  =                   76;
MPRINT(EM_DIAGRAM):   _LEAF_ = 76;
196842    +          P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
196843    +          P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
196844    +          Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
196845    +          Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
196846    +          V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
196847    +          V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
196848    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196849    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196850    +          END;
MPRINT(EM_DIAGRAM):   END;
196851    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196852    +              0.46814885494745 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
196853    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.49667641774778 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.46814885494745 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.49667641774778 THEN DO;
196854    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
196855    +                0.46885113560247 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46885113560247 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
196856    +            _NODE_  =                  366;
MPRINT(EM_DIAGRAM):   _NODE_ = 366;
196857    +            _LEAF_  =                   79;
MPRINT(EM_DIAGRAM):   _LEAF_ = 79;
196858    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
196859    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
196860    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
196861    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
196862    +            V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196863    +            V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
196864    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196865    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196866    +            END;
MPRINT(EM_DIAGRAM):   END;
196867    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196868    +            _NODE_  =                  365;
MPRINT(EM_DIAGRAM):   _NODE_ = 365;
196869    +            _LEAF_  =                   78;
MPRINT(EM_DIAGRAM):   _LEAF_ = 78;
196870    +            P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
196871    +            P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
196872    +            Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
196873    +            Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
196874    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196875    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196876    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196877    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196878    +            END;
MPRINT(EM_DIAGRAM):   END;
196879    +          END;
MPRINT(EM_DIAGRAM):   END;
196880    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
196881    +              0.49667641774778 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49667641774778 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
196882    +          _NODE_  =                  303;
MPRINT(EM_DIAGRAM):   _NODE_ = 303;
196883    +          _LEAF_  =                   80;
MPRINT(EM_DIAGRAM):   _LEAF_ = 80;
196884    +          P_Attrition_Flag0  =     0.34615384615384;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.34615384615384;
196885    +          P_Attrition_Flag1  =     0.65384615384615;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.65384615384615;
196886    +          Q_Attrition_Flag0  =     0.34615384615384;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.34615384615384;
196887    +          Q_Attrition_Flag1  =     0.65384615384615;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.65384615384615;
196888    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
196889    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
196890    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196891    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196892    +          END;
MPRINT(EM_DIAGRAM):   END;
196893    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196894    +          _NODE_  =                  301;
MPRINT(EM_DIAGRAM):   _NODE_ = 301;
196895    +          _LEAF_  =                   77;
MPRINT(EM_DIAGRAM):   _LEAF_ = 77;
196896    +          P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
196897    +          P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
196898    +          Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
196899    +          Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
196900    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
196901    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
196902    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196903    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196904    +          END;
MPRINT(EM_DIAGRAM):   END;
196905    +        END;
MPRINT(EM_DIAGRAM):   END;
196906    +      ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
196907    +            0.15336512310644 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
196908    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.22033442437469 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.15336512310644 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.22033442437469 THEN DO;
196909    +        _NODE_  =                  171;
MPRINT(EM_DIAGRAM):   _NODE_ = 171;
196910    +        _LEAF_  =                   81;
MPRINT(EM_DIAGRAM):   _LEAF_ = 81;
196911    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
196912    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
196913    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
196914    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
196915    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196916    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196917    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196918    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196919    +        END;
MPRINT(EM_DIAGRAM):   END;
196920    +      ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
196921    +            0.22033442437469 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
196922    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.23141388059994 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.22033442437469 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.23141388059994 THEN DO;
196923    +        _NODE_  =                  172;
MPRINT(EM_DIAGRAM):   _NODE_ = 172;
196924    +        _LEAF_  =                   82;
MPRINT(EM_DIAGRAM):   _LEAF_ = 82;
196925    +        P_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.42857142857142;
196926    +        P_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.57142857142857;
196927    +        Q_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.42857142857142;
196928    +        Q_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.57142857142857;
196929    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
196930    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
196931    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196932    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196933    +        END;
MPRINT(EM_DIAGRAM):   END;
196934    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196935    +        _NODE_  =                  173;
MPRINT(EM_DIAGRAM):   _NODE_ = 173;
196936    +        _LEAF_  =                   83;
MPRINT(EM_DIAGRAM):   _LEAF_ = 83;
196937    +        P_Attrition_Flag0  =     0.98443579766536;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.98443579766536;
196938    +        P_Attrition_Flag1  =     0.01556420233463;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.01556420233463;
196939    +        Q_Attrition_Flag0  =     0.98443579766536;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.98443579766536;
196940    +        Q_Attrition_Flag1  =     0.01556420233463;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.01556420233463;
196941    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196942    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196943    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196944    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196945    +        END;
MPRINT(EM_DIAGRAM):   END;
196946    +      END;
MPRINT(EM_DIAGRAM):   END;
196947    +    ELSE IF _ARBFMT_12 IN ('6' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ) THEN DO;
196948    +      IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196949    +            0.36372665872069 <= RANGE_Total_Revolving_Bal  AND
196950    +        RANGE_Total_Revolving_Bal  <     0.49841080651569 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.36372665872069 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.49841080651569 THEN DO;
196951    +        _NODE_  =                  175;
MPRINT(EM_DIAGRAM):   _NODE_ = 175;
196952    +        _LEAF_  =                   85;
MPRINT(EM_DIAGRAM):   _LEAF_ = 85;
196953    +        P_Attrition_Flag0  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.25;
196954    +        P_Attrition_Flag1  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.75;
196955    +        Q_Attrition_Flag0  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.25;
196956    +        Q_Attrition_Flag1  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.75;
196957    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
196958    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196959    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196960    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196961    +        END;
MPRINT(EM_DIAGRAM):   END;
196962    +      ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196963    +            0.49841080651569 <= RANGE_Total_Revolving_Bal  AND
196964    +        RANGE_Total_Revolving_Bal  <     0.98986889153754 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.49841080651569 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.98986889153754 THEN DO;
196965    +        _NODE_  =                  176;
MPRINT(EM_DIAGRAM):   _NODE_ = 176;
196966    +        _LEAF_  =                   86;
MPRINT(EM_DIAGRAM):   _LEAF_ = 86;
196967    +        P_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.7;
196968    +        P_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.3;
196969    +        Q_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.7;
196970    +        Q_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.3;
196971    +        V_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.57142857142857;
196972    +        V_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.42857142857142;
196973    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
196974    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
196975    +        END;
MPRINT(EM_DIAGRAM):   END;
196976    +      ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
196977    +            0.98986889153754 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.98986889153754 <= RANGE_Total_Revolving_Bal THEN DO;
196978    +        _NODE_  =                  177;
MPRINT(EM_DIAGRAM):   _NODE_ = 177;
196979    +        _LEAF_  =                   87;
MPRINT(EM_DIAGRAM):   _LEAF_ = 87;
196980    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
196981    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
196982    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
196983    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
196984    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
196985    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
196986    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196987    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
196988    +        END;
MPRINT(EM_DIAGRAM):   END;
196989    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
196990    +        _NODE_  =                  174;
MPRINT(EM_DIAGRAM):   _NODE_ = 174;
196991    +        _LEAF_  =                   84;
MPRINT(EM_DIAGRAM):   _LEAF_ = 84;
196992    +        P_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.02325581395348;
196993    +        P_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.97674418604651;
196994    +        Q_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.02325581395348;
196995    +        Q_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.97674418604651;
196996    +        V_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.08333333333333;
196997    +        V_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.91666666666666;
196998    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
196999    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197000    +        END;
MPRINT(EM_DIAGRAM):   END;
197001    +      END;
MPRINT(EM_DIAGRAM):   END;
197002    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197003    +      _NODE_  =                   60;
MPRINT(EM_DIAGRAM):   _NODE_ = 60;
197004    +      _LEAF_  =                   88;
MPRINT(EM_DIAGRAM):   _LEAF_ = 88;
197005    +      P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
197006    +      P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
197007    +      Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
197008    +      Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
197009    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197010    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197011    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197012    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197013    +      END;
MPRINT(EM_DIAGRAM):   END;
197014    +    END;
MPRINT(EM_DIAGRAM):   END;
197015    +  ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197016    +         0.5292669551731 <= RANGE_LOG_Total_Trans_Amt  AND
197017    +    RANGE_LOG_Total_Trans_Amt  <     0.68217373468557 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.5292669551731 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.68217373468557 THEN DO;
197018    +    IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
197019    +      RANGE_Total_Revolving_Bal  <     0.25129121970599 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.25129121970599 THEN DO;
197020    +      _NODE_  =                   61;
MPRINT(EM_DIAGRAM):   _NODE_ = 61;
197021    +      _LEAF_  =                   89;
MPRINT(EM_DIAGRAM):   _LEAF_ = 89;
197022    +      P_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.02325581395348;
197023    +      P_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.97674418604651;
197024    +      Q_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.02325581395348;
197025    +      Q_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.97674418604651;
197026    +      V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
197027    +      V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
197028    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197029    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197030    +      END;
MPRINT(EM_DIAGRAM):   END;
197031    +    ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
197032    +          0.25129121970599 <= RANGE_Total_Revolving_Bal  AND
197033    +      RANGE_Total_Revolving_Bal  <      0.3917361938816 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.25129121970599 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.3917361938816 THEN DO;
197034    +      _NODE_  =                   62;
MPRINT(EM_DIAGRAM):   _NODE_ = 62;
197035    +      _LEAF_  =                   90;
MPRINT(EM_DIAGRAM):   _LEAF_ = 90;
197036    +      P_Attrition_Flag0  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.44444444444444;
197037    +      P_Attrition_Flag1  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.55555555555555;
197038    +      Q_Attrition_Flag0  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.44444444444444;
197039    +      Q_Attrition_Flag1  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.55555555555555;
197040    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
197041    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
197042    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197043    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197044    +      END;
MPRINT(EM_DIAGRAM):   END;
197045    +    ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
197046    +          0.86809694080254 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.86809694080254 <= RANGE_Total_Revolving_Bal THEN DO;
197047    +      _NODE_  =                   64;
MPRINT(EM_DIAGRAM):   _NODE_ = 64;
197048    +      _LEAF_  =                   95;
MPRINT(EM_DIAGRAM):   _LEAF_ = 95;
197049    +      P_Attrition_Flag0  =                 0.35;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.35;
197050    +      P_Attrition_Flag1  =                 0.65;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.65;
197051    +      Q_Attrition_Flag0  =                 0.35;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.35;
197052    +      Q_Attrition_Flag1  =                 0.65;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.65;
197053    +      V_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.125;
197054    +      V_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.875;
197055    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197056    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197057    +      END;
MPRINT(EM_DIAGRAM):   END;
197058    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197059    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197060    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <      0.4303969058852 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.4303969058852 THEN DO;
197061    +        _NODE_  =                  180;
MPRINT(EM_DIAGRAM):   _NODE_ = 180;
197062    +        _LEAF_  =                   91;
MPRINT(EM_DIAGRAM):   _LEAF_ = 91;
197063    +        P_Attrition_Flag0  =     0.88235294117647;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.88235294117647;
197064    +        P_Attrition_Flag1  =     0.11764705882352;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.11764705882352;
197065    +        Q_Attrition_Flag0  =     0.88235294117647;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.88235294117647;
197066    +        Q_Attrition_Flag1  =     0.11764705882352;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.11764705882352;
197067    +        V_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.8;
197068    +        V_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.2;
197069    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197070    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197071    +        END;
MPRINT(EM_DIAGRAM):   END;
197072    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197073    +            0.47044734524227 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
197074    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.48468025968557 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.47044734524227 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.48468025968557 THEN DO;
197075    +        _NODE_  =                  182;
MPRINT(EM_DIAGRAM):   _NODE_ = 182;
197076    +        _LEAF_  =                   93;
MPRINT(EM_DIAGRAM):   _LEAF_ = 93;
197077    +        P_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.57142857142857;
197078    +        P_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.42857142857142;
197079    +        Q_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.57142857142857;
197080    +        Q_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.42857142857142;
197081    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197082    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197083    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197084    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197085    +        END;
MPRINT(EM_DIAGRAM):   END;
197086    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197087    +            0.48468025968557 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.48468025968557 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
197088    +        _NODE_  =                  183;
MPRINT(EM_DIAGRAM):   _NODE_ = 183;
197089    +        _LEAF_  =                   94;
MPRINT(EM_DIAGRAM):   _LEAF_ = 94;
197090    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
197091    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
197092    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
197093    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
197094    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197095    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197096    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197097    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197098    +        END;
MPRINT(EM_DIAGRAM):   END;
197099    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197100    +        _NODE_  =                  181;
MPRINT(EM_DIAGRAM):   _NODE_ = 181;
197101    +        _LEAF_  =                   92;
MPRINT(EM_DIAGRAM):   _LEAF_ = 92;
197102    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
197103    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
197104    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
197105    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
197106    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197107    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197108    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197109    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197110    +        END;
MPRINT(EM_DIAGRAM):   END;
197111    +      END;
MPRINT(EM_DIAGRAM):   END;
197112    +    END;
MPRINT(EM_DIAGRAM):   END;
197113    +  ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197114    +        0.68217373468557 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.68217373468557 <= RANGE_LOG_Total_Trans_Amt THEN DO;
197115    +    _NODE_  =                   20;
MPRINT(EM_DIAGRAM):   _NODE_ = 20;
197116    +    _LEAF_  =                   96;
MPRINT(EM_DIAGRAM):   _LEAF_ = 96;
197117    +    P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
197118    +    P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
197119    +    Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
197120    +    Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
197121    +    V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197122    +    V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197123    +    I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197124    +    U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197125    +    END;
MPRINT(EM_DIAGRAM):   END;
197126    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197127    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
197128    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
197129    +    IF _ARBFMT_12 IN ('1' ,'3' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'3' ,'2' ) THEN DO;
197130    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197131    +            0.39856812249138 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
197132    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.47370187464616 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.39856812249138 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.47370187464616 THEN DO;
197133    +        _NODE_  =                  155;
MPRINT(EM_DIAGRAM):   _NODE_ = 155;
197134    +        _LEAF_  =                   70;
MPRINT(EM_DIAGRAM):   _LEAF_ = 70;
197135    +        P_Attrition_Flag0  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.52941176470588;
197136    +        P_Attrition_Flag1  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.47058823529411;
197137    +        Q_Attrition_Flag0  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.52941176470588;
197138    +        Q_Attrition_Flag1  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.47058823529411;
197139    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
197140    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
197141    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197142    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197143    +        END;
MPRINT(EM_DIAGRAM):   END;
197144    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197145    +            0.47370187464616 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
197146    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.50814574678553 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.47370187464616 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.50814574678553 THEN DO;
197147    +        _NODE_  =                  156;
MPRINT(EM_DIAGRAM):   _NODE_ = 156;
197148    +        _LEAF_  =                   71;
MPRINT(EM_DIAGRAM):   _LEAF_ = 71;
197149    +        P_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.77777777777777;
197150    +        P_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.22222222222222;
197151    +        Q_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.77777777777777;
197152    +        Q_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.22222222222222;
197153    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197154    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197155    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197156    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197157    +        END;
MPRINT(EM_DIAGRAM):   END;
197158    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197159    +            0.50814574678553 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.50814574678553 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
197160    +        _NODE_  =                  157;
MPRINT(EM_DIAGRAM):   _NODE_ = 157;
197161    +        _LEAF_  =                   72;
MPRINT(EM_DIAGRAM):   _LEAF_ = 72;
197162    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
197163    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
197164    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
197165    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
197166    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197167    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197168    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197169    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197170    +        END;
MPRINT(EM_DIAGRAM):   END;
197171    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197172    +        _NODE_  =                  154;
MPRINT(EM_DIAGRAM):   _NODE_ = 154;
197173    +        _LEAF_  =                   69;
MPRINT(EM_DIAGRAM):   _LEAF_ = 69;
197174    +        P_Attrition_Flag0  =     0.05263157894736;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05263157894736;
197175    +        P_Attrition_Flag1  =     0.94736842105263;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94736842105263;
197176    +        Q_Attrition_Flag0  =     0.05263157894736;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05263157894736;
197177    +        Q_Attrition_Flag1  =     0.94736842105263;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94736842105263;
197178    +        V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
197179    +        V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
197180    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197181    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197182    +        END;
MPRINT(EM_DIAGRAM):   END;
197183    +      END;
MPRINT(EM_DIAGRAM):   END;
197184    +    ELSE IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('4' ) THEN DO;
197185    +      _NODE_  =                   55;
MPRINT(EM_DIAGRAM):   _NODE_ = 55;
197186    +      _LEAF_  =                   73;
MPRINT(EM_DIAGRAM):   _LEAF_ = 73;
197187    +      P_Attrition_Flag0  =     0.73076923076923;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.73076923076923;
197188    +      P_Attrition_Flag1  =     0.26923076923076;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.26923076923076;
197189    +      Q_Attrition_Flag0  =     0.73076923076923;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.73076923076923;
197190    +      Q_Attrition_Flag1  =     0.26923076923076;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.26923076923076;
197191    +      V_Attrition_Flag0  =     0.69565217391304;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.69565217391304;
197192    +      V_Attrition_Flag1  =     0.30434782608695;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.30434782608695;
197193    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197194    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197195    +      END;
MPRINT(EM_DIAGRAM):   END;
197196    +    ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
197197    +      _NODE_  =                   56;
MPRINT(EM_DIAGRAM):   _NODE_ = 56;
197198    +      _LEAF_  =                   74;
MPRINT(EM_DIAGRAM):   _LEAF_ = 74;
197199    +      P_Attrition_Flag0  =     0.90816326530612;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.90816326530612;
197200    +      P_Attrition_Flag1  =     0.09183673469387;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.09183673469387;
197201    +      Q_Attrition_Flag0  =     0.90816326530612;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.90816326530612;
197202    +      Q_Attrition_Flag1  =     0.09183673469387;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.09183673469387;
197203    +      V_Attrition_Flag0  =     0.94642857142857;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.94642857142857;
197204    +      V_Attrition_Flag1  =     0.05357142857142;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.05357142857142;
197205    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197206    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197207    +      END;
MPRINT(EM_DIAGRAM):   END;
197208    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197209    +      _NODE_  =                   57;
MPRINT(EM_DIAGRAM):   _NODE_ = 57;
197210    +      _LEAF_  =                   75;
MPRINT(EM_DIAGRAM):   _LEAF_ = 75;
197211    +      P_Attrition_Flag0  =     0.99732530926111;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.99732530926111;
197212    +      P_Attrition_Flag1  =     0.00267469073888;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.00267469073888;
197213    +      Q_Attrition_Flag0  =     0.99732530926111;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.99732530926111;
197214    +      Q_Attrition_Flag1  =     0.00267469073888;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.00267469073888;
197215    +      V_Attrition_Flag0  =     0.99528301886792;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99528301886792;
197216    +      V_Attrition_Flag1  =     0.00471698113207;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00471698113207;
197217    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197218    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197219    +      END;
MPRINT(EM_DIAGRAM):   END;
197220    +    END;
MPRINT(EM_DIAGRAM):   END;
197221    +  END;
MPRINT(EM_DIAGRAM):   END;
197222    +
197223    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
197224    +IF  F_Attrition_Flag  NE '0'
197225    +AND F_Attrition_Flag  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Attrition_Flag NE '0' AND F_Attrition_Flag NE '1' THEN DO;
197226    +        R_Attrition_Flag0  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = .;
197227    +        R_Attrition_Flag1  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = .;
197228    + END;
MPRINT(EM_DIAGRAM):   END;
197229    + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197230    +       R_Attrition_Flag0  =  -P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = -P_Attrition_Flag0 ;
197231    +       R_Attrition_Flag1  =  -P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = -P_Attrition_Flag1 ;
197232    +       SELECT( F_Attrition_Flag  );
MPRINT(EM_DIAGRAM):   SELECT( F_Attrition_Flag );
197233    +          WHEN( '0'  ) R_Attrition_Flag0  = R_Attrition_Flag0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_Attrition_Flag0 = R_Attrition_Flag0 +1;
197234    +          WHEN( '1'  ) R_Attrition_Flag1  = R_Attrition_Flag1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_Attrition_Flag1 = R_Attrition_Flag1 +1;
197235    +       END;
MPRINT(EM_DIAGRAM):   END;
197236    + END;
MPRINT(EM_DIAGRAM):   END;
197237    +
197238    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
197239    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
197240    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
197241    +
197242    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
197243     run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
197244     quit;
197245     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
197246     filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
197247     *------------------------------------------------------------*;
197248     * Tree2: Scoring VALIDATE data;
197249     *------------------------------------------------------------*;
197250     data EMWS1.Tree2_VALIDATE
197251     / view=EMWS1.Tree2_VALIDATE
197252     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_VALIDATE / view=EMWS1.Tree2_VALIDATE ;
197253     set EMWS1.Part2_VALIDATE
197254     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part2_VALIDATE ;
197255     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
197256    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
197257    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
197258    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
197259    +
197260    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
197261    +LENGTH F_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH F_Attrition_Flag $ 17;
197262    +LENGTH I_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH I_Attrition_Flag $ 17;
197263    +LENGTH U_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH U_Attrition_Flag $ 17;
197264    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
197265    +
197266    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
197267    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
197268    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
197269    +label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
197270    +label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
197271    +label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
197272    +label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
197273    +label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
197274    +label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
197275    +label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
197276    +label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
197277    +label F_Attrition_Flag = 'From: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label F_Attrition_Flag = 'From: Attrition_Flag' ;
197278    +label I_Attrition_Flag = 'Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label I_Attrition_Flag = 'Into: Attrition_Flag' ;
197279    +label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
197280    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
197281    +
197282    +
197283    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
197284    +LENGTH _ARBFMT_17 $     17; DROP _ARBFMT_17;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_17 $ 17;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_17;
197285    +_ARBFMT_17 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = ' ';
197286    +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
197287    +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
197288    +
197289    +
197290    +_ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
197291    + %DMNORMCP( _ARBFMT_17, F_Attrition_Flag );
MPRINT(DMNORMCP):   F_Attrition_Flag=dmnorm(_ARBFMT_17,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
197292    +
197293    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
197294    +IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197295    +  RANGE_LOG_Total_Trans_Amt  <     0.03868641322523 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03868641322523 THEN DO;
197296    +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
197297    +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
197298    +  P_Attrition_Flag0  =     0.09649122807017;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.09649122807017;
197299    +  P_Attrition_Flag1  =     0.90350877192982;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.90350877192982;
197300    +  Q_Attrition_Flag0  =     0.09649122807017;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.09649122807017;
197301    +  Q_Attrition_Flag1  =     0.90350877192982;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.90350877192982;
197302    +  V_Attrition_Flag0  =     0.16129032258064;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16129032258064;
197303    +  V_Attrition_Flag1  =     0.83870967741935;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83870967741935;
197304    +  I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197305    +  U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197306    +  END;
MPRINT(EM_DIAGRAM):   END;
197307    +ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197308    +      0.03868641322523 <= RANGE_LOG_Total_Trans_Amt  AND
197309    +  RANGE_LOG_Total_Trans_Amt  <     0.11189168159095 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.03868641322523 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.11189168159095 THEN DO;
197310    +  _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
197311    +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
197312    +  IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
197313    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197314    +          0.37739607587341 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
197315    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39380951152569 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.37739607587341 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39380951152569 THEN DO;
197316    +      _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
197317    +      _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
197318    +      P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
197319    +      P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
197320    +      Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
197321    +      Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
197322    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197323    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197324    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197325    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197326    +      END;
MPRINT(EM_DIAGRAM):   END;
197327    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197328    +          0.39380951152569 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
197329    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.51192553209568 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.39380951152569 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.51192553209568 THEN DO;
197330    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197331    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.3736695996306 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.3736695996306 THEN DO;
197332    +        _NODE_  =                   71;
MPRINT(EM_DIAGRAM):   _NODE_ = 71;
197333    +        _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
197334    +        P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
197335    +        P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
197336    +        Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
197337    +        Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
197338    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197339    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197340    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197341    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197342    +        END;
MPRINT(EM_DIAGRAM):   END;
197343    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197344    +            0.49243977177414 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
197345    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.52686491804492 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49243977177414 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.52686491804492 THEN DO;
197346    +        _NODE_  =                   73;
MPRINT(EM_DIAGRAM):   _NODE_ = 73;
197347    +        _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
197348    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
197349    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
197350    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
197351    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
197352    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197353    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197354    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197355    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197356    +        END;
MPRINT(EM_DIAGRAM):   END;
197357    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197358    +            0.52686491804492 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.52686491804492 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
197359    +        _NODE_  =                   74;
MPRINT(EM_DIAGRAM):   _NODE_ = 74;
197360    +        _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
197361    +        P_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85714285714285;
197362    +        P_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.14285714285714;
197363    +        Q_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85714285714285;
197364    +        Q_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.14285714285714;
197365    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197366    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197367    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197368    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197369    +        END;
MPRINT(EM_DIAGRAM):   END;
197370    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197371    +        _NODE_  =                   72;
MPRINT(EM_DIAGRAM):   _NODE_ = 72;
197372    +        _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
197373    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
197374    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
197375    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
197376    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
197377    +        V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
197378    +        V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
197379    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197380    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197381    +        END;
MPRINT(EM_DIAGRAM):   END;
197382    +      END;
MPRINT(EM_DIAGRAM):   END;
197383    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197384    +          0.51192553209568 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.51192553209568 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
197385    +      _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
197386    +      _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
197387    +      P_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85714285714285;
197388    +      P_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.14285714285714;
197389    +      Q_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85714285714285;
197390    +      Q_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.14285714285714;
197391    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197392    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197393    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197394    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197395    +      END;
MPRINT(EM_DIAGRAM):   END;
197396    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197397    +      _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
197398    +      _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
197399    +      P_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05555555555555;
197400    +      P_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94444444444444;
197401    +      Q_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05555555555555;
197402    +      Q_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94444444444444;
197403    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197404    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197405    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197406    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197407    +      END;
MPRINT(EM_DIAGRAM):   END;
197408    +    END;
MPRINT(EM_DIAGRAM):   END;
197409    +  ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
197410    +    IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
197411    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.06895472974897 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.06895472974897 THEN DO;
197412    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197413    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.26277731155559 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.26277731155559 THEN DO;
197414    +        _NODE_  =                   77;
MPRINT(EM_DIAGRAM):   _NODE_ = 77;
197415    +        _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
197416    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
197417    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
197418    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
197419    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
197420    +        V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
197421    +        V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
197422    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197423    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197424    +        END;
MPRINT(EM_DIAGRAM):   END;
197425    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197426    +            0.41754003895588 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
197427    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.46047296215175 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.41754003895588 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.46047296215175 THEN DO;
197428    +        _NODE_  =                   79;
MPRINT(EM_DIAGRAM):   _NODE_ = 79;
197429    +        _LEAF_  =                   16;
MPRINT(EM_DIAGRAM):   _LEAF_ = 16;
197430    +        P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
197431    +        P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
197432    +        Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
197433    +        Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
197434    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197435    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197436    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197437    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197438    +        END;
MPRINT(EM_DIAGRAM):   END;
197439    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197440    +            0.46047296215175 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46047296215175 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
197441    +        _NODE_  =                   80;
MPRINT(EM_DIAGRAM):   _NODE_ = 80;
197442    +        _LEAF_  =                   17;
MPRINT(EM_DIAGRAM):   _LEAF_ = 17;
197443    +        P_Attrition_Flag0  =     0.92857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92857142857142;
197444    +        P_Attrition_Flag1  =     0.07142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.07142857142857;
197445    +        Q_Attrition_Flag0  =     0.92857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92857142857142;
197446    +        Q_Attrition_Flag1  =     0.07142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.07142857142857;
197447    +        V_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.85714285714285;
197448    +        V_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.14285714285714;
197449    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197450    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197451    +        END;
MPRINT(EM_DIAGRAM):   END;
197452    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197453    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197454    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.35658658871759 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.35658658871759 THEN DO;
197455    +          _NODE_  =                  186;
MPRINT(EM_DIAGRAM):   _NODE_ = 186;
197456    +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
197457    +          P_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.125;
197458    +          P_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.875;
197459    +          Q_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.125;
197460    +          Q_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.875;
197461    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197462    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197463    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197464    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197465    +          END;
MPRINT(EM_DIAGRAM):   END;
197466    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197467    +              0.43860103445126 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
197468    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.50400402406364 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43860103445126 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.50400402406364 THEN DO;
197469    +          _NODE_  =                  188;
MPRINT(EM_DIAGRAM):   _NODE_ = 188;
197470    +          _LEAF_  =                   14;
MPRINT(EM_DIAGRAM):   _LEAF_ = 14;
197471    +          P_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.75;
197472    +          P_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.25;
197473    +          Q_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.75;
197474    +          Q_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.25;
197475    +          V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
197476    +          V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
197477    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197478    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197479    +          END;
MPRINT(EM_DIAGRAM):   END;
197480    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197481    +              0.50400402406364 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.50400402406364 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
197482    +          _NODE_  =                  189;
MPRINT(EM_DIAGRAM):   _NODE_ = 189;
197483    +          _LEAF_  =                   15;
MPRINT(EM_DIAGRAM):   _LEAF_ = 15;
197484    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
197485    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
197486    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
197487    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
197488    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197489    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197490    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197491    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197492    +          END;
MPRINT(EM_DIAGRAM):   END;
197493    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197494    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197495    +            RANGE_LOG_Total_Trans_Amt  <     0.07601985120135 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.07601985120135 THEN DO;
197496    +            _NODE_  =                  319;
MPRINT(EM_DIAGRAM):   _NODE_ = 319;
197497    +            _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
197498    +            P_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.71428571428571;
197499    +            P_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.28571428571428;
197500    +            Q_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.71428571428571;
197501    +            Q_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.28571428571428;
197502    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197503    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197504    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197505    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197506    +            END;
MPRINT(EM_DIAGRAM):   END;
197507    +          ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197508    +                0.07601985120135 <= RANGE_LOG_Total_Trans_Amt  AND
197509    +            RANGE_LOG_Total_Trans_Amt  <     0.08497717470581 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.07601985120135 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.08497717470581 THEN DO;
197510    +            _NODE_  =                  320;
MPRINT(EM_DIAGRAM):   _NODE_ = 320;
197511    +            _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
197512    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
197513    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
197514    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
197515    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
197516    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197517    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197518    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197519    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197520    +            END;
MPRINT(EM_DIAGRAM):   END;
197521    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197522    +            _NODE_  =                  321;
MPRINT(EM_DIAGRAM):   _NODE_ = 321;
197523    +            _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
197524    +            P_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.08333333333333;
197525    +            P_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.91666666666666;
197526    +            Q_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.08333333333333;
197527    +            Q_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.91666666666666;
197528    +            V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197529    +            V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197530    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197531    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197532    +            END;
MPRINT(EM_DIAGRAM):   END;
197533    +          END;
MPRINT(EM_DIAGRAM):   END;
197534    +        END;
MPRINT(EM_DIAGRAM):   END;
197535    +      END;
MPRINT(EM_DIAGRAM):   END;
197536    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
197537    +          0.73554854712342 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
197538    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.93801897378516 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.73554854712342 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.93801897378516 THEN DO;
197539    +      _NODE_  =                   32;
MPRINT(EM_DIAGRAM):   _NODE_ = 32;
197540    +      _LEAF_  =                   19;
MPRINT(EM_DIAGRAM):   _LEAF_ = 19;
197541    +      P_Attrition_Flag0  =     0.91891891891891;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.91891891891891;
197542    +      P_Attrition_Flag1  =     0.08108108108108;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08108108108108;
197543    +      Q_Attrition_Flag0  =     0.91891891891891;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.91891891891891;
197544    +      Q_Attrition_Flag1  =     0.08108108108108;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08108108108108;
197545    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197546    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197547    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197548    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197549    +      END;
MPRINT(EM_DIAGRAM):   END;
197550    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
197551    +          0.93801897378516 <= RANGE_SQRT_Avg_Utilization_Ratio  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.93801897378516 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
197552    +      _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
197553    +      _LEAF_  =                   20;
MPRINT(EM_DIAGRAM):   _LEAF_ = 20;
197554    +      P_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.28571428571428;
197555    +      P_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.71428571428571;
197556    +      Q_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.28571428571428;
197557    +      Q_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.71428571428571;
197558    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197559    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197560    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197561    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197562    +      END;
MPRINT(EM_DIAGRAM):   END;
197563    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197564    +      _NODE_  =                   31;
MPRINT(EM_DIAGRAM):   _NODE_ = 31;
197565    +      _LEAF_  =                   18;
MPRINT(EM_DIAGRAM):   _LEAF_ = 18;
197566    +      P_Attrition_Flag0  =     0.93298969072164;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93298969072164;
197567    +      P_Attrition_Flag1  =     0.06701030927835;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06701030927835;
197568    +      Q_Attrition_Flag0  =     0.93298969072164;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93298969072164;
197569    +      Q_Attrition_Flag1  =     0.06701030927835;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06701030927835;
197570    +      V_Attrition_Flag0  =     0.88135593220339;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88135593220339;
197571    +      V_Attrition_Flag1  =     0.11864406779661;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11864406779661;
197572    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197573    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197574    +      END;
MPRINT(EM_DIAGRAM):   END;
197575    +    END;
MPRINT(EM_DIAGRAM):   END;
197576    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197577    +    IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197578    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.30595739522413 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.30595739522413 THEN DO;
197579    +      _NODE_  =                   34;
MPRINT(EM_DIAGRAM):   _NODE_ = 34;
197580    +      _LEAF_  =                   21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 21;
197581    +      P_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.33333333333333;
197582    +      P_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.66666666666666;
197583    +      Q_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.33333333333333;
197584    +      Q_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.66666666666666;
197585    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197586    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197587    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197588    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197589    +      END;
MPRINT(EM_DIAGRAM):   END;
197590    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197591    +          0.30595739522413 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
197592    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.32936001420324 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.30595739522413 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.32936001420324 THEN DO;
197593    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197594    +            0.08965890365538 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.08965890365538 <= RANGE_LOG_Total_Trans_Amt THEN DO;
197595    +        _NODE_  =                   92;
MPRINT(EM_DIAGRAM):   _NODE_ = 92;
197596    +        _LEAF_  =                   23;
MPRINT(EM_DIAGRAM):   _LEAF_ = 23;
197597    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
197598    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
197599    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
197600    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
197601    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197602    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197603    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197604    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197605    +        END;
MPRINT(EM_DIAGRAM):   END;
197606    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197607    +        _NODE_  =                   91;
MPRINT(EM_DIAGRAM):   _NODE_ = 91;
197608    +        _LEAF_  =                   22;
MPRINT(EM_DIAGRAM):   _LEAF_ = 22;
197609    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
197610    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
197611    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
197612    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
197613    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
197614    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
197615    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197616    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197617    +        END;
MPRINT(EM_DIAGRAM):   END;
197618    +      END;
MPRINT(EM_DIAGRAM):   END;
197619    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197620    +          0.32936001420324 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
197621    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.4029256733266 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.32936001420324 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.4029256733266 THEN DO;
197622    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197623    +            0.07868249310586 <= RANGE_LOG_Total_Trans_Amt  AND
197624    +        RANGE_LOG_Total_Trans_Amt  <      0.0930893358681 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.07868249310586 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.0930893358681 THEN DO;
197625    +        _NODE_  =                   94;
MPRINT(EM_DIAGRAM):   _NODE_ = 94;
197626    +        _LEAF_  =                   25;
MPRINT(EM_DIAGRAM):   _LEAF_ = 25;
197627    +        P_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.89361702127659;
197628    +        P_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1063829787234;
197629    +        Q_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.89361702127659;
197630    +        Q_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1063829787234;
197631    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197632    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197633    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197634    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197635    +        END;
MPRINT(EM_DIAGRAM):   END;
197636    +      ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197637    +             0.0930893358681 <= RANGE_LOG_Total_Trans_Amt  AND
197638    +        RANGE_LOG_Total_Trans_Amt  <     0.10593732785727 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.0930893358681 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.10593732785727 THEN DO;
197639    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
197640    +              0.37882399682161 <= RANGE_Total_Revolving_Bal  AND
197641    +          RANGE_Total_Revolving_Bal  <     0.50258243941199 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.37882399682161 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.50258243941199 THEN DO;
197642    +          _NODE_  =                  210;
MPRINT(EM_DIAGRAM):   _NODE_ = 210;
197643    +          _LEAF_  =                   27;
MPRINT(EM_DIAGRAM):   _LEAF_ = 27;
197644    +          P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
197645    +          P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
197646    +          Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
197647    +          Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
197648    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
197649    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
197650    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197651    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197652    +          END;
MPRINT(EM_DIAGRAM):   END;
197653    +        ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
197654    +              0.50258243941199 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.50258243941199 <= RANGE_Total_Revolving_Bal THEN DO;
197655    +          _NODE_  =                  211;
MPRINT(EM_DIAGRAM):   _NODE_ = 211;
197656    +          _LEAF_  =                   28;
MPRINT(EM_DIAGRAM):   _LEAF_ = 28;
197657    +          P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
197658    +          P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
197659    +          Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
197660    +          Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
197661    +          V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
197662    +          V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
197663    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197664    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197665    +          END;
MPRINT(EM_DIAGRAM):   END;
197666    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197667    +          _NODE_  =                  209;
MPRINT(EM_DIAGRAM):   _NODE_ = 209;
197668    +          _LEAF_  =                   26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 26;
197669    +          P_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.08333333333333;
197670    +          P_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.91666666666666;
197671    +          Q_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.08333333333333;
197672    +          Q_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.91666666666666;
197673    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
197674    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
197675    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197676    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197677    +          END;
MPRINT(EM_DIAGRAM):   END;
197678    +        END;
MPRINT(EM_DIAGRAM):   END;
197679    +      ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197680    +            0.10593732785727 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.10593732785727 <= RANGE_LOG_Total_Trans_Amt THEN DO;
197681    +        _NODE_  =                   96;
MPRINT(EM_DIAGRAM):   _NODE_ = 96;
197682    +        _LEAF_  =                   29;
MPRINT(EM_DIAGRAM):   _LEAF_ = 29;
197683    +        P_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.21428571428571;
197684    +        P_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.78571428571428;
197685    +        Q_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.21428571428571;
197686    +        Q_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.78571428571428;
197687    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197688    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197689    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197690    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197691    +        END;
MPRINT(EM_DIAGRAM):   END;
197692    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197693    +        _NODE_  =                   93;
MPRINT(EM_DIAGRAM):   _NODE_ = 93;
197694    +        _LEAF_  =                   24;
MPRINT(EM_DIAGRAM):   _LEAF_ = 24;
197695    +        P_Attrition_Flag0  =     0.94782608695652;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.94782608695652;
197696    +        P_Attrition_Flag1  =     0.05217391304347;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.05217391304347;
197697    +        Q_Attrition_Flag0  =     0.94782608695652;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.94782608695652;
197698    +        Q_Attrition_Flag1  =     0.05217391304347;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.05217391304347;
197699    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197700    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197701    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197702    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197703    +        END;
MPRINT(EM_DIAGRAM):   END;
197704    +      END;
MPRINT(EM_DIAGRAM):   END;
197705    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197706    +      _NODE_  =                   37;
MPRINT(EM_DIAGRAM):   _NODE_ = 37;
197707    +      _LEAF_  =                   30;
MPRINT(EM_DIAGRAM):   _LEAF_ = 30;
197708    +      P_Attrition_Flag0  =     0.97118155619596;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.97118155619596;
197709    +      P_Attrition_Flag1  =     0.02881844380403;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.02881844380403;
197710    +      Q_Attrition_Flag0  =     0.97118155619596;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.97118155619596;
197711    +      Q_Attrition_Flag1  =     0.02881844380403;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.02881844380403;
197712    +      V_Attrition_Flag0  =     0.96938775510204;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.96938775510204;
197713    +      V_Attrition_Flag1  =     0.03061224489795;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.03061224489795;
197714    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197715    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197716    +      END;
MPRINT(EM_DIAGRAM):   END;
197717    +    END;
MPRINT(EM_DIAGRAM):   END;
197718    +  END;
MPRINT(EM_DIAGRAM):   END;
197719    +ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197720    +      0.11189168159095 <= RANGE_LOG_Total_Trans_Amt  AND
197721    +  RANGE_LOG_Total_Trans_Amt  <     0.18180873549344 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11189168159095 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.18180873549344 THEN DO;
197722    +  IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
197723    +        0.23122765196662 <= RANGE_Total_Revolving_Bal  AND
197724    +    RANGE_Total_Revolving_Bal  <     0.43365117203019 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.23122765196662 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.43365117203019 THEN DO;
197725    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
197726    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
197727    +    IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ) THEN DO;
197728    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197729    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.44589881136633 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.44589881136633 THEN DO;
197730    +        _NODE_  =                  117;
MPRINT(EM_DIAGRAM):   _NODE_ = 117;
197731    +        _LEAF_  =                   39;
MPRINT(EM_DIAGRAM):   _LEAF_ = 39;
197732    +        P_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.16666666666666;
197733    +        P_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.83333333333333;
197734    +        Q_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.16666666666666;
197735    +        Q_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.83333333333333;
197736    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197737    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197738    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197739    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197740    +        END;
MPRINT(EM_DIAGRAM):   END;
197741    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197742    +            0.49070999374543 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49070999374543 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
197743    +        _NODE_  =                  119;
MPRINT(EM_DIAGRAM):   _NODE_ = 119;
197744    +        _LEAF_  =                   41;
MPRINT(EM_DIAGRAM):   _LEAF_ = 41;
197745    +        P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
197746    +        P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
197747    +        Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
197748    +        Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
197749    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197750    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197751    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197752    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197753    +        END;
MPRINT(EM_DIAGRAM):   END;
197754    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197755    +        _NODE_  =                  118;
MPRINT(EM_DIAGRAM):   _NODE_ = 118;
197756    +        _LEAF_  =                   40;
MPRINT(EM_DIAGRAM):   _LEAF_ = 40;
197757    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
197758    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
197759    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
197760    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
197761    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
197762    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
197763    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197764    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197765    +        END;
MPRINT(EM_DIAGRAM):   END;
197766    +      END;
MPRINT(EM_DIAGRAM):   END;
197767    +    ELSE IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('2' ) THEN DO;
197768    +      _NODE_  =                   43;
MPRINT(EM_DIAGRAM):   _NODE_ = 43;
197769    +      _LEAF_  =                   42;
MPRINT(EM_DIAGRAM):   _LEAF_ = 42;
197770    +      P_Attrition_Flag0  =     0.48148148148148;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.48148148148148;
197771    +      P_Attrition_Flag1  =     0.51851851851851;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.51851851851851;
197772    +      Q_Attrition_Flag0  =     0.48148148148148;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.48148148148148;
197773    +      Q_Attrition_Flag1  =     0.51851851851851;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.51851851851851;
197774    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
197775    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
197776    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197777    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197778    +      END;
MPRINT(EM_DIAGRAM):   END;
197779    +    ELSE IF _ARBFMT_12 IN ('3' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('3' ) THEN DO;
197780    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197781    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.40123192150453 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.40123192150453 THEN DO;
197782    +        _NODE_  =                  123;
MPRINT(EM_DIAGRAM):   _NODE_ = 123;
197783    +        _LEAF_  =                   43;
MPRINT(EM_DIAGRAM):   _LEAF_ = 43;
197784    +        P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
197785    +        P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
197786    +        Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
197787    +        Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
197788    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197789    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197790    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197791    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197792    +        END;
MPRINT(EM_DIAGRAM):   END;
197793    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197794    +        _NODE_  =                  124;
MPRINT(EM_DIAGRAM):   _NODE_ = 124;
197795    +        _LEAF_  =                   44;
MPRINT(EM_DIAGRAM):   _LEAF_ = 44;
197796    +        P_Attrition_Flag0  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.91666666666666;
197797    +        P_Attrition_Flag1  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08333333333333;
197798    +        Q_Attrition_Flag0  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.91666666666666;
197799    +        Q_Attrition_Flag1  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08333333333333;
197800    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
197801    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
197802    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197803    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197804    +        END;
MPRINT(EM_DIAGRAM):   END;
197805    +      END;
MPRINT(EM_DIAGRAM):   END;
197806    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197807    +      _NODE_  =                   45;
MPRINT(EM_DIAGRAM):   _NODE_ = 45;
197808    +      _LEAF_  =                   45;
MPRINT(EM_DIAGRAM):   _LEAF_ = 45;
197809    +      P_Attrition_Flag0  =     0.93650793650793;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93650793650793;
197810    +      P_Attrition_Flag1  =     0.06349206349206;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06349206349206;
197811    +      Q_Attrition_Flag0  =     0.93650793650793;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93650793650793;
197812    +      Q_Attrition_Flag1  =     0.06349206349206;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06349206349206;
197813    +      V_Attrition_Flag0  =     0.82608695652173;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.82608695652173;
197814    +      V_Attrition_Flag1  =     0.17391304347826;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.17391304347826;
197815    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197816    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197817    +      END;
MPRINT(EM_DIAGRAM):   END;
197818    +    END;
MPRINT(EM_DIAGRAM):   END;
197819    +  ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
197820    +        0.43365117203019 <= RANGE_Total_Revolving_Bal  AND
197821    +    RANGE_Total_Revolving_Bal  <     0.94656336909018 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.43365117203019 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.94656336909018 THEN DO;
197822    +    IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
197823    +          0.57734961836774 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
197824    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.67857196850263 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.57734961836774 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.67857196850263 THEN DO;
197825    +      _NODE_  =                   47;
MPRINT(EM_DIAGRAM):   _NODE_ = 47;
197826    +      _LEAF_  =                   47;
MPRINT(EM_DIAGRAM):   _LEAF_ = 47;
197827    +      P_Attrition_Flag0  =     0.66037735849056;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66037735849056;
197828    +      P_Attrition_Flag1  =     0.33962264150943;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33962264150943;
197829    +      Q_Attrition_Flag0  =     0.66037735849056;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66037735849056;
197830    +      Q_Attrition_Flag1  =     0.33962264150943;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33962264150943;
197831    +      V_Attrition_Flag0  =     0.84210526315789;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.84210526315789;
197832    +      V_Attrition_Flag1  =      0.1578947368421;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.1578947368421;
197833    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197834    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197835    +      END;
MPRINT(EM_DIAGRAM):   END;
197836    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
197837    +          0.67857196850263 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
197838    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.88446718550085 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.67857196850263 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.88446718550085 THEN DO;
197839    +      _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
197840    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
197841    +      IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
197842    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
197843    +              0.63567739372268 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.63567739372268 <= RANGE_Total_Revolving_Bal THEN DO;
197844    +          _NODE_  =                  267;
MPRINT(EM_DIAGRAM):   _NODE_ = 267;
197845    +          _LEAF_  =                   49;
MPRINT(EM_DIAGRAM):   _LEAF_ = 49;
197846    +          P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
197847    +          P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
197848    +          Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
197849    +          Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
197850    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197851    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197852    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197853    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197854    +          END;
MPRINT(EM_DIAGRAM):   END;
197855    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197856    +          _NODE_  =                  266;
MPRINT(EM_DIAGRAM):   _NODE_ = 266;
197857    +          _LEAF_  =                   48;
MPRINT(EM_DIAGRAM):   _LEAF_ = 48;
197858    +          P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
197859    +          P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
197860    +          Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
197861    +          Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
197862    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197863    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
197864    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197865    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197866    +          END;
MPRINT(EM_DIAGRAM):   END;
197867    +        END;
MPRINT(EM_DIAGRAM):   END;
197868    +      ELSE IF _ARBFMT_12 IN ('6' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ,'4' ) THEN DO;
197869    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197870    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.35478871362639 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.35478871362639 THEN DO;
197871    +          _NODE_  =                  268;
MPRINT(EM_DIAGRAM):   _NODE_ = 268;
197872    +          _LEAF_  =                   50;
MPRINT(EM_DIAGRAM):   _LEAF_ = 50;
197873    +          P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
197874    +          P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
197875    +          Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
197876    +          Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
197877    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
197878    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
197879    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197880    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197881    +          END;
MPRINT(EM_DIAGRAM):   END;
197882    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197883    +              0.35478871362639 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
197884    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39278572866989 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.35478871362639 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39278572866989 THEN DO;
197885    +          _NODE_  =                  269;
MPRINT(EM_DIAGRAM):   _NODE_ = 269;
197886    +          _LEAF_  =                   51;
MPRINT(EM_DIAGRAM):   _LEAF_ = 51;
197887    +          P_Attrition_Flag0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.55555555555555;
197888    +          P_Attrition_Flag1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.44444444444444;
197889    +          Q_Attrition_Flag0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.55555555555555;
197890    +          Q_Attrition_Flag1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.44444444444444;
197891    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
197892    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197893    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197894    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197895    +          END;
MPRINT(EM_DIAGRAM):   END;
197896    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
197897    +              0.46338100692678 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46338100692678 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
197898    +          _NODE_  =                  271;
MPRINT(EM_DIAGRAM):   _NODE_ = 271;
197899    +          _LEAF_  =                   53;
MPRINT(EM_DIAGRAM):   _LEAF_ = 53;
197900    +          P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
197901    +          P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
197902    +          Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
197903    +          Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
197904    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197905    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197906    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197907    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197908    +          END;
MPRINT(EM_DIAGRAM):   END;
197909    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197910    +          _NODE_  =                  270;
MPRINT(EM_DIAGRAM):   _NODE_ = 270;
197911    +          _LEAF_  =                   52;
MPRINT(EM_DIAGRAM):   _LEAF_ = 52;
197912    +          P_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.84615384615384;
197913    +          P_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.15384615384615;
197914    +          Q_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.84615384615384;
197915    +          Q_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.15384615384615;
197916    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197917    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197918    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197919    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197920    +          END;
MPRINT(EM_DIAGRAM):   END;
197921    +        END;
MPRINT(EM_DIAGRAM):   END;
197922    +      ELSE IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('7' ) THEN DO;
197923    +        _NODE_  =                  137;
MPRINT(EM_DIAGRAM):   _NODE_ = 137;
197924    +        _LEAF_  =                   54;
MPRINT(EM_DIAGRAM):   _LEAF_ = 54;
197925    +        P_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92;
197926    +        P_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08;
197927    +        Q_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92;
197928    +        Q_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08;
197929    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197930    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197931    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197932    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197933    +        END;
MPRINT(EM_DIAGRAM):   END;
197934    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197935    +        _NODE_  =                  138;
MPRINT(EM_DIAGRAM):   _NODE_ = 138;
197936    +        _LEAF_  =                   55;
MPRINT(EM_DIAGRAM):   _LEAF_ = 55;
197937    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
197938    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
197939    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
197940    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
197941    +        V_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88888888888888;
197942    +        V_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11111111111111;
197943    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197944    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197945    +        END;
MPRINT(EM_DIAGRAM):   END;
197946    +      END;
MPRINT(EM_DIAGRAM):   END;
197947    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
197948    +          0.88446718550085 <= RANGE_SQRT_Avg_Utilization_Ratio  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.88446718550085 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
197949    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197950    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.4282290309541 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.4282290309541 THEN DO;
197951    +        _NODE_  =                  139;
MPRINT(EM_DIAGRAM):   _NODE_ = 139;
197952    +        _LEAF_  =                   56;
MPRINT(EM_DIAGRAM):   _LEAF_ = 56;
197953    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
197954    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
197955    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
197956    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
197957    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
197958    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
197959    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
197960    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
197961    +        END;
MPRINT(EM_DIAGRAM):   END;
197962    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197963    +             0.4282290309541 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
197964    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.46117076258442 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.4282290309541 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.46117076258442 THEN DO;
197965    +        _NODE_  =                  140;
MPRINT(EM_DIAGRAM):   _NODE_ = 140;
197966    +        _LEAF_  =                   57;
MPRINT(EM_DIAGRAM):   _LEAF_ = 57;
197967    +        P_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.5;
197968    +        P_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.5;
197969    +        Q_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.5;
197970    +        Q_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.5;
197971    +        V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
197972    +        V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
197973    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197974    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197975    +        END;
MPRINT(EM_DIAGRAM):   END;
197976    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
197977    +            0.55833789970036 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.55833789970036 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
197978    +        _NODE_  =                  142;
MPRINT(EM_DIAGRAM):   _NODE_ = 142;
197979    +        _LEAF_  =                   61;
MPRINT(EM_DIAGRAM):   _LEAF_ = 61;
197980    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
197981    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
197982    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
197983    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
197984    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197985    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
197986    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
197987    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
197988    +        END;
MPRINT(EM_DIAGRAM):   END;
197989    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
197990    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
197991    +          RANGE_LOG_Total_Trans_Amt  <     0.13809305548926 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.13809305548926 THEN DO;
197992    +          _NODE_  =                  274;
MPRINT(EM_DIAGRAM):   _NODE_ = 274;
197993    +          _LEAF_  =                   58;
MPRINT(EM_DIAGRAM):   _LEAF_ = 58;
197994    +          P_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.6;
197995    +          P_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.4;
197996    +          Q_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.6;
197997    +          Q_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.4;
197998    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
197999    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198000    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198001    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198002    +          END;
MPRINT(EM_DIAGRAM):   END;
198003    +        ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198004    +               0.1555658134984 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.1555658134984 <= RANGE_LOG_Total_Trans_Amt THEN DO;
198005    +          _NODE_  =                  276;
MPRINT(EM_DIAGRAM):   _NODE_ = 276;
198006    +          _LEAF_  =                   60;
MPRINT(EM_DIAGRAM):   _LEAF_ = 60;
198007    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
198008    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
198009    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
198010    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
198011    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198012    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198013    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198014    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198015    +          END;
MPRINT(EM_DIAGRAM):   END;
198016    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198017    +          _NODE_  =                  275;
MPRINT(EM_DIAGRAM):   _NODE_ = 275;
198018    +          _LEAF_  =                   59;
MPRINT(EM_DIAGRAM):   _LEAF_ = 59;
198019    +          P_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.125;
198020    +          P_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.875;
198021    +          Q_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.125;
198022    +          Q_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.875;
198023    +          V_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.6;
198024    +          V_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.4;
198025    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198026    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198027    +          END;
MPRINT(EM_DIAGRAM):   END;
198028    +        END;
MPRINT(EM_DIAGRAM):   END;
198029    +      END;
MPRINT(EM_DIAGRAM):   END;
198030    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198031    +      _NODE_  =                   46;
MPRINT(EM_DIAGRAM):   _NODE_ = 46;
198032    +      _LEAF_  =                   46;
MPRINT(EM_DIAGRAM):   _LEAF_ = 46;
198033    +      P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
198034    +      P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
198035    +      Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
198036    +      Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
198037    +      V_Attrition_Flag0  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.93333333333333;
198038    +      V_Attrition_Flag1  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.06666666666666;
198039    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198040    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198041    +      END;
MPRINT(EM_DIAGRAM):   END;
198042    +    END;
MPRINT(EM_DIAGRAM):   END;
198043    +  ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
198044    +        0.94656336909018 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.94656336909018 <= RANGE_Total_Revolving_Bal THEN DO;
198045    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198046    +          0.38148119675298 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
198047    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.43211655021394 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.38148119675298 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.43211655021394 THEN DO;
198048    +      _NODE_  =                   51;
MPRINT(EM_DIAGRAM):   _NODE_ = 51;
198049    +      _LEAF_  =                   63;
MPRINT(EM_DIAGRAM):   _LEAF_ = 63;
198050    +      P_Attrition_Flag0  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.36363636363636;
198051    +      P_Attrition_Flag1  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.63636363636363;
198052    +      Q_Attrition_Flag0  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.36363636363636;
198053    +      Q_Attrition_Flag1  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.63636363636363;
198054    +      V_Attrition_Flag0  =                  0.1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.1;
198055    +      V_Attrition_Flag1  =                  0.9;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.9;
198056    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198057    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198058    +      END;
MPRINT(EM_DIAGRAM):   END;
198059    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198060    +          0.43211655021394 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
198061    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.45174095048192 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.43211655021394 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.45174095048192 THEN DO;
198062    +      _NODE_  =                   52;
MPRINT(EM_DIAGRAM):   _NODE_ = 52;
198063    +      _LEAF_  =                   64;
MPRINT(EM_DIAGRAM):   _LEAF_ = 64;
198064    +      P_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.5;
198065    +      P_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.5;
198066    +      Q_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.5;
198067    +      Q_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.5;
198068    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
198069    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
198070    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198071    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198072    +      END;
MPRINT(EM_DIAGRAM):   END;
198073    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198074    +          0.45174095048192 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45174095048192 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
198075    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198076    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.43248733988054 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.43248733988054 THEN DO;
198077    +        _NODE_  =                  150;
MPRINT(EM_DIAGRAM):   _NODE_ = 150;
198078    +        _LEAF_  =                   65;
MPRINT(EM_DIAGRAM):   _LEAF_ = 65;
198079    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
198080    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
198081    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
198082    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
198083    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198084    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198085    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198086    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198087    +        END;
MPRINT(EM_DIAGRAM):   END;
198088    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198089    +            0.43248733988054 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
198090    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.47205488095581 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43248733988054 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.47205488095581 THEN DO;
198091    +        _NODE_  =                  151;
MPRINT(EM_DIAGRAM):   _NODE_ = 151;
198092    +        _LEAF_  =                   66;
MPRINT(EM_DIAGRAM):   _LEAF_ = 66;
198093    +        P_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.6;
198094    +        P_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.4;
198095    +        Q_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.6;
198096    +        Q_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.4;
198097    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198098    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198099    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198100    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198101    +        END;
MPRINT(EM_DIAGRAM):   END;
198102    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198103    +            0.53325640118613 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.53325640118613 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
198104    +        _NODE_  =                  153;
MPRINT(EM_DIAGRAM):   _NODE_ = 153;
198105    +        _LEAF_  =                   68;
MPRINT(EM_DIAGRAM):   _LEAF_ = 68;
198106    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
198107    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
198108    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
198109    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
198110    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198111    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198112    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198113    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198114    +        END;
MPRINT(EM_DIAGRAM):   END;
198115    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198116    +        _NODE_  =                  152;
MPRINT(EM_DIAGRAM):   _NODE_ = 152;
198117    +        _LEAF_  =                   67;
MPRINT(EM_DIAGRAM):   _LEAF_ = 67;
198118    +        P_Attrition_Flag0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.9090909090909;
198119    +        P_Attrition_Flag1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.09090909090909;
198120    +        Q_Attrition_Flag0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.9090909090909;
198121    +        Q_Attrition_Flag1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.09090909090909;
198122    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198123    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198124    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198125    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198126    +        END;
MPRINT(EM_DIAGRAM):   END;
198127    +      END;
MPRINT(EM_DIAGRAM):   END;
198128    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198129    +      _NODE_  =                   50;
MPRINT(EM_DIAGRAM):   _NODE_ = 50;
198130    +      _LEAF_  =                   62;
MPRINT(EM_DIAGRAM):   _LEAF_ = 62;
198131    +      P_Attrition_Flag0  =     0.04651162790697;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.04651162790697;
198132    +      P_Attrition_Flag1  =     0.95348837209302;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.95348837209302;
198133    +      Q_Attrition_Flag0  =     0.04651162790697;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.04651162790697;
198134    +      Q_Attrition_Flag1  =     0.95348837209302;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.95348837209302;
198135    +      V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
198136    +      V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
198137    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198138    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198139    +      END;
MPRINT(EM_DIAGRAM):   END;
198140    +    END;
MPRINT(EM_DIAGRAM):   END;
198141    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198142    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
198143    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
198144    +    IF _ARBFMT_12 IN ('6' ,'7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('6' ,'7' ) THEN DO;
198145    +      _NODE_  =                   38;
MPRINT(EM_DIAGRAM):   _NODE_ = 38;
198146    +      _LEAF_  =                   31;
MPRINT(EM_DIAGRAM):   _LEAF_ = 31;
198147    +      P_Attrition_Flag0  =                 0.96;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96;
198148    +      P_Attrition_Flag1  =                 0.04;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.04;
198149    +      Q_Attrition_Flag0  =                 0.96;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96;
198150    +      Q_Attrition_Flag1  =                 0.04;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.04;
198151    +      V_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.84615384615384;
198152    +      V_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.15384615384615;
198153    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198154    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198155    +      END;
MPRINT(EM_DIAGRAM):   END;
198156    +    ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
198157    +      _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
198158    +      _LEAF_  =                   32;
MPRINT(EM_DIAGRAM):   _LEAF_ = 32;
198159    +      P_Attrition_Flag0  =     0.29032258064516;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.29032258064516;
198160    +      P_Attrition_Flag1  =     0.70967741935483;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.70967741935483;
198161    +      Q_Attrition_Flag0  =     0.29032258064516;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.29032258064516;
198162    +      Q_Attrition_Flag1  =     0.70967741935483;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.70967741935483;
198163    +      V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
198164    +      V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
198165    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198166    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198167    +      END;
MPRINT(EM_DIAGRAM):   END;
198168    +    ELSE IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
198169    +      _NODE_  =                   40;
MPRINT(EM_DIAGRAM):   _NODE_ = 40;
198170    +      _LEAF_  =                   33;
MPRINT(EM_DIAGRAM):   _LEAF_ = 33;
198171    +      P_Attrition_Flag0  =     0.11403508771929;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.11403508771929;
198172    +      P_Attrition_Flag1  =      0.8859649122807;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8859649122807;
198173    +      Q_Attrition_Flag0  =     0.11403508771929;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.11403508771929;
198174    +      Q_Attrition_Flag1  =      0.8859649122807;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8859649122807;
198175    +      V_Attrition_Flag0  =     0.21153846153846;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.21153846153846;
198176    +      V_Attrition_Flag1  =     0.78846153846153;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.78846153846153;
198177    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198178    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198179    +      END;
MPRINT(EM_DIAGRAM):   END;
198180    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198181    +      _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
198182    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
198183    +      IF _ARBFMT_12 IN ('9' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ) THEN DO;
198184    +        _NODE_  =                  113;
MPRINT(EM_DIAGRAM):   _NODE_ = 113;
198185    +        _LEAF_  =                   34;
MPRINT(EM_DIAGRAM):   _LEAF_ = 34;
198186    +        P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
198187    +        P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
198188    +        Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
198189    +        Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
198190    +        V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
198191    +        V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
198192    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198193    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198194    +        END;
MPRINT(EM_DIAGRAM):   END;
198195    +      ELSE IF _ARBFMT_12 IN ('8' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('8' ) THEN DO;
198196    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198197    +              0.14717998848492 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.14717998848492 <= RANGE_LOG_Total_Trans_Amt THEN DO;
198198    +          _NODE_  =                  238;
MPRINT(EM_DIAGRAM):   _NODE_ = 238;
198199    +          _LEAF_  =                   36;
MPRINT(EM_DIAGRAM):   _LEAF_ = 36;
198200    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
198201    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
198202    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
198203    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
198204    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198205    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198206    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198207    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198208    +          END;
MPRINT(EM_DIAGRAM):   END;
198209    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198210    +          _NODE_  =                  237;
MPRINT(EM_DIAGRAM):   _NODE_ = 237;
198211    +          _LEAF_  =                   35;
MPRINT(EM_DIAGRAM):   _LEAF_ = 35;
198212    +          P_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.71428571428571;
198213    +          P_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.28571428571428;
198214    +          Q_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.71428571428571;
198215    +          Q_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.28571428571428;
198216    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
198217    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
198218    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198219    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198220    +          END;
MPRINT(EM_DIAGRAM):   END;
198221    +        END;
MPRINT(EM_DIAGRAM):   END;
198222    +      ELSE IF _ARBFMT_12 IN ('6' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ,'2' ) THEN DO;
198223    +        _NODE_  =                  115;
MPRINT(EM_DIAGRAM):   _NODE_ = 115;
198224    +        _LEAF_  =                   37;
MPRINT(EM_DIAGRAM):   _LEAF_ = 37;
198225    +        P_Attrition_Flag0  =     0.06944444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.06944444444444;
198226    +        P_Attrition_Flag1  =     0.93055555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.93055555555555;
198227    +        Q_Attrition_Flag0  =     0.06944444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.06944444444444;
198228    +        Q_Attrition_Flag1  =     0.93055555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.93055555555555;
198229    +        V_Attrition_Flag0  =     0.05882352941176;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.05882352941176;
198230    +        V_Attrition_Flag1  =     0.94117647058823;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.94117647058823;
198231    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198232    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198233    +        END;
MPRINT(EM_DIAGRAM):   END;
198234    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198235    +        _NODE_  =                  116;
MPRINT(EM_DIAGRAM):   _NODE_ = 116;
198236    +        _LEAF_  =                   38;
MPRINT(EM_DIAGRAM):   _LEAF_ = 38;
198237    +        P_Attrition_Flag0  =      0.0188679245283;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.0188679245283;
198238    +        P_Attrition_Flag1  =     0.98113207547169;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.98113207547169;
198239    +        Q_Attrition_Flag0  =      0.0188679245283;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.0188679245283;
198240    +        Q_Attrition_Flag1  =     0.98113207547169;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.98113207547169;
198241    +        V_Attrition_Flag0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.06666666666666;
198242    +        V_Attrition_Flag1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.93333333333333;
198243    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198244    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198245    +        END;
MPRINT(EM_DIAGRAM):   END;
198246    +      END;
MPRINT(EM_DIAGRAM):   END;
198247    +    END;
MPRINT(EM_DIAGRAM):   END;
198248    +  END;
MPRINT(EM_DIAGRAM):   END;
198249    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198250    +  IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198251    +        0.33903522463476 <= RANGE_LOG_Total_Trans_Amt  AND
198252    +    RANGE_LOG_Total_Trans_Amt  <      0.5292669551731 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.33903522463476 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.5292669551731 THEN DO;
198253    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
198254    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
198255    +    IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
198256    +      IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
198257    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.15336512310644 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.15336512310644 THEN DO;
198258    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198259    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.42306142585878 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.42306142585878 THEN DO;
198260    +          _NODE_  =                  300;
MPRINT(EM_DIAGRAM):   _NODE_ = 300;
198261    +          _LEAF_  =                   76;
MPRINT(EM_DIAGRAM):   _LEAF_ = 76;
198262    +          P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
198263    +          P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
198264    +          Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
198265    +          Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
198266    +          V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
198267    +          V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
198268    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198269    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198270    +          END;
MPRINT(EM_DIAGRAM):   END;
198271    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198272    +              0.46814885494745 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
198273    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.49667641774778 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.46814885494745 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.49667641774778 THEN DO;
198274    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198275    +                0.46885113560247 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46885113560247 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
198276    +            _NODE_  =                  366;
MPRINT(EM_DIAGRAM):   _NODE_ = 366;
198277    +            _LEAF_  =                   79;
MPRINT(EM_DIAGRAM):   _LEAF_ = 79;
198278    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
198279    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
198280    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
198281    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
198282    +            V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198283    +            V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198284    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198285    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198286    +            END;
MPRINT(EM_DIAGRAM):   END;
198287    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198288    +            _NODE_  =                  365;
MPRINT(EM_DIAGRAM):   _NODE_ = 365;
198289    +            _LEAF_  =                   78;
MPRINT(EM_DIAGRAM):   _LEAF_ = 78;
198290    +            P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
198291    +            P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
198292    +            Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
198293    +            Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
198294    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198295    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198296    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198297    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198298    +            END;
MPRINT(EM_DIAGRAM):   END;
198299    +          END;
MPRINT(EM_DIAGRAM):   END;
198300    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198301    +              0.49667641774778 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49667641774778 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
198302    +          _NODE_  =                  303;
MPRINT(EM_DIAGRAM):   _NODE_ = 303;
198303    +          _LEAF_  =                   80;
MPRINT(EM_DIAGRAM):   _LEAF_ = 80;
198304    +          P_Attrition_Flag0  =     0.34615384615384;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.34615384615384;
198305    +          P_Attrition_Flag1  =     0.65384615384615;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.65384615384615;
198306    +          Q_Attrition_Flag0  =     0.34615384615384;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.34615384615384;
198307    +          Q_Attrition_Flag1  =     0.65384615384615;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.65384615384615;
198308    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
198309    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
198310    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198311    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198312    +          END;
MPRINT(EM_DIAGRAM):   END;
198313    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198314    +          _NODE_  =                  301;
MPRINT(EM_DIAGRAM):   _NODE_ = 301;
198315    +          _LEAF_  =                   77;
MPRINT(EM_DIAGRAM):   _LEAF_ = 77;
198316    +          P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
198317    +          P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
198318    +          Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
198319    +          Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
198320    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
198321    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
198322    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198323    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198324    +          END;
MPRINT(EM_DIAGRAM):   END;
198325    +        END;
MPRINT(EM_DIAGRAM):   END;
198326    +      ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
198327    +            0.15336512310644 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
198328    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.22033442437469 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.15336512310644 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.22033442437469 THEN DO;
198329    +        _NODE_  =                  171;
MPRINT(EM_DIAGRAM):   _NODE_ = 171;
198330    +        _LEAF_  =                   81;
MPRINT(EM_DIAGRAM):   _LEAF_ = 81;
198331    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
198332    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
198333    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
198334    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
198335    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198336    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198337    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198338    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198339    +        END;
MPRINT(EM_DIAGRAM):   END;
198340    +      ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
198341    +            0.22033442437469 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
198342    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.23141388059994 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.22033442437469 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.23141388059994 THEN DO;
198343    +        _NODE_  =                  172;
MPRINT(EM_DIAGRAM):   _NODE_ = 172;
198344    +        _LEAF_  =                   82;
MPRINT(EM_DIAGRAM):   _LEAF_ = 82;
198345    +        P_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.42857142857142;
198346    +        P_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.57142857142857;
198347    +        Q_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.42857142857142;
198348    +        Q_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.57142857142857;
198349    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
198350    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
198351    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198352    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198353    +        END;
MPRINT(EM_DIAGRAM):   END;
198354    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198355    +        _NODE_  =                  173;
MPRINT(EM_DIAGRAM):   _NODE_ = 173;
198356    +        _LEAF_  =                   83;
MPRINT(EM_DIAGRAM):   _LEAF_ = 83;
198357    +        P_Attrition_Flag0  =     0.98443579766536;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.98443579766536;
198358    +        P_Attrition_Flag1  =     0.01556420233463;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.01556420233463;
198359    +        Q_Attrition_Flag0  =     0.98443579766536;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.98443579766536;
198360    +        Q_Attrition_Flag1  =     0.01556420233463;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.01556420233463;
198361    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198362    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198363    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198364    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198365    +        END;
MPRINT(EM_DIAGRAM):   END;
198366    +      END;
MPRINT(EM_DIAGRAM):   END;
198367    +    ELSE IF _ARBFMT_12 IN ('6' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ) THEN DO;
198368    +      IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
198369    +            0.36372665872069 <= RANGE_Total_Revolving_Bal  AND
198370    +        RANGE_Total_Revolving_Bal  <     0.49841080651569 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.36372665872069 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.49841080651569 THEN DO;
198371    +        _NODE_  =                  175;
MPRINT(EM_DIAGRAM):   _NODE_ = 175;
198372    +        _LEAF_  =                   85;
MPRINT(EM_DIAGRAM):   _LEAF_ = 85;
198373    +        P_Attrition_Flag0  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.25;
198374    +        P_Attrition_Flag1  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.75;
198375    +        Q_Attrition_Flag0  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.25;
198376    +        Q_Attrition_Flag1  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.75;
198377    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198378    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198379    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198380    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198381    +        END;
MPRINT(EM_DIAGRAM):   END;
198382    +      ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
198383    +            0.49841080651569 <= RANGE_Total_Revolving_Bal  AND
198384    +        RANGE_Total_Revolving_Bal  <     0.98986889153754 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.49841080651569 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.98986889153754 THEN DO;
198385    +        _NODE_  =                  176;
MPRINT(EM_DIAGRAM):   _NODE_ = 176;
198386    +        _LEAF_  =                   86;
MPRINT(EM_DIAGRAM):   _LEAF_ = 86;
198387    +        P_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.7;
198388    +        P_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.3;
198389    +        Q_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.7;
198390    +        Q_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.3;
198391    +        V_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.57142857142857;
198392    +        V_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.42857142857142;
198393    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198394    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198395    +        END;
MPRINT(EM_DIAGRAM):   END;
198396    +      ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
198397    +            0.98986889153754 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.98986889153754 <= RANGE_Total_Revolving_Bal THEN DO;
198398    +        _NODE_  =                  177;
MPRINT(EM_DIAGRAM):   _NODE_ = 177;
198399    +        _LEAF_  =                   87;
MPRINT(EM_DIAGRAM):   _LEAF_ = 87;
198400    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
198401    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
198402    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
198403    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
198404    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198405    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198406    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198407    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198408    +        END;
MPRINT(EM_DIAGRAM):   END;
198409    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198410    +        _NODE_  =                  174;
MPRINT(EM_DIAGRAM):   _NODE_ = 174;
198411    +        _LEAF_  =                   84;
MPRINT(EM_DIAGRAM):   _LEAF_ = 84;
198412    +        P_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.02325581395348;
198413    +        P_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.97674418604651;
198414    +        Q_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.02325581395348;
198415    +        Q_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.97674418604651;
198416    +        V_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.08333333333333;
198417    +        V_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.91666666666666;
198418    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198419    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198420    +        END;
MPRINT(EM_DIAGRAM):   END;
198421    +      END;
MPRINT(EM_DIAGRAM):   END;
198422    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198423    +      _NODE_  =                   60;
MPRINT(EM_DIAGRAM):   _NODE_ = 60;
198424    +      _LEAF_  =                   88;
MPRINT(EM_DIAGRAM):   _LEAF_ = 88;
198425    +      P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
198426    +      P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
198427    +      Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
198428    +      Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
198429    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198430    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198431    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198432    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198433    +      END;
MPRINT(EM_DIAGRAM):   END;
198434    +    END;
MPRINT(EM_DIAGRAM):   END;
198435    +  ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198436    +         0.5292669551731 <= RANGE_LOG_Total_Trans_Amt  AND
198437    +    RANGE_LOG_Total_Trans_Amt  <     0.68217373468557 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.5292669551731 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.68217373468557 THEN DO;
198438    +    IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
198439    +      RANGE_Total_Revolving_Bal  <     0.25129121970599 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.25129121970599 THEN DO;
198440    +      _NODE_  =                   61;
MPRINT(EM_DIAGRAM):   _NODE_ = 61;
198441    +      _LEAF_  =                   89;
MPRINT(EM_DIAGRAM):   _LEAF_ = 89;
198442    +      P_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.02325581395348;
198443    +      P_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.97674418604651;
198444    +      Q_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.02325581395348;
198445    +      Q_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.97674418604651;
198446    +      V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
198447    +      V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
198448    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198449    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198450    +      END;
MPRINT(EM_DIAGRAM):   END;
198451    +    ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
198452    +          0.25129121970599 <= RANGE_Total_Revolving_Bal  AND
198453    +      RANGE_Total_Revolving_Bal  <      0.3917361938816 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.25129121970599 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.3917361938816 THEN DO;
198454    +      _NODE_  =                   62;
MPRINT(EM_DIAGRAM):   _NODE_ = 62;
198455    +      _LEAF_  =                   90;
MPRINT(EM_DIAGRAM):   _LEAF_ = 90;
198456    +      P_Attrition_Flag0  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.44444444444444;
198457    +      P_Attrition_Flag1  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.55555555555555;
198458    +      Q_Attrition_Flag0  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.44444444444444;
198459    +      Q_Attrition_Flag1  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.55555555555555;
198460    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
198461    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
198462    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198463    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198464    +      END;
MPRINT(EM_DIAGRAM):   END;
198465    +    ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
198466    +          0.86809694080254 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.86809694080254 <= RANGE_Total_Revolving_Bal THEN DO;
198467    +      _NODE_  =                   64;
MPRINT(EM_DIAGRAM):   _NODE_ = 64;
198468    +      _LEAF_  =                   95;
MPRINT(EM_DIAGRAM):   _LEAF_ = 95;
198469    +      P_Attrition_Flag0  =                 0.35;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.35;
198470    +      P_Attrition_Flag1  =                 0.65;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.65;
198471    +      Q_Attrition_Flag0  =                 0.35;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.35;
198472    +      Q_Attrition_Flag1  =                 0.65;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.65;
198473    +      V_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.125;
198474    +      V_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.875;
198475    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198476    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198477    +      END;
MPRINT(EM_DIAGRAM):   END;
198478    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198479    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198480    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <      0.4303969058852 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.4303969058852 THEN DO;
198481    +        _NODE_  =                  180;
MPRINT(EM_DIAGRAM):   _NODE_ = 180;
198482    +        _LEAF_  =                   91;
MPRINT(EM_DIAGRAM):   _LEAF_ = 91;
198483    +        P_Attrition_Flag0  =     0.88235294117647;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.88235294117647;
198484    +        P_Attrition_Flag1  =     0.11764705882352;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.11764705882352;
198485    +        Q_Attrition_Flag0  =     0.88235294117647;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.88235294117647;
198486    +        Q_Attrition_Flag1  =     0.11764705882352;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.11764705882352;
198487    +        V_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.8;
198488    +        V_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.2;
198489    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198490    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198491    +        END;
MPRINT(EM_DIAGRAM):   END;
198492    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198493    +            0.47044734524227 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
198494    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.48468025968557 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.47044734524227 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.48468025968557 THEN DO;
198495    +        _NODE_  =                  182;
MPRINT(EM_DIAGRAM):   _NODE_ = 182;
198496    +        _LEAF_  =                   93;
MPRINT(EM_DIAGRAM):   _LEAF_ = 93;
198497    +        P_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.57142857142857;
198498    +        P_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.42857142857142;
198499    +        Q_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.57142857142857;
198500    +        Q_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.42857142857142;
198501    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198502    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198503    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198504    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198505    +        END;
MPRINT(EM_DIAGRAM):   END;
198506    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198507    +            0.48468025968557 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.48468025968557 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
198508    +        _NODE_  =                  183;
MPRINT(EM_DIAGRAM):   _NODE_ = 183;
198509    +        _LEAF_  =                   94;
MPRINT(EM_DIAGRAM):   _LEAF_ = 94;
198510    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
198511    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
198512    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
198513    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
198514    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198515    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198516    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198517    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198518    +        END;
MPRINT(EM_DIAGRAM):   END;
198519    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198520    +        _NODE_  =                  181;
MPRINT(EM_DIAGRAM):   _NODE_ = 181;
198521    +        _LEAF_  =                   92;
MPRINT(EM_DIAGRAM):   _LEAF_ = 92;
198522    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
198523    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
198524    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
198525    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
198526    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198527    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198528    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198529    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198530    +        END;
MPRINT(EM_DIAGRAM):   END;
198531    +      END;
MPRINT(EM_DIAGRAM):   END;
198532    +    END;
MPRINT(EM_DIAGRAM):   END;
198533    +  ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198534    +        0.68217373468557 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.68217373468557 <= RANGE_LOG_Total_Trans_Amt THEN DO;
198535    +    _NODE_  =                   20;
MPRINT(EM_DIAGRAM):   _NODE_ = 20;
198536    +    _LEAF_  =                   96;
MPRINT(EM_DIAGRAM):   _LEAF_ = 96;
198537    +    P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
198538    +    P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
198539    +    Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
198540    +    Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
198541    +    V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198542    +    V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198543    +    I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198544    +    U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198545    +    END;
MPRINT(EM_DIAGRAM):   END;
198546    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198547    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
198548    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
198549    +    IF _ARBFMT_12 IN ('1' ,'3' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'3' ,'2' ) THEN DO;
198550    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198551    +            0.39856812249138 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
198552    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.47370187464616 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.39856812249138 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.47370187464616 THEN DO;
198553    +        _NODE_  =                  155;
MPRINT(EM_DIAGRAM):   _NODE_ = 155;
198554    +        _LEAF_  =                   70;
MPRINT(EM_DIAGRAM):   _LEAF_ = 70;
198555    +        P_Attrition_Flag0  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.52941176470588;
198556    +        P_Attrition_Flag1  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.47058823529411;
198557    +        Q_Attrition_Flag0  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.52941176470588;
198558    +        Q_Attrition_Flag1  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.47058823529411;
198559    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
198560    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
198561    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198562    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198563    +        END;
MPRINT(EM_DIAGRAM):   END;
198564    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198565    +            0.47370187464616 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
198566    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.50814574678553 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.47370187464616 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.50814574678553 THEN DO;
198567    +        _NODE_  =                  156;
MPRINT(EM_DIAGRAM):   _NODE_ = 156;
198568    +        _LEAF_  =                   71;
MPRINT(EM_DIAGRAM):   _LEAF_ = 71;
198569    +        P_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.77777777777777;
198570    +        P_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.22222222222222;
198571    +        Q_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.77777777777777;
198572    +        Q_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.22222222222222;
198573    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198574    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198575    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198576    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198577    +        END;
MPRINT(EM_DIAGRAM):   END;
198578    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198579    +            0.50814574678553 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.50814574678553 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
198580    +        _NODE_  =                  157;
MPRINT(EM_DIAGRAM):   _NODE_ = 157;
198581    +        _LEAF_  =                   72;
MPRINT(EM_DIAGRAM):   _LEAF_ = 72;
198582    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
198583    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
198584    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
198585    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
198586    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198587    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198588    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198589    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198590    +        END;
MPRINT(EM_DIAGRAM):   END;
198591    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198592    +        _NODE_  =                  154;
MPRINT(EM_DIAGRAM):   _NODE_ = 154;
198593    +        _LEAF_  =                   69;
MPRINT(EM_DIAGRAM):   _LEAF_ = 69;
198594    +        P_Attrition_Flag0  =     0.05263157894736;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05263157894736;
198595    +        P_Attrition_Flag1  =     0.94736842105263;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94736842105263;
198596    +        Q_Attrition_Flag0  =     0.05263157894736;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05263157894736;
198597    +        Q_Attrition_Flag1  =     0.94736842105263;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94736842105263;
198598    +        V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
198599    +        V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
198600    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198601    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198602    +        END;
MPRINT(EM_DIAGRAM):   END;
198603    +      END;
MPRINT(EM_DIAGRAM):   END;
198604    +    ELSE IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('4' ) THEN DO;
198605    +      _NODE_  =                   55;
MPRINT(EM_DIAGRAM):   _NODE_ = 55;
198606    +      _LEAF_  =                   73;
MPRINT(EM_DIAGRAM):   _LEAF_ = 73;
198607    +      P_Attrition_Flag0  =     0.73076923076923;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.73076923076923;
198608    +      P_Attrition_Flag1  =     0.26923076923076;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.26923076923076;
198609    +      Q_Attrition_Flag0  =     0.73076923076923;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.73076923076923;
198610    +      Q_Attrition_Flag1  =     0.26923076923076;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.26923076923076;
198611    +      V_Attrition_Flag0  =     0.69565217391304;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.69565217391304;
198612    +      V_Attrition_Flag1  =     0.30434782608695;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.30434782608695;
198613    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198614    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198615    +      END;
MPRINT(EM_DIAGRAM):   END;
198616    +    ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
198617    +      _NODE_  =                   56;
MPRINT(EM_DIAGRAM):   _NODE_ = 56;
198618    +      _LEAF_  =                   74;
MPRINT(EM_DIAGRAM):   _LEAF_ = 74;
198619    +      P_Attrition_Flag0  =     0.90816326530612;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.90816326530612;
198620    +      P_Attrition_Flag1  =     0.09183673469387;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.09183673469387;
198621    +      Q_Attrition_Flag0  =     0.90816326530612;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.90816326530612;
198622    +      Q_Attrition_Flag1  =     0.09183673469387;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.09183673469387;
198623    +      V_Attrition_Flag0  =     0.94642857142857;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.94642857142857;
198624    +      V_Attrition_Flag1  =     0.05357142857142;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.05357142857142;
198625    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198626    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198627    +      END;
MPRINT(EM_DIAGRAM):   END;
198628    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198629    +      _NODE_  =                   57;
MPRINT(EM_DIAGRAM):   _NODE_ = 57;
198630    +      _LEAF_  =                   75;
MPRINT(EM_DIAGRAM):   _LEAF_ = 75;
198631    +      P_Attrition_Flag0  =     0.99732530926111;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.99732530926111;
198632    +      P_Attrition_Flag1  =     0.00267469073888;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.00267469073888;
198633    +      Q_Attrition_Flag0  =     0.99732530926111;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.99732530926111;
198634    +      Q_Attrition_Flag1  =     0.00267469073888;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.00267469073888;
198635    +      V_Attrition_Flag0  =     0.99528301886792;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99528301886792;
198636    +      V_Attrition_Flag1  =     0.00471698113207;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00471698113207;
198637    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198638    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198639    +      END;
MPRINT(EM_DIAGRAM):   END;
198640    +    END;
MPRINT(EM_DIAGRAM):   END;
198641    +  END;
MPRINT(EM_DIAGRAM):   END;
198642    +
198643    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
198644    +IF  F_Attrition_Flag  NE '0'
198645    +AND F_Attrition_Flag  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Attrition_Flag NE '0' AND F_Attrition_Flag NE '1' THEN DO;
198646    +        R_Attrition_Flag0  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = .;
198647    +        R_Attrition_Flag1  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = .;
198648    + END;
MPRINT(EM_DIAGRAM):   END;
198649    + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198650    +       R_Attrition_Flag0  =  -P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = -P_Attrition_Flag0 ;
198651    +       R_Attrition_Flag1  =  -P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = -P_Attrition_Flag1 ;
198652    +       SELECT( F_Attrition_Flag  );
MPRINT(EM_DIAGRAM):   SELECT( F_Attrition_Flag );
198653    +          WHEN( '0'  ) R_Attrition_Flag0  = R_Attrition_Flag0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_Attrition_Flag0 = R_Attrition_Flag0 +1;
198654    +          WHEN( '1'  ) R_Attrition_Flag1  = R_Attrition_Flag1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_Attrition_Flag1 = R_Attrition_Flag1 +1;
198655    +       END;
MPRINT(EM_DIAGRAM):   END;
198656    + END;
MPRINT(EM_DIAGRAM):   END;
198657    +
198658    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
198659    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
198660    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
198661    +
198662    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
198663     run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
198664     quit;
198665     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
198666     filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
198667     *------------------------------------------------------------*;
198668     * Tree2: Scoring TEST data;
198669     *------------------------------------------------------------*;
198670     data EMWS1.Tree2_TEST
198671     / view=EMWS1.Tree2_TEST
198672     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_TEST / view=EMWS1.Tree2_TEST ;
198673     set EMWS1.Part2_TEST
198674     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part2_TEST ;
198675     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
198676    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
198677    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
198678    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
198679    +
198680    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
198681    +LENGTH F_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH F_Attrition_Flag $ 17;
198682    +LENGTH I_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH I_Attrition_Flag $ 17;
198683    +LENGTH U_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH U_Attrition_Flag $ 17;
198684    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
198685    +
198686    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
198687    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
198688    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
198689    +label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
198690    +label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
198691    +label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
198692    +label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
198693    +label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
198694    +label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
198695    +label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
198696    +label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
198697    +label F_Attrition_Flag = 'From: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label F_Attrition_Flag = 'From: Attrition_Flag' ;
198698    +label I_Attrition_Flag = 'Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label I_Attrition_Flag = 'Into: Attrition_Flag' ;
198699    +label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
198700    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
198701    +
198702    +
198703    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
198704    +LENGTH _ARBFMT_17 $     17; DROP _ARBFMT_17;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_17 $ 17;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_17;
198705    +_ARBFMT_17 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = ' ';
198706    +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
198707    +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
198708    +
198709    +
198710    +_ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
198711    + %DMNORMCP( _ARBFMT_17, F_Attrition_Flag );
MPRINT(DMNORMCP):   F_Attrition_Flag=dmnorm(_ARBFMT_17,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
198712    +
198713    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
198714    +IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198715    +  RANGE_LOG_Total_Trans_Amt  <     0.03868641322523 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03868641322523 THEN DO;
198716    +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
198717    +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
198718    +  P_Attrition_Flag0  =     0.09649122807017;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.09649122807017;
198719    +  P_Attrition_Flag1  =     0.90350877192982;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.90350877192982;
198720    +  Q_Attrition_Flag0  =     0.09649122807017;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.09649122807017;
198721    +  Q_Attrition_Flag1  =     0.90350877192982;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.90350877192982;
198722    +  V_Attrition_Flag0  =     0.16129032258064;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16129032258064;
198723    +  V_Attrition_Flag1  =     0.83870967741935;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83870967741935;
198724    +  I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198725    +  U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198726    +  END;
MPRINT(EM_DIAGRAM):   END;
198727    +ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198728    +      0.03868641322523 <= RANGE_LOG_Total_Trans_Amt  AND
198729    +  RANGE_LOG_Total_Trans_Amt  <     0.11189168159095 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.03868641322523 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.11189168159095 THEN DO;
198730    +  _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
198731    +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
198732    +  IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
The SAS System
 
198733    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198734    +          0.37739607587341 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
198735    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39380951152569 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.37739607587341 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39380951152569 THEN DO;
198736    +      _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
198737    +      _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
198738    +      P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
198739    +      P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
198740    +      Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
198741    +      Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
198742    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198743    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198744    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198745    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198746    +      END;
MPRINT(EM_DIAGRAM):   END;
198747    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198748    +          0.39380951152569 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
198749    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.51192553209568 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.39380951152569 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.51192553209568 THEN DO;
198750    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198751    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.3736695996306 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.3736695996306 THEN DO;
198752    +        _NODE_  =                   71;
MPRINT(EM_DIAGRAM):   _NODE_ = 71;
198753    +        _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
198754    +        P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
198755    +        P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
198756    +        Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
198757    +        Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
198758    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198759    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198760    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198761    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198762    +        END;
MPRINT(EM_DIAGRAM):   END;
198763    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198764    +            0.49243977177414 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
198765    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.52686491804492 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49243977177414 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.52686491804492 THEN DO;
198766    +        _NODE_  =                   73;
MPRINT(EM_DIAGRAM):   _NODE_ = 73;
198767    +        _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
198768    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
198769    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
198770    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
198771    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
198772    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198773    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198774    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198775    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198776    +        END;
MPRINT(EM_DIAGRAM):   END;
198777    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198778    +            0.52686491804492 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.52686491804492 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
198779    +        _NODE_  =                   74;
MPRINT(EM_DIAGRAM):   _NODE_ = 74;
198780    +        _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
198781    +        P_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85714285714285;
198782    +        P_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.14285714285714;
198783    +        Q_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85714285714285;
198784    +        Q_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.14285714285714;
198785    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198786    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198787    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198788    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198789    +        END;
MPRINT(EM_DIAGRAM):   END;
198790    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198791    +        _NODE_  =                   72;
MPRINT(EM_DIAGRAM):   _NODE_ = 72;
198792    +        _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
198793    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
198794    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
198795    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
198796    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
198797    +        V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
198798    +        V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
198799    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198800    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198801    +        END;
MPRINT(EM_DIAGRAM):   END;
198802    +      END;
MPRINT(EM_DIAGRAM):   END;
198803    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198804    +          0.51192553209568 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.51192553209568 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
198805    +      _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
198806    +      _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
198807    +      P_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85714285714285;
198808    +      P_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.14285714285714;
198809    +      Q_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85714285714285;
198810    +      Q_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.14285714285714;
198811    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198812    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198813    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198814    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198815    +      END;
MPRINT(EM_DIAGRAM):   END;
198816    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198817    +      _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
198818    +      _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
198819    +      P_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05555555555555;
198820    +      P_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94444444444444;
198821    +      Q_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05555555555555;
198822    +      Q_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94444444444444;
198823    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198824    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198825    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198826    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198827    +      END;
MPRINT(EM_DIAGRAM):   END;
198828    +    END;
MPRINT(EM_DIAGRAM):   END;
198829    +  ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('1' ) THEN DO;
198830    +    IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
198831    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.06895472974897 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.06895472974897 THEN DO;
198832    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198833    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.26277731155559 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.26277731155559 THEN DO;
198834    +        _NODE_  =                   77;
MPRINT(EM_DIAGRAM):   _NODE_ = 77;
198835    +        _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
198836    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
198837    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
198838    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
198839    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
198840    +        V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
198841    +        V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
198842    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198843    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198844    +        END;
MPRINT(EM_DIAGRAM):   END;
198845    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198846    +            0.41754003895588 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
198847    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.46047296215175 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.41754003895588 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.46047296215175 THEN DO;
198848    +        _NODE_  =                   79;
MPRINT(EM_DIAGRAM):   _NODE_ = 79;
198849    +        _LEAF_  =                   16;
MPRINT(EM_DIAGRAM):   _LEAF_ = 16;
198850    +        P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
198851    +        P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
198852    +        Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
198853    +        Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
198854    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198855    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198856    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198857    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198858    +        END;
MPRINT(EM_DIAGRAM):   END;
198859    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
198860    +            0.46047296215175 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46047296215175 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
198861    +        _NODE_  =                   80;
MPRINT(EM_DIAGRAM):   _NODE_ = 80;
198862    +        _LEAF_  =                   17;
MPRINT(EM_DIAGRAM):   _LEAF_ = 17;
198863    +        P_Attrition_Flag0  =     0.92857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92857142857142;
198864    +        P_Attrition_Flag1  =     0.07142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.07142857142857;
198865    +        Q_Attrition_Flag0  =     0.92857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92857142857142;
198866    +        Q_Attrition_Flag1  =     0.07142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.07142857142857;
198867    +        V_Attrition_Flag0  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.85714285714285;
198868    +        V_Attrition_Flag1  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.14285714285714;
198869    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198870    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198871    +        END;
MPRINT(EM_DIAGRAM):   END;
198872    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198873    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198874    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.35658658871759 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.35658658871759 THEN DO;
198875    +          _NODE_  =                  186;
MPRINT(EM_DIAGRAM):   _NODE_ = 186;
198876    +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
198877    +          P_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.125;
198878    +          P_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.875;
198879    +          Q_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.125;
198880    +          Q_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.875;
198881    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198882    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198883    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198884    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198885    +          END;
MPRINT(EM_DIAGRAM):   END;
198886    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198887    +              0.43860103445126 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
198888    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.50400402406364 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43860103445126 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.50400402406364 THEN DO;
198889    +          _NODE_  =                  188;
MPRINT(EM_DIAGRAM):   _NODE_ = 188;
198890    +          _LEAF_  =                   14;
MPRINT(EM_DIAGRAM):   _LEAF_ = 14;
198891    +          P_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.75;
198892    +          P_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.25;
198893    +          Q_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.75;
198894    +          Q_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.25;
198895    +          V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
198896    +          V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
198897    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198898    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198899    +          END;
MPRINT(EM_DIAGRAM):   END;
198900    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198901    +              0.50400402406364 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.50400402406364 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
198902    +          _NODE_  =                  189;
MPRINT(EM_DIAGRAM):   _NODE_ = 189;
198903    +          _LEAF_  =                   15;
MPRINT(EM_DIAGRAM):   _LEAF_ = 15;
198904    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
198905    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
198906    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
198907    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
198908    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198909    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198910    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198911    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198912    +          END;
MPRINT(EM_DIAGRAM):   END;
198913    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198914    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198915    +            RANGE_LOG_Total_Trans_Amt  <     0.07601985120135 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.07601985120135 THEN DO;
198916    +            _NODE_  =                  319;
MPRINT(EM_DIAGRAM):   _NODE_ = 319;
198917    +            _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
198918    +            P_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.71428571428571;
198919    +            P_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.28571428571428;
198920    +            Q_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.71428571428571;
198921    +            Q_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.28571428571428;
198922    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198923    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198924    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198925    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198926    +            END;
MPRINT(EM_DIAGRAM):   END;
198927    +          ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
198928    +                0.07601985120135 <= RANGE_LOG_Total_Trans_Amt  AND
198929    +            RANGE_LOG_Total_Trans_Amt  <     0.08497717470581 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.07601985120135 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.08497717470581 THEN DO;
198930    +            _NODE_  =                  320;
MPRINT(EM_DIAGRAM):   _NODE_ = 320;
198931    +            _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
198932    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
198933    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
198934    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
198935    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
198936    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198937    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198938    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198939    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198940    +            END;
MPRINT(EM_DIAGRAM):   END;
198941    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198942    +            _NODE_  =                  321;
MPRINT(EM_DIAGRAM):   _NODE_ = 321;
198943    +            _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
198944    +            P_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.08333333333333;
198945    +            P_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.91666666666666;
198946    +            Q_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.08333333333333;
198947    +            Q_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.91666666666666;
198948    +            V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
198949    +            V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
198950    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198951    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198952    +            END;
MPRINT(EM_DIAGRAM):   END;
198953    +          END;
MPRINT(EM_DIAGRAM):   END;
198954    +        END;
MPRINT(EM_DIAGRAM):   END;
198955    +      END;
MPRINT(EM_DIAGRAM):   END;
198956    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
198957    +          0.73554854712342 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
198958    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.93801897378516 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.73554854712342 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.93801897378516 THEN DO;
198959    +      _NODE_  =                   32;
MPRINT(EM_DIAGRAM):   _NODE_ = 32;
198960    +      _LEAF_  =                   19;
MPRINT(EM_DIAGRAM):   _LEAF_ = 19;
198961    +      P_Attrition_Flag0  =     0.91891891891891;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.91891891891891;
198962    +      P_Attrition_Flag1  =     0.08108108108108;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08108108108108;
198963    +      Q_Attrition_Flag0  =     0.91891891891891;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.91891891891891;
198964    +      Q_Attrition_Flag1  =     0.08108108108108;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08108108108108;
198965    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198966    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198967    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198968    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198969    +      END;
MPRINT(EM_DIAGRAM):   END;
198970    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
198971    +          0.93801897378516 <= RANGE_SQRT_Avg_Utilization_Ratio  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.93801897378516 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
198972    +      _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
198973    +      _LEAF_  =                   20;
MPRINT(EM_DIAGRAM):   _LEAF_ = 20;
198974    +      P_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.28571428571428;
198975    +      P_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.71428571428571;
198976    +      Q_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.28571428571428;
198977    +      Q_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.71428571428571;
198978    +      V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
198979    +      V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
198980    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
198981    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
198982    +      END;
MPRINT(EM_DIAGRAM):   END;
198983    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198984    +      _NODE_  =                   31;
MPRINT(EM_DIAGRAM):   _NODE_ = 31;
198985    +      _LEAF_  =                   18;
MPRINT(EM_DIAGRAM):   _LEAF_ = 18;
198986    +      P_Attrition_Flag0  =     0.93298969072164;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93298969072164;
198987    +      P_Attrition_Flag1  =     0.06701030927835;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06701030927835;
198988    +      Q_Attrition_Flag0  =     0.93298969072164;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93298969072164;
198989    +      Q_Attrition_Flag1  =     0.06701030927835;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06701030927835;
198990    +      V_Attrition_Flag0  =     0.88135593220339;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88135593220339;
198991    +      V_Attrition_Flag1  =     0.11864406779661;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11864406779661;
198992    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
198993    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
198994    +      END;
MPRINT(EM_DIAGRAM):   END;
198995    +    END;
MPRINT(EM_DIAGRAM):   END;
198996    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
198997    +    IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
198998    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.30595739522413 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.30595739522413 THEN DO;
198999    +      _NODE_  =                   34;
MPRINT(EM_DIAGRAM):   _NODE_ = 34;
199000    +      _LEAF_  =                   21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 21;
199001    +      P_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.33333333333333;
199002    +      P_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.66666666666666;
199003    +      Q_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.33333333333333;
199004    +      Q_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.66666666666666;
199005    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199006    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199007    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199008    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199009    +      END;
MPRINT(EM_DIAGRAM):   END;
199010    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199011    +          0.30595739522413 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
199012    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.32936001420324 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.30595739522413 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.32936001420324 THEN DO;
199013    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199014    +            0.08965890365538 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.08965890365538 <= RANGE_LOG_Total_Trans_Amt THEN DO;
199015    +        _NODE_  =                   92;
MPRINT(EM_DIAGRAM):   _NODE_ = 92;
199016    +        _LEAF_  =                   23;
MPRINT(EM_DIAGRAM):   _LEAF_ = 23;
199017    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
199018    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
199019    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
199020    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
199021    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199022    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199023    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199024    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199025    +        END;
MPRINT(EM_DIAGRAM):   END;
199026    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199027    +        _NODE_  =                   91;
MPRINT(EM_DIAGRAM):   _NODE_ = 91;
199028    +        _LEAF_  =                   22;
MPRINT(EM_DIAGRAM):   _LEAF_ = 22;
199029    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199030    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199031    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199032    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199033    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
199034    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
199035    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199036    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199037    +        END;
MPRINT(EM_DIAGRAM):   END;
199038    +      END;
MPRINT(EM_DIAGRAM):   END;
199039    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199040    +          0.32936001420324 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
199041    +      RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.4029256733266 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.32936001420324 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.4029256733266 THEN DO;
199042    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199043    +            0.07868249310586 <= RANGE_LOG_Total_Trans_Amt  AND
199044    +        RANGE_LOG_Total_Trans_Amt  <      0.0930893358681 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.07868249310586 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.0930893358681 THEN DO;
199045    +        _NODE_  =                   94;
MPRINT(EM_DIAGRAM):   _NODE_ = 94;
199046    +        _LEAF_  =                   25;
MPRINT(EM_DIAGRAM):   _LEAF_ = 25;
199047    +        P_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.89361702127659;
199048    +        P_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1063829787234;
199049    +        Q_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.89361702127659;
199050    +        Q_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1063829787234;
199051    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199052    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199053    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199054    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199055    +        END;
MPRINT(EM_DIAGRAM):   END;
199056    +      ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199057    +             0.0930893358681 <= RANGE_LOG_Total_Trans_Amt  AND
199058    +        RANGE_LOG_Total_Trans_Amt  <     0.10593732785727 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.0930893358681 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.10593732785727 THEN DO;
199059    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199060    +              0.37882399682161 <= RANGE_Total_Revolving_Bal  AND
199061    +          RANGE_Total_Revolving_Bal  <     0.50258243941199 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.37882399682161 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.50258243941199 THEN DO;
199062    +          _NODE_  =                  210;
MPRINT(EM_DIAGRAM):   _NODE_ = 210;
199063    +          _LEAF_  =                   27;
MPRINT(EM_DIAGRAM):   _LEAF_ = 27;
199064    +          P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
199065    +          P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
199066    +          Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
199067    +          Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
199068    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
199069    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
199070    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199071    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199072    +          END;
MPRINT(EM_DIAGRAM):   END;
199073    +        ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199074    +              0.50258243941199 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.50258243941199 <= RANGE_Total_Revolving_Bal THEN DO;
199075    +          _NODE_  =                  211;
MPRINT(EM_DIAGRAM):   _NODE_ = 211;
199076    +          _LEAF_  =                   28;
MPRINT(EM_DIAGRAM):   _LEAF_ = 28;
199077    +          P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
199078    +          P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
199079    +          Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
199080    +          Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
199081    +          V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
199082    +          V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
199083    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199084    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199085    +          END;
MPRINT(EM_DIAGRAM):   END;
199086    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199087    +          _NODE_  =                  209;
MPRINT(EM_DIAGRAM):   _NODE_ = 209;
199088    +          _LEAF_  =                   26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 26;
199089    +          P_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.08333333333333;
199090    +          P_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.91666666666666;
199091    +          Q_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.08333333333333;
199092    +          Q_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.91666666666666;
199093    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
199094    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
199095    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199096    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199097    +          END;
MPRINT(EM_DIAGRAM):   END;
199098    +        END;
MPRINT(EM_DIAGRAM):   END;
199099    +      ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199100    +            0.10593732785727 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.10593732785727 <= RANGE_LOG_Total_Trans_Amt THEN DO;
199101    +        _NODE_  =                   96;
MPRINT(EM_DIAGRAM):   _NODE_ = 96;
199102    +        _LEAF_  =                   29;
MPRINT(EM_DIAGRAM):   _LEAF_ = 29;
199103    +        P_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.21428571428571;
199104    +        P_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.78571428571428;
199105    +        Q_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.21428571428571;
199106    +        Q_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.78571428571428;
199107    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199108    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199109    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199110    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199111    +        END;
MPRINT(EM_DIAGRAM):   END;
199112    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199113    +        _NODE_  =                   93;
MPRINT(EM_DIAGRAM):   _NODE_ = 93;
199114    +        _LEAF_  =                   24;
MPRINT(EM_DIAGRAM):   _LEAF_ = 24;
199115    +        P_Attrition_Flag0  =     0.94782608695652;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.94782608695652;
199116    +        P_Attrition_Flag1  =     0.05217391304347;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.05217391304347;
199117    +        Q_Attrition_Flag0  =     0.94782608695652;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.94782608695652;
199118    +        Q_Attrition_Flag1  =     0.05217391304347;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.05217391304347;
199119    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199120    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199121    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199122    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199123    +        END;
MPRINT(EM_DIAGRAM):   END;
199124    +      END;
MPRINT(EM_DIAGRAM):   END;
199125    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199126    +      _NODE_  =                   37;
MPRINT(EM_DIAGRAM):   _NODE_ = 37;
199127    +      _LEAF_  =                   30;
MPRINT(EM_DIAGRAM):   _LEAF_ = 30;
199128    +      P_Attrition_Flag0  =     0.97118155619596;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.97118155619596;
199129    +      P_Attrition_Flag1  =     0.02881844380403;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.02881844380403;
199130    +      Q_Attrition_Flag0  =     0.97118155619596;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.97118155619596;
199131    +      Q_Attrition_Flag1  =     0.02881844380403;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.02881844380403;
199132    +      V_Attrition_Flag0  =     0.96938775510204;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.96938775510204;
199133    +      V_Attrition_Flag1  =     0.03061224489795;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.03061224489795;
199134    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199135    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199136    +      END;
MPRINT(EM_DIAGRAM):   END;
199137    +    END;
MPRINT(EM_DIAGRAM):   END;
199138    +  END;
MPRINT(EM_DIAGRAM):   END;
199139    +ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199140    +      0.11189168159095 <= RANGE_LOG_Total_Trans_Amt  AND
199141    +  RANGE_LOG_Total_Trans_Amt  <     0.18180873549344 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11189168159095 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.18180873549344 THEN DO;
199142    +  IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199143    +        0.23122765196662 <= RANGE_Total_Revolving_Bal  AND
199144    +    RANGE_Total_Revolving_Bal  <     0.43365117203019 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.23122765196662 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.43365117203019 THEN DO;
199145    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
199146    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
199147    +    IF _ARBFMT_12 IN ('1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ) THEN DO;
199148    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199149    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.44589881136633 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.44589881136633 THEN DO;
199150    +        _NODE_  =                  117;
MPRINT(EM_DIAGRAM):   _NODE_ = 117;
199151    +        _LEAF_  =                   39;
MPRINT(EM_DIAGRAM):   _LEAF_ = 39;
199152    +        P_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.16666666666666;
199153    +        P_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.83333333333333;
199154    +        Q_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.16666666666666;
199155    +        Q_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.83333333333333;
199156    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199157    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199158    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199159    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199160    +        END;
MPRINT(EM_DIAGRAM):   END;
199161    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199162    +            0.49070999374543 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49070999374543 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
199163    +        _NODE_  =                  119;
MPRINT(EM_DIAGRAM):   _NODE_ = 119;
199164    +        _LEAF_  =                   41;
MPRINT(EM_DIAGRAM):   _LEAF_ = 41;
199165    +        P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
199166    +        P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
199167    +        Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
199168    +        Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
199169    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199170    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199171    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199172    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199173    +        END;
MPRINT(EM_DIAGRAM):   END;
199174    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199175    +        _NODE_  =                  118;
MPRINT(EM_DIAGRAM):   _NODE_ = 118;
199176    +        _LEAF_  =                   40;
MPRINT(EM_DIAGRAM):   _LEAF_ = 40;
199177    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
199178    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
199179    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
199180    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
199181    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
199182    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
199183    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199184    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199185    +        END;
MPRINT(EM_DIAGRAM):   END;
199186    +      END;
MPRINT(EM_DIAGRAM):   END;
199187    +    ELSE IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('2' ) THEN DO;
199188    +      _NODE_  =                   43;
MPRINT(EM_DIAGRAM):   _NODE_ = 43;
199189    +      _LEAF_  =                   42;
MPRINT(EM_DIAGRAM):   _LEAF_ = 42;
199190    +      P_Attrition_Flag0  =     0.48148148148148;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.48148148148148;
199191    +      P_Attrition_Flag1  =     0.51851851851851;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.51851851851851;
199192    +      Q_Attrition_Flag0  =     0.48148148148148;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.48148148148148;
199193    +      Q_Attrition_Flag1  =     0.51851851851851;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.51851851851851;
199194    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
199195    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
199196    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199197    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199198    +      END;
MPRINT(EM_DIAGRAM):   END;
199199    +    ELSE IF _ARBFMT_12 IN ('3' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('3' ) THEN DO;
199200    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199201    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.40123192150453 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.40123192150453 THEN DO;
199202    +        _NODE_  =                  123;
MPRINT(EM_DIAGRAM):   _NODE_ = 123;
199203    +        _LEAF_  =                   43;
MPRINT(EM_DIAGRAM):   _LEAF_ = 43;
199204    +        P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
199205    +        P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
199206    +        Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
199207    +        Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
199208    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199209    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199210    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199211    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199212    +        END;
MPRINT(EM_DIAGRAM):   END;
199213    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199214    +        _NODE_  =                  124;
MPRINT(EM_DIAGRAM):   _NODE_ = 124;
199215    +        _LEAF_  =                   44;
MPRINT(EM_DIAGRAM):   _LEAF_ = 44;
199216    +        P_Attrition_Flag0  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.91666666666666;
199217    +        P_Attrition_Flag1  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08333333333333;
199218    +        Q_Attrition_Flag0  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.91666666666666;
199219    +        Q_Attrition_Flag1  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08333333333333;
199220    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
199221    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
199222    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199223    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199224    +        END;
MPRINT(EM_DIAGRAM):   END;
199225    +      END;
MPRINT(EM_DIAGRAM):   END;
199226    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199227    +      _NODE_  =                   45;
MPRINT(EM_DIAGRAM):   _NODE_ = 45;
199228    +      _LEAF_  =                   45;
MPRINT(EM_DIAGRAM):   _LEAF_ = 45;
199229    +      P_Attrition_Flag0  =     0.93650793650793;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93650793650793;
199230    +      P_Attrition_Flag1  =     0.06349206349206;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06349206349206;
199231    +      Q_Attrition_Flag0  =     0.93650793650793;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93650793650793;
199232    +      Q_Attrition_Flag1  =     0.06349206349206;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06349206349206;
199233    +      V_Attrition_Flag0  =     0.82608695652173;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.82608695652173;
199234    +      V_Attrition_Flag1  =     0.17391304347826;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.17391304347826;
199235    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199236    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199237    +      END;
MPRINT(EM_DIAGRAM):   END;
199238    +    END;
MPRINT(EM_DIAGRAM):   END;
199239    +  ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199240    +        0.43365117203019 <= RANGE_Total_Revolving_Bal  AND
199241    +    RANGE_Total_Revolving_Bal  <     0.94656336909018 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.43365117203019 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.94656336909018 THEN DO;
199242    +    IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
199243    +          0.57734961836774 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
199244    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.67857196850263 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.57734961836774 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.67857196850263 THEN DO;
199245    +      _NODE_  =                   47;
MPRINT(EM_DIAGRAM):   _NODE_ = 47;
199246    +      _LEAF_  =                   47;
MPRINT(EM_DIAGRAM):   _LEAF_ = 47;
199247    +      P_Attrition_Flag0  =     0.66037735849056;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66037735849056;
199248    +      P_Attrition_Flag1  =     0.33962264150943;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33962264150943;
199249    +      Q_Attrition_Flag0  =     0.66037735849056;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66037735849056;
199250    +      Q_Attrition_Flag1  =     0.33962264150943;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33962264150943;
199251    +      V_Attrition_Flag0  =     0.84210526315789;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.84210526315789;
199252    +      V_Attrition_Flag1  =      0.1578947368421;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.1578947368421;
199253    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199254    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199255    +      END;
MPRINT(EM_DIAGRAM):   END;
199256    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
199257    +          0.67857196850263 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
199258    +      RANGE_SQRT_Avg_Utilization_Ratio  <     0.88446718550085 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.67857196850263 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.88446718550085 THEN DO;
199259    +      _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
199260    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
199261    +      IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
199262    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199263    +              0.63567739372268 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.63567739372268 <= RANGE_Total_Revolving_Bal THEN DO;
199264    +          _NODE_  =                  267;
MPRINT(EM_DIAGRAM):   _NODE_ = 267;
199265    +          _LEAF_  =                   49;
MPRINT(EM_DIAGRAM):   _LEAF_ = 49;
199266    +          P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
199267    +          P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
199268    +          Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
199269    +          Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
199270    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199271    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199272    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199273    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199274    +          END;
MPRINT(EM_DIAGRAM):   END;
199275    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199276    +          _NODE_  =                  266;
MPRINT(EM_DIAGRAM):   _NODE_ = 266;
199277    +          _LEAF_  =                   48;
MPRINT(EM_DIAGRAM):   _LEAF_ = 48;
199278    +          P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
199279    +          P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
199280    +          Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
199281    +          Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
199282    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199283    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199284    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199285    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199286    +          END;
MPRINT(EM_DIAGRAM):   END;
199287    +        END;
MPRINT(EM_DIAGRAM):   END;
199288    +      ELSE IF _ARBFMT_12 IN ('6' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ,'4' ) THEN DO;
199289    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199290    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.35478871362639 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.35478871362639 THEN DO;
199291    +          _NODE_  =                  268;
MPRINT(EM_DIAGRAM):   _NODE_ = 268;
199292    +          _LEAF_  =                   50;
MPRINT(EM_DIAGRAM):   _LEAF_ = 50;
199293    +          P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
199294    +          P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
199295    +          Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
199296    +          Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
199297    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
199298    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
199299    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199300    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199301    +          END;
MPRINT(EM_DIAGRAM):   END;
199302    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199303    +              0.35478871362639 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
199304    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39278572866989 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.35478871362639 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39278572866989 THEN DO;
199305    +          _NODE_  =                  269;
MPRINT(EM_DIAGRAM):   _NODE_ = 269;
199306    +          _LEAF_  =                   51;
MPRINT(EM_DIAGRAM):   _LEAF_ = 51;
199307    +          P_Attrition_Flag0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.55555555555555;
199308    +          P_Attrition_Flag1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.44444444444444;
199309    +          Q_Attrition_Flag0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.55555555555555;
199310    +          Q_Attrition_Flag1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.44444444444444;
199311    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199312    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199313    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199314    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199315    +          END;
MPRINT(EM_DIAGRAM):   END;
199316    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199317    +              0.46338100692678 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46338100692678 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
199318    +          _NODE_  =                  271;
MPRINT(EM_DIAGRAM):   _NODE_ = 271;
199319    +          _LEAF_  =                   53;
MPRINT(EM_DIAGRAM):   _LEAF_ = 53;
199320    +          P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199321    +          P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199322    +          Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199323    +          Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199324    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199325    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199326    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199327    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199328    +          END;
MPRINT(EM_DIAGRAM):   END;
199329    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199330    +          _NODE_  =                  270;
MPRINT(EM_DIAGRAM):   _NODE_ = 270;
199331    +          _LEAF_  =                   52;
MPRINT(EM_DIAGRAM):   _LEAF_ = 52;
199332    +          P_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.84615384615384;
199333    +          P_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.15384615384615;
199334    +          Q_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.84615384615384;
199335    +          Q_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.15384615384615;
199336    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199337    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199338    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199339    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199340    +          END;
MPRINT(EM_DIAGRAM):   END;
199341    +        END;
MPRINT(EM_DIAGRAM):   END;
199342    +      ELSE IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('7' ) THEN DO;
199343    +        _NODE_  =                  137;
MPRINT(EM_DIAGRAM):   _NODE_ = 137;
199344    +        _LEAF_  =                   54;
MPRINT(EM_DIAGRAM):   _LEAF_ = 54;
199345    +        P_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92;
199346    +        P_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08;
199347    +        Q_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92;
199348    +        Q_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08;
199349    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199350    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199351    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199352    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199353    +        END;
MPRINT(EM_DIAGRAM):   END;
199354    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199355    +        _NODE_  =                  138;
MPRINT(EM_DIAGRAM):   _NODE_ = 138;
199356    +        _LEAF_  =                   55;
MPRINT(EM_DIAGRAM):   _LEAF_ = 55;
199357    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199358    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199359    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199360    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199361    +        V_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88888888888888;
199362    +        V_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11111111111111;
199363    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199364    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199365    +        END;
MPRINT(EM_DIAGRAM):   END;
199366    +      END;
MPRINT(EM_DIAGRAM):   END;
199367    +    ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
199368    +          0.88446718550085 <= RANGE_SQRT_Avg_Utilization_Ratio  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.88446718550085 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
199369    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199370    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <      0.4282290309541 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.4282290309541 THEN DO;
199371    +        _NODE_  =                  139;
MPRINT(EM_DIAGRAM):   _NODE_ = 139;
199372    +        _LEAF_  =                   56;
MPRINT(EM_DIAGRAM):   _LEAF_ = 56;
199373    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
199374    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
199375    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
199376    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
199377    +        V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
199378    +        V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
199379    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199380    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199381    +        END;
MPRINT(EM_DIAGRAM):   END;
199382    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199383    +             0.4282290309541 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
199384    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.46117076258442 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.4282290309541 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.46117076258442 THEN DO;
199385    +        _NODE_  =                  140;
MPRINT(EM_DIAGRAM):   _NODE_ = 140;
199386    +        _LEAF_  =                   57;
MPRINT(EM_DIAGRAM):   _LEAF_ = 57;
199387    +        P_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.5;
199388    +        P_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.5;
199389    +        Q_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.5;
199390    +        Q_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.5;
199391    +        V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
199392    +        V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
199393    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199394    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199395    +        END;
MPRINT(EM_DIAGRAM):   END;
199396    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199397    +            0.55833789970036 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.55833789970036 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
199398    +        _NODE_  =                  142;
MPRINT(EM_DIAGRAM):   _NODE_ = 142;
199399    +        _LEAF_  =                   61;
MPRINT(EM_DIAGRAM):   _LEAF_ = 61;
199400    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199401    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199402    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199403    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199404    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199405    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199406    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199407    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199408    +        END;
MPRINT(EM_DIAGRAM):   END;
199409    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199410    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199411    +          RANGE_LOG_Total_Trans_Amt  <     0.13809305548926 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.13809305548926 THEN DO;
199412    +          _NODE_  =                  274;
MPRINT(EM_DIAGRAM):   _NODE_ = 274;
199413    +          _LEAF_  =                   58;
MPRINT(EM_DIAGRAM):   _LEAF_ = 58;
199414    +          P_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.6;
199415    +          P_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.4;
199416    +          Q_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.6;
199417    +          Q_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.4;
199418    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199419    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199420    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199421    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199422    +          END;
MPRINT(EM_DIAGRAM):   END;
199423    +        ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199424    +               0.1555658134984 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.1555658134984 <= RANGE_LOG_Total_Trans_Amt THEN DO;
199425    +          _NODE_  =                  276;
MPRINT(EM_DIAGRAM):   _NODE_ = 276;
199426    +          _LEAF_  =                   60;
MPRINT(EM_DIAGRAM):   _LEAF_ = 60;
199427    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
199428    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
199429    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
199430    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
199431    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199432    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199433    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199434    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199435    +          END;
MPRINT(EM_DIAGRAM):   END;
199436    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199437    +          _NODE_  =                  275;
MPRINT(EM_DIAGRAM):   _NODE_ = 275;
199438    +          _LEAF_  =                   59;
MPRINT(EM_DIAGRAM):   _LEAF_ = 59;
199439    +          P_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.125;
199440    +          P_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.875;
199441    +          Q_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.125;
199442    +          Q_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.875;
199443    +          V_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.6;
199444    +          V_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.4;
199445    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199446    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199447    +          END;
MPRINT(EM_DIAGRAM):   END;
199448    +        END;
MPRINT(EM_DIAGRAM):   END;
199449    +      END;
MPRINT(EM_DIAGRAM):   END;
199450    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199451    +      _NODE_  =                   46;
MPRINT(EM_DIAGRAM):   _NODE_ = 46;
199452    +      _LEAF_  =                   46;
MPRINT(EM_DIAGRAM):   _LEAF_ = 46;
199453    +      P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
199454    +      P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
199455    +      Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
199456    +      Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
199457    +      V_Attrition_Flag0  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.93333333333333;
199458    +      V_Attrition_Flag1  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.06666666666666;
199459    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199460    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199461    +      END;
MPRINT(EM_DIAGRAM):   END;
199462    +    END;
MPRINT(EM_DIAGRAM):   END;
199463    +  ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199464    +        0.94656336909018 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.94656336909018 <= RANGE_Total_Revolving_Bal THEN DO;
199465    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199466    +          0.38148119675298 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
199467    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.43211655021394 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.38148119675298 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.43211655021394 THEN DO;
199468    +      _NODE_  =                   51;
MPRINT(EM_DIAGRAM):   _NODE_ = 51;
199469    +      _LEAF_  =                   63;
MPRINT(EM_DIAGRAM):   _LEAF_ = 63;
199470    +      P_Attrition_Flag0  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.36363636363636;
199471    +      P_Attrition_Flag1  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.63636363636363;
199472    +      Q_Attrition_Flag0  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.36363636363636;
199473    +      Q_Attrition_Flag1  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.63636363636363;
199474    +      V_Attrition_Flag0  =                  0.1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.1;
199475    +      V_Attrition_Flag1  =                  0.9;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.9;
199476    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199477    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199478    +      END;
MPRINT(EM_DIAGRAM):   END;
199479    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199480    +          0.43211655021394 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
199481    +      RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.45174095048192 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.43211655021394 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.45174095048192 THEN DO;
199482    +      _NODE_  =                   52;
MPRINT(EM_DIAGRAM):   _NODE_ = 52;
199483    +      _LEAF_  =                   64;
MPRINT(EM_DIAGRAM):   _LEAF_ = 64;
199484    +      P_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.5;
199485    +      P_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.5;
199486    +      Q_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.5;
199487    +      Q_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.5;
199488    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
199489    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
199490    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199491    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199492    +      END;
MPRINT(EM_DIAGRAM):   END;
199493    +    ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199494    +          0.45174095048192 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45174095048192 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
199495    +      IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199496    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.43248733988054 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.43248733988054 THEN DO;
199497    +        _NODE_  =                  150;
MPRINT(EM_DIAGRAM):   _NODE_ = 150;
199498    +        _LEAF_  =                   65;
MPRINT(EM_DIAGRAM):   _LEAF_ = 65;
199499    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
199500    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
199501    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
199502    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
199503    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199504    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199505    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199506    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199507    +        END;
MPRINT(EM_DIAGRAM):   END;
199508    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199509    +            0.43248733988054 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
199510    +        RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.47205488095581 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43248733988054 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.47205488095581 THEN DO;
199511    +        _NODE_  =                  151;
MPRINT(EM_DIAGRAM):   _NODE_ = 151;
199512    +        _LEAF_  =                   66;
MPRINT(EM_DIAGRAM):   _LEAF_ = 66;
199513    +        P_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.6;
199514    +        P_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.4;
199515    +        Q_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.6;
199516    +        Q_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.4;
199517    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199518    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199519    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199520    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199521    +        END;
MPRINT(EM_DIAGRAM):   END;
199522    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199523    +            0.53325640118613 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.53325640118613 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
199524    +        _NODE_  =                  153;
MPRINT(EM_DIAGRAM):   _NODE_ = 153;
199525    +        _LEAF_  =                   68;
MPRINT(EM_DIAGRAM):   _LEAF_ = 68;
199526    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199527    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199528    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199529    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199530    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199531    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199532    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199533    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199534    +        END;
MPRINT(EM_DIAGRAM):   END;
199535    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199536    +        _NODE_  =                  152;
MPRINT(EM_DIAGRAM):   _NODE_ = 152;
199537    +        _LEAF_  =                   67;
MPRINT(EM_DIAGRAM):   _LEAF_ = 67;
199538    +        P_Attrition_Flag0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.9090909090909;
199539    +        P_Attrition_Flag1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.09090909090909;
199540    +        Q_Attrition_Flag0  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.9090909090909;
199541    +        Q_Attrition_Flag1  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.09090909090909;
199542    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199543    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199544    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199545    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199546    +        END;
MPRINT(EM_DIAGRAM):   END;
199547    +      END;
MPRINT(EM_DIAGRAM):   END;
199548    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199549    +      _NODE_  =                   50;
MPRINT(EM_DIAGRAM):   _NODE_ = 50;
199550    +      _LEAF_  =                   62;
MPRINT(EM_DIAGRAM):   _LEAF_ = 62;
199551    +      P_Attrition_Flag0  =     0.04651162790697;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.04651162790697;
199552    +      P_Attrition_Flag1  =     0.95348837209302;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.95348837209302;
199553    +      Q_Attrition_Flag0  =     0.04651162790697;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.04651162790697;
199554    +      Q_Attrition_Flag1  =     0.95348837209302;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.95348837209302;
199555    +      V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
199556    +      V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
199557    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199558    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199559    +      END;
MPRINT(EM_DIAGRAM):   END;
199560    +    END;
MPRINT(EM_DIAGRAM):   END;
199561    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199562    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
199563    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
199564    +    IF _ARBFMT_12 IN ('6' ,'7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('6' ,'7' ) THEN DO;
199565    +      _NODE_  =                   38;
MPRINT(EM_DIAGRAM):   _NODE_ = 38;
199566    +      _LEAF_  =                   31;
MPRINT(EM_DIAGRAM):   _LEAF_ = 31;
199567    +      P_Attrition_Flag0  =                 0.96;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96;
199568    +      P_Attrition_Flag1  =                 0.04;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.04;
199569    +      Q_Attrition_Flag0  =                 0.96;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96;
199570    +      Q_Attrition_Flag1  =                 0.04;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.04;
199571    +      V_Attrition_Flag0  =     0.84615384615384;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.84615384615384;
199572    +      V_Attrition_Flag1  =     0.15384615384615;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.15384615384615;
199573    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199574    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199575    +      END;
MPRINT(EM_DIAGRAM):   END;
199576    +    ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
199577    +      _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
199578    +      _LEAF_  =                   32;
MPRINT(EM_DIAGRAM):   _LEAF_ = 32;
199579    +      P_Attrition_Flag0  =     0.29032258064516;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.29032258064516;
199580    +      P_Attrition_Flag1  =     0.70967741935483;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.70967741935483;
199581    +      Q_Attrition_Flag0  =     0.29032258064516;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.29032258064516;
199582    +      Q_Attrition_Flag1  =     0.70967741935483;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.70967741935483;
199583    +      V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
199584    +      V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
199585    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199586    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199587    +      END;
MPRINT(EM_DIAGRAM):   END;
199588    +    ELSE IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('3' ,'4' ) THEN DO;
199589    +      _NODE_  =                   40;
MPRINT(EM_DIAGRAM):   _NODE_ = 40;
199590    +      _LEAF_  =                   33;
MPRINT(EM_DIAGRAM):   _LEAF_ = 33;
199591    +      P_Attrition_Flag0  =     0.11403508771929;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.11403508771929;
199592    +      P_Attrition_Flag1  =      0.8859649122807;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8859649122807;
199593    +      Q_Attrition_Flag0  =     0.11403508771929;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.11403508771929;
199594    +      Q_Attrition_Flag1  =      0.8859649122807;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8859649122807;
199595    +      V_Attrition_Flag0  =     0.21153846153846;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.21153846153846;
199596    +      V_Attrition_Flag1  =     0.78846153846153;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.78846153846153;
199597    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199598    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199599    +      END;
MPRINT(EM_DIAGRAM):   END;
199600    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199601    +      _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
199602    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
199603    +      IF _ARBFMT_12 IN ('9' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ) THEN DO;
199604    +        _NODE_  =                  113;
MPRINT(EM_DIAGRAM):   _NODE_ = 113;
199605    +        _LEAF_  =                   34;
MPRINT(EM_DIAGRAM):   _LEAF_ = 34;
199606    +        P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
199607    +        P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
199608    +        Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
199609    +        Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
199610    +        V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
199611    +        V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
199612    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199613    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199614    +        END;
MPRINT(EM_DIAGRAM):   END;
199615    +      ELSE IF _ARBFMT_12 IN ('8' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('8' ) THEN DO;
199616    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199617    +              0.14717998848492 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.14717998848492 <= RANGE_LOG_Total_Trans_Amt THEN DO;
199618    +          _NODE_  =                  238;
MPRINT(EM_DIAGRAM):   _NODE_ = 238;
199619    +          _LEAF_  =                   36;
MPRINT(EM_DIAGRAM):   _LEAF_ = 36;
199620    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
199621    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
199622    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
199623    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
199624    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199625    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199626    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199627    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199628    +          END;
MPRINT(EM_DIAGRAM):   END;
199629    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199630    +          _NODE_  =                  237;
MPRINT(EM_DIAGRAM):   _NODE_ = 237;
199631    +          _LEAF_  =                   35;
MPRINT(EM_DIAGRAM):   _LEAF_ = 35;
199632    +          P_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.71428571428571;
199633    +          P_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.28571428571428;
199634    +          Q_Attrition_Flag0  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.71428571428571;
199635    +          Q_Attrition_Flag1  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.28571428571428;
199636    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
199637    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
199638    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199639    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199640    +          END;
MPRINT(EM_DIAGRAM):   END;
199641    +        END;
MPRINT(EM_DIAGRAM):   END;
199642    +      ELSE IF _ARBFMT_12 IN ('6' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ,'2' ) THEN DO;
199643    +        _NODE_  =                  115;
MPRINT(EM_DIAGRAM):   _NODE_ = 115;
199644    +        _LEAF_  =                   37;
MPRINT(EM_DIAGRAM):   _LEAF_ = 37;
199645    +        P_Attrition_Flag0  =     0.06944444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.06944444444444;
199646    +        P_Attrition_Flag1  =     0.93055555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.93055555555555;
199647    +        Q_Attrition_Flag0  =     0.06944444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.06944444444444;
199648    +        Q_Attrition_Flag1  =     0.93055555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.93055555555555;
199649    +        V_Attrition_Flag0  =     0.05882352941176;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.05882352941176;
199650    +        V_Attrition_Flag1  =     0.94117647058823;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.94117647058823;
199651    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199652    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199653    +        END;
MPRINT(EM_DIAGRAM):   END;
199654    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199655    +        _NODE_  =                  116;
MPRINT(EM_DIAGRAM):   _NODE_ = 116;
199656    +        _LEAF_  =                   38;
MPRINT(EM_DIAGRAM):   _LEAF_ = 38;
199657    +        P_Attrition_Flag0  =      0.0188679245283;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.0188679245283;
199658    +        P_Attrition_Flag1  =     0.98113207547169;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.98113207547169;
199659    +        Q_Attrition_Flag0  =      0.0188679245283;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.0188679245283;
199660    +        Q_Attrition_Flag1  =     0.98113207547169;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.98113207547169;
199661    +        V_Attrition_Flag0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.06666666666666;
199662    +        V_Attrition_Flag1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.93333333333333;
199663    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199664    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199665    +        END;
MPRINT(EM_DIAGRAM):   END;
199666    +      END;
MPRINT(EM_DIAGRAM):   END;
199667    +    END;
MPRINT(EM_DIAGRAM):   END;
199668    +  END;
MPRINT(EM_DIAGRAM):   END;
199669    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199670    +  IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199671    +        0.33903522463476 <= RANGE_LOG_Total_Trans_Amt  AND
199672    +    RANGE_LOG_Total_Trans_Amt  <      0.5292669551731 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.33903522463476 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.5292669551731 THEN DO;
199673    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
199674    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
199675    +    IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
199676    +      IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
199677    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.15336512310644 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.15336512310644 THEN DO;
199678    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199679    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.42306142585878 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.42306142585878 THEN DO;
199680    +          _NODE_  =                  300;
MPRINT(EM_DIAGRAM):   _NODE_ = 300;
199681    +          _LEAF_  =                   76;
MPRINT(EM_DIAGRAM):   _LEAF_ = 76;
199682    +          P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
199683    +          P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
199684    +          Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
199685    +          Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
199686    +          V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
199687    +          V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
199688    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199689    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199690    +          END;
MPRINT(EM_DIAGRAM):   END;
199691    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199692    +              0.46814885494745 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  AND
199693    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.49667641774778 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.46814885494745 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.49667641774778 THEN DO;
199694    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199695    +                0.46885113560247 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.46885113560247 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
199696    +            _NODE_  =                  366;
MPRINT(EM_DIAGRAM):   _NODE_ = 366;
199697    +            _LEAF_  =                   79;
MPRINT(EM_DIAGRAM):   _LEAF_ = 79;
199698    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
199699    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
199700    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
199701    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
199702    +            V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199703    +            V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199704    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199705    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199706    +            END;
MPRINT(EM_DIAGRAM):   END;
199707    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199708    +            _NODE_  =                  365;
MPRINT(EM_DIAGRAM):   _NODE_ = 365;
199709    +            _LEAF_  =                   78;
MPRINT(EM_DIAGRAM):   _LEAF_ = 78;
199710    +            P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199711    +            P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199712    +            Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199713    +            Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199714    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199715    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199716    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199717    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199718    +            END;
MPRINT(EM_DIAGRAM):   END;
199719    +          END;
MPRINT(EM_DIAGRAM):   END;
199720    +        ELSE IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
199721    +              0.49667641774778 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.49667641774778 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
199722    +          _NODE_  =                  303;
MPRINT(EM_DIAGRAM):   _NODE_ = 303;
199723    +          _LEAF_  =                   80;
MPRINT(EM_DIAGRAM):   _LEAF_ = 80;
199724    +          P_Attrition_Flag0  =     0.34615384615384;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.34615384615384;
199725    +          P_Attrition_Flag1  =     0.65384615384615;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.65384615384615;
199726    +          Q_Attrition_Flag0  =     0.34615384615384;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.34615384615384;
199727    +          Q_Attrition_Flag1  =     0.65384615384615;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.65384615384615;
199728    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
199729    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
199730    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199731    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199732    +          END;
MPRINT(EM_DIAGRAM):   END;
199733    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199734    +          _NODE_  =                  301;
MPRINT(EM_DIAGRAM):   _NODE_ = 301;
199735    +          _LEAF_  =                   77;
MPRINT(EM_DIAGRAM):   _LEAF_ = 77;
199736    +          P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199737    +          P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199738    +          Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199739    +          Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199740    +          V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
199741    +          V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
199742    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199743    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199744    +          END;
MPRINT(EM_DIAGRAM):   END;
199745    +        END;
MPRINT(EM_DIAGRAM):   END;
199746    +      ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
199747    +            0.15336512310644 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
199748    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.22033442437469 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.15336512310644 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.22033442437469 THEN DO;
199749    +        _NODE_  =                  171;
MPRINT(EM_DIAGRAM):   _NODE_ = 171;
199750    +        _LEAF_  =                   81;
MPRINT(EM_DIAGRAM):   _LEAF_ = 81;
199751    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199752    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199753    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199754    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199755    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199756    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199757    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199758    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199759    +        END;
MPRINT(EM_DIAGRAM):   END;
199760    +      ELSE IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
199761    +            0.22033442437469 <= RANGE_SQRT_Avg_Utilization_Ratio  AND
199762    +        RANGE_SQRT_Avg_Utilization_Ratio  <     0.23141388059994 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.22033442437469 <= RANGE_SQRT_Avg_Utilization_Ratio AND RANGE_SQRT_Avg_Utilization_Ratio < 0.23141388059994 THEN DO;
199763    +        _NODE_  =                  172;
MPRINT(EM_DIAGRAM):   _NODE_ = 172;
199764    +        _LEAF_  =                   82;
MPRINT(EM_DIAGRAM):   _LEAF_ = 82;
199765    +        P_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.42857142857142;
199766    +        P_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.57142857142857;
199767    +        Q_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.42857142857142;
199768    +        Q_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.57142857142857;
199769    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
199770    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
199771    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199772    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199773    +        END;
MPRINT(EM_DIAGRAM):   END;
199774    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199775    +        _NODE_  =                  173;
MPRINT(EM_DIAGRAM):   _NODE_ = 173;
199776    +        _LEAF_  =                   83;
MPRINT(EM_DIAGRAM):   _LEAF_ = 83;
199777    +        P_Attrition_Flag0  =     0.98443579766536;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.98443579766536;
199778    +        P_Attrition_Flag1  =     0.01556420233463;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.01556420233463;
199779    +        Q_Attrition_Flag0  =     0.98443579766536;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.98443579766536;
199780    +        Q_Attrition_Flag1  =     0.01556420233463;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.01556420233463;
199781    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199782    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199783    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199784    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199785    +        END;
MPRINT(EM_DIAGRAM):   END;
199786    +      END;
MPRINT(EM_DIAGRAM):   END;
199787    +    ELSE IF _ARBFMT_12 IN ('6' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('6' ) THEN DO;
199788    +      IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199789    +            0.36372665872069 <= RANGE_Total_Revolving_Bal  AND
199790    +        RANGE_Total_Revolving_Bal  <     0.49841080651569 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.36372665872069 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.49841080651569 THEN DO;
199791    +        _NODE_  =                  175;
MPRINT(EM_DIAGRAM):   _NODE_ = 175;
199792    +        _LEAF_  =                   85;
MPRINT(EM_DIAGRAM):   _LEAF_ = 85;
199793    +        P_Attrition_Flag0  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.25;
199794    +        P_Attrition_Flag1  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.75;
199795    +        Q_Attrition_Flag0  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.25;
199796    +        Q_Attrition_Flag1  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.75;
199797    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199798    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199799    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199800    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199801    +        END;
MPRINT(EM_DIAGRAM):   END;
199802    +      ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199803    +            0.49841080651569 <= RANGE_Total_Revolving_Bal  AND
199804    +        RANGE_Total_Revolving_Bal  <     0.98986889153754 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.49841080651569 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.98986889153754 THEN DO;
199805    +        _NODE_  =                  176;
MPRINT(EM_DIAGRAM):   _NODE_ = 176;
199806    +        _LEAF_  =                   86;
MPRINT(EM_DIAGRAM):   _LEAF_ = 86;
199807    +        P_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.7;
199808    +        P_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.3;
199809    +        Q_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.7;
199810    +        Q_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.3;
199811    +        V_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.57142857142857;
199812    +        V_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.42857142857142;
199813    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199814    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199815    +        END;
MPRINT(EM_DIAGRAM):   END;
199816    +      ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199817    +            0.98986889153754 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.98986889153754 <= RANGE_Total_Revolving_Bal THEN DO;
199818    +        _NODE_  =                  177;
MPRINT(EM_DIAGRAM):   _NODE_ = 177;
199819    +        _LEAF_  =                   87;
MPRINT(EM_DIAGRAM):   _LEAF_ = 87;
199820    +        P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
199821    +        P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
199822    +        Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
199823    +        Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
199824    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199825    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199826    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199827    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199828    +        END;
MPRINT(EM_DIAGRAM):   END;
199829    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199830    +        _NODE_  =                  174;
MPRINT(EM_DIAGRAM):   _NODE_ = 174;
199831    +        _LEAF_  =                   84;
MPRINT(EM_DIAGRAM):   _LEAF_ = 84;
199832    +        P_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.02325581395348;
199833    +        P_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.97674418604651;
199834    +        Q_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.02325581395348;
199835    +        Q_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.97674418604651;
199836    +        V_Attrition_Flag0  =     0.08333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.08333333333333;
199837    +        V_Attrition_Flag1  =     0.91666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.91666666666666;
199838    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199839    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199840    +        END;
MPRINT(EM_DIAGRAM):   END;
199841    +      END;
MPRINT(EM_DIAGRAM):   END;
199842    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199843    +      _NODE_  =                   60;
MPRINT(EM_DIAGRAM):   _NODE_ = 60;
199844    +      _LEAF_  =                   88;
MPRINT(EM_DIAGRAM):   _LEAF_ = 88;
199845    +      P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
199846    +      P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
199847    +      Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
199848    +      Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
199849    +      V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199850    +      V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199851    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199852    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199853    +      END;
MPRINT(EM_DIAGRAM):   END;
199854    +    END;
MPRINT(EM_DIAGRAM):   END;
199855    +  ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199856    +         0.5292669551731 <= RANGE_LOG_Total_Trans_Amt  AND
199857    +    RANGE_LOG_Total_Trans_Amt  <     0.68217373468557 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.5292669551731 <= RANGE_LOG_Total_Trans_Amt AND RANGE_LOG_Total_Trans_Amt < 0.68217373468557 THEN DO;
199858    +    IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199859    +      RANGE_Total_Revolving_Bal  <     0.25129121970599 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.25129121970599 THEN DO;
199860    +      _NODE_  =                   61;
MPRINT(EM_DIAGRAM):   _NODE_ = 61;
199861    +      _LEAF_  =                   89;
MPRINT(EM_DIAGRAM):   _LEAF_ = 89;
199862    +      P_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.02325581395348;
199863    +      P_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.97674418604651;
199864    +      Q_Attrition_Flag0  =     0.02325581395348;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.02325581395348;
199865    +      Q_Attrition_Flag1  =     0.97674418604651;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.97674418604651;
199866    +      V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
199867    +      V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
199868    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199869    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199870    +      END;
MPRINT(EM_DIAGRAM):   END;
199871    +    ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199872    +          0.25129121970599 <= RANGE_Total_Revolving_Bal  AND
199873    +      RANGE_Total_Revolving_Bal  <      0.3917361938816 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.25129121970599 <= RANGE_Total_Revolving_Bal AND RANGE_Total_Revolving_Bal < 0.3917361938816 THEN DO;
199874    +      _NODE_  =                   62;
MPRINT(EM_DIAGRAM):   _NODE_ = 62;
199875    +      _LEAF_  =                   90;
MPRINT(EM_DIAGRAM):   _LEAF_ = 90;
199876    +      P_Attrition_Flag0  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.44444444444444;
199877    +      P_Attrition_Flag1  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.55555555555555;
199878    +      Q_Attrition_Flag0  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.44444444444444;
199879    +      Q_Attrition_Flag1  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.55555555555555;
199880    +      V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
199881    +      V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
199882    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199883    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199884    +      END;
MPRINT(EM_DIAGRAM):   END;
199885    +    ELSE IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
199886    +          0.86809694080254 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.86809694080254 <= RANGE_Total_Revolving_Bal THEN DO;
199887    +      _NODE_  =                   64;
MPRINT(EM_DIAGRAM):   _NODE_ = 64;
199888    +      _LEAF_  =                   95;
MPRINT(EM_DIAGRAM):   _LEAF_ = 95;
199889    +      P_Attrition_Flag0  =                 0.35;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.35;
199890    +      P_Attrition_Flag1  =                 0.65;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.65;
199891    +      Q_Attrition_Flag0  =                 0.35;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.35;
199892    +      Q_Attrition_Flag1  =                 0.65;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.65;
199893    +      V_Attrition_Flag0  =                0.125;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.125;
199894    +      V_Attrition_Flag1  =                0.875;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.875;
199895    +      I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199896    +      U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199897    +      END;
MPRINT(EM_DIAGRAM):   END;
199898    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199899    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199900    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <      0.4303969058852 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.4303969058852 THEN DO;
199901    +        _NODE_  =                  180;
MPRINT(EM_DIAGRAM):   _NODE_ = 180;
199902    +        _LEAF_  =                   91;
MPRINT(EM_DIAGRAM):   _LEAF_ = 91;
199903    +        P_Attrition_Flag0  =     0.88235294117647;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.88235294117647;
199904    +        P_Attrition_Flag1  =     0.11764705882352;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.11764705882352;
199905    +        Q_Attrition_Flag0  =     0.88235294117647;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.88235294117647;
199906    +        Q_Attrition_Flag1  =     0.11764705882352;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.11764705882352;
199907    +        V_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.8;
199908    +        V_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.2;
199909    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199910    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199911    +        END;
MPRINT(EM_DIAGRAM):   END;
199912    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199913    +            0.47044734524227 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
199914    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.48468025968557 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.47044734524227 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.48468025968557 THEN DO;
199915    +        _NODE_  =                  182;
MPRINT(EM_DIAGRAM):   _NODE_ = 182;
199916    +        _LEAF_  =                   93;
MPRINT(EM_DIAGRAM):   _LEAF_ = 93;
199917    +        P_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.57142857142857;
199918    +        P_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.42857142857142;
199919    +        Q_Attrition_Flag0  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.57142857142857;
199920    +        Q_Attrition_Flag1  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.42857142857142;
199921    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199922    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199923    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199924    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199925    +        END;
MPRINT(EM_DIAGRAM):   END;
199926    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199927    +            0.48468025968557 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.48468025968557 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
199928    +        _NODE_  =                  183;
MPRINT(EM_DIAGRAM):   _NODE_ = 183;
199929    +        _LEAF_  =                   94;
MPRINT(EM_DIAGRAM):   _LEAF_ = 94;
199930    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
199931    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
199932    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
199933    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
199934    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199935    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
199936    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
199937    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
199938    +        END;
MPRINT(EM_DIAGRAM):   END;
199939    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199940    +        _NODE_  =                  181;
MPRINT(EM_DIAGRAM):   _NODE_ = 181;
199941    +        _LEAF_  =                   92;
MPRINT(EM_DIAGRAM):   _LEAF_ = 92;
199942    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199943    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199944    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199945    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199946    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199947    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199948    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199949    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199950    +        END;
MPRINT(EM_DIAGRAM):   END;
199951    +      END;
MPRINT(EM_DIAGRAM):   END;
199952    +    END;
MPRINT(EM_DIAGRAM):   END;
199953    +  ELSE IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
199954    +        0.68217373468557 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.68217373468557 <= RANGE_LOG_Total_Trans_Amt THEN DO;
199955    +    _NODE_  =                   20;
MPRINT(EM_DIAGRAM):   _NODE_ = 20;
199956    +    _LEAF_  =                   96;
MPRINT(EM_DIAGRAM):   _LEAF_ = 96;
199957    +    P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
199958    +    P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
199959    +    Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
199960    +    Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
199961    +    V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
199962    +    V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199963    +    I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199964    +    U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199965    +    END;
MPRINT(EM_DIAGRAM):   END;
199966    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
199967    +    _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
199968    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
199969    +    IF _ARBFMT_12 IN ('1' ,'3' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'3' ,'2' ) THEN DO;
199970    +      IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199971    +            0.39856812249138 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
199972    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.47370187464616 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.39856812249138 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.47370187464616 THEN DO;
199973    +        _NODE_  =                  155;
MPRINT(EM_DIAGRAM):   _NODE_ = 155;
199974    +        _LEAF_  =                   70;
MPRINT(EM_DIAGRAM):   _LEAF_ = 70;
199975    +        P_Attrition_Flag0  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.52941176470588;
199976    +        P_Attrition_Flag1  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.47058823529411;
199977    +        Q_Attrition_Flag0  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.52941176470588;
199978    +        Q_Attrition_Flag1  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.47058823529411;
199979    +        V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
199980    +        V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
199981    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199982    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199983    +        END;
MPRINT(EM_DIAGRAM):   END;
199984    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199985    +            0.47370187464616 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  AND
199986    +        RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.50814574678553 THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.47370187464616 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.50814574678553 THEN DO;
199987    +        _NODE_  =                  156;
MPRINT(EM_DIAGRAM):   _NODE_ = 156;
199988    +        _LEAF_  =                   71;
MPRINT(EM_DIAGRAM):   _LEAF_ = 71;
199989    +        P_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.77777777777777;
199990    +        P_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.22222222222222;
199991    +        Q_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.77777777777777;
199992    +        Q_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.22222222222222;
199993    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
199994    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
199995    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
199996    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
199997    +        END;
MPRINT(EM_DIAGRAM):   END;
199998    +      ELSE IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
199999    +            0.50814574678553 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.50814574678553 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
200000    +        _NODE_  =                  157;
MPRINT(EM_DIAGRAM):   _NODE_ = 157;
200001    +        _LEAF_  =                   72;
MPRINT(EM_DIAGRAM):   _LEAF_ = 72;
200002    +        P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
200003    +        P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
200004    +        Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
200005    +        Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
200006    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
200007    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
200008    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
200009    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
200010    +        END;
MPRINT(EM_DIAGRAM):   END;
200011    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
200012    +        _NODE_  =                  154;
MPRINT(EM_DIAGRAM):   _NODE_ = 154;
200013    +        _LEAF_  =                   69;
MPRINT(EM_DIAGRAM):   _LEAF_ = 69;
200014    +        P_Attrition_Flag0  =     0.05263157894736;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05263157894736;
200015    +        P_Attrition_Flag1  =     0.94736842105263;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94736842105263;
200016    +        Q_Attrition_Flag0  =     0.05263157894736;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05263157894736;
200017    +        Q_Attrition_Flag1  =     0.94736842105263;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94736842105263;
200018    +        V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
200019    +        V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
200020    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
200021    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
200022    +        END;
MPRINT(EM_DIAGRAM):   END;
200023    +      END;
MPRINT(EM_DIAGRAM):   END;
200024    +    ELSE IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('4' ) THEN DO;
200025    +      _NODE_  =                   55;
MPRINT(EM_DIAGRAM):   _NODE_ = 55;
200026    +      _LEAF_  =                   73;
MPRINT(EM_DIAGRAM):   _LEAF_ = 73;
200027    +      P_Attrition_Flag0  =     0.73076923076923;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.73076923076923;
200028    +      P_Attrition_Flag1  =     0.26923076923076;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.26923076923076;
200029    +      Q_Attrition_Flag0  =     0.73076923076923;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.73076923076923;
200030    +      Q_Attrition_Flag1  =     0.26923076923076;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.26923076923076;
200031    +      V_Attrition_Flag0  =     0.69565217391304;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.69565217391304;
200032    +      V_Attrition_Flag1  =     0.30434782608695;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.30434782608695;
200033    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
200034    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
200035    +      END;
MPRINT(EM_DIAGRAM):   END;
200036    +    ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   ELSE IF _ARBFMT_12 IN ('5' ) THEN DO;
200037    +      _NODE_  =                   56;
MPRINT(EM_DIAGRAM):   _NODE_ = 56;
200038    +      _LEAF_  =                   74;
MPRINT(EM_DIAGRAM):   _LEAF_ = 74;
200039    +      P_Attrition_Flag0  =     0.90816326530612;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.90816326530612;
200040    +      P_Attrition_Flag1  =     0.09183673469387;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.09183673469387;
200041    +      Q_Attrition_Flag0  =     0.90816326530612;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.90816326530612;
200042    +      Q_Attrition_Flag1  =     0.09183673469387;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.09183673469387;
200043    +      V_Attrition_Flag0  =     0.94642857142857;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.94642857142857;
200044    +      V_Attrition_Flag1  =     0.05357142857142;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.05357142857142;
200045    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
200046    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
200047    +      END;
MPRINT(EM_DIAGRAM):   END;
200048    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
200049    +      _NODE_  =                   57;
MPRINT(EM_DIAGRAM):   _NODE_ = 57;
200050    +      _LEAF_  =                   75;
MPRINT(EM_DIAGRAM):   _LEAF_ = 75;
200051    +      P_Attrition_Flag0  =     0.99732530926111;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.99732530926111;
200052    +      P_Attrition_Flag1  =     0.00267469073888;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.00267469073888;
200053    +      Q_Attrition_Flag0  =     0.99732530926111;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.99732530926111;
200054    +      Q_Attrition_Flag1  =     0.00267469073888;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.00267469073888;
200055    +      V_Attrition_Flag0  =     0.99528301886792;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99528301886792;
200056    +      V_Attrition_Flag1  =     0.00471698113207;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00471698113207;
200057    +      I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
200058    +      U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
200059    +      END;
MPRINT(EM_DIAGRAM):   END;
200060    +    END;
MPRINT(EM_DIAGRAM):   END;
200061    +  END;
MPRINT(EM_DIAGRAM):   END;
200062    +
200063    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
200064    +IF  F_Attrition_Flag  NE '0'
200065    +AND F_Attrition_Flag  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Attrition_Flag NE '0' AND F_Attrition_Flag NE '1' THEN DO;
200066    +        R_Attrition_Flag0  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = .;
200067    +        R_Attrition_Flag1  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = .;
200068    + END;
MPRINT(EM_DIAGRAM):   END;
200069    + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
200070    +       R_Attrition_Flag0  =  -P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = -P_Attrition_Flag0 ;
200071    +       R_Attrition_Flag1  =  -P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = -P_Attrition_Flag1 ;
200072    +       SELECT( F_Attrition_Flag  );
MPRINT(EM_DIAGRAM):   SELECT( F_Attrition_Flag );
200073    +          WHEN( '0'  ) R_Attrition_Flag0  = R_Attrition_Flag0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_Attrition_Flag0 = R_Attrition_Flag0 +1;
200074    +          WHEN( '1'  ) R_Attrition_Flag1  = R_Attrition_Flag1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_Attrition_Flag1 = R_Attrition_Flag1 +1;
200075    +       END;
MPRINT(EM_DIAGRAM):   END;
200076    + END;
MPRINT(EM_DIAGRAM):   END;
200077    +
200078    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
200079    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
200080    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
200081    +
200082    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
200083     run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
200084     quit;
200085     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
200087     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
200088     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
200089     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
200090     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
200091     * Tree2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree2: Computing metadata for TRAIN data;
200092     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Tree2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Tree2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Tree2_TRAIN out=WORK.M094PBIY noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M094PBIY;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M094PBIY(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M094PBIY;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M094PBIY;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0916MRG NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0916MRG;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0916MRG;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3RR9EM6(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0916MRG;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0916MRG;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0916MRG;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0916MRG;
MPRINT(EMADVISECOLUMNS):   set WORK.M0916MRG;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_ATTRITION_FLAG1") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("P_ATTRITION_FLAG0") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree2";
MPRINT(EM_DIAGRAM):   when("ATTRITION_FLAG") model = "Tree2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "G_CONTACTS_COUNT_12_MON" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "G_MONTHS_INACTIVE_12_MON" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "G_MONTHS_ON_BOOK" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_ATTRITION_FLAG0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_ATTRITION_FLAG1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
200464     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
200465     set EMWS1.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMINFO;
200466     where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
200467     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
200468     data EMWS1.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree2_EMINFO;
200469     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
200470     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
200471     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
200475     run;
200476     data EMWS1.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_EMINFO;
200477     set EMWS1.Tree2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMINFO WORK.MODELTEMP_INFO;
200478     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
200479     proc sort data = EMWS1.Tree2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree2_EMINFO NOTHREADS;
200480     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
200481     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
200482     proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
200483     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
200484     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
200485     proc sort data = EMWS1.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
200486     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
200487     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
200488     data EMWS1.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_EMINFO;
200489     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
200490     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
200491     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
200492     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
200493     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
200494     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
200495     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.TREE2_TEST.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:10:57" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 09, 2022
Time:                15:10:57
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O08YFVLP "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O08YFVLP new;
MPRINT(EM_DIAGRAM):   run;
200519     data EMWS1.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree2_EMOUTFIT;
200520     set EMWS1.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMOUTFIT;
200521     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
200522     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
200523     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
200524     proc sort data=EMWS1.Tree2_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree2_EMREPORTFIT nothreads;
200525     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
200526     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The data set EMWS1.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
200527     %let _EMwarndup = 0;
200528     %let _EMtargetdup =;
200529     %let _EMASEtargetdup =;
200530     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
200531     set EMWS1.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMOUTFIT;
200532     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
200533     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
200534     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
200535     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
200536     end;
MPRINT(EM_DIAGRAM):   end;
200537     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
200538     %let EMEXCEPTIONSTRING=;
200539     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
200540     * REPORT: Tree2;
MPRINT(EM_DIAGRAM):   * REPORT: Tree2;
200541     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
200542     %let EM_ACTION = REPORT;
200543     %let syscc = 0;
200544     %macro main;
200545
200546       %if %upcase(&EM_ACTION) = CREATE %then %do;
200547         filename temp catalog 'sashelp.emmodl.tree_create.source';
200548         %include temp;
200549         filename temp;
200550
200551         %em_tree_create;
200552       %end;
200553
200554        %else
200555        %if %upcase(&EM_ACTION) = TRAIN %then %do;
200556
200557            filename temp catalog 'sashelp.emmodl.tree_train.source';
200558            %include temp;
200559            filename temp;
200560            %em_tree_train;
200561        %end;
200562
200563       %else
200564       %if %upcase(&EM_ACTION) = SCORE %then %do;
200565         filename temp catalog 'sashelp.emmodl.tree_score.source';
200566         %include temp;
200567         filename temp;
200568
200569         %em_tree_score;
200570
200571       %end;
200572
200573       %else
200574       %if %upcase(&EM_ACTION) = REPORT %then %do;
200575
200576            filename temp catalog 'sashelp.emmodl.tree_report.source';
200577            %include temp;
200578            filename temp;
200579
200580            %em_tree_report;
200581        %end;
200582
200583       %else
200584       %if %upcase(&EM_ACTION) = OPENINT %then %do;
200585
200586            filename temp catalog 'sashelp.emmodl.tree_actions.source';
200587            %include temp;
200588            filename temp;
200589            %EM_TREE_OPENTREEVIEWER;
200590
200591        %end;
200592
200593       %else
200594       %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
200595
200596            filename temp catalog 'sashelp.emmodl.tree_actions.source';
200597            %include temp;
200598            filename temp;
200599            %EM_TREE_CLOSETREEVIEWER;
200600
200601        %end;
200602
200603
200604        %doendm:
200605     %mend main;
200606
200607     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
200609    +%macro em_tree_makePlotDs( multipleTar= );
200611    +  %EM_GETNAME(key=OUTSTATS, type=DATA);
200612    +  %EM_GETNAME(key=OUTNODES, type=DATA);
200613    +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
200614    +  %EM_GETNAME(key=OUTRULES, type=DATA);
200616    +  /* determine if validation statistics will be displayed */
200617    +  %let validflag=N;
200618    +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
200619    +    /* determine if validation data exists */
200620    +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
200621    +      %let validflag=Y;
200622    +    %end;
200623    +  %end;
200625    +   /* retrieve name of decmeta even in presence of multiple targets */
200626    +   %let decmeta = ;
200627    +   %if &EM_DEC_DECMETA eq %then %do;
200628    +     data _Target;
200629    +       set &em_data_variableset;
200630    +       where ROLE='TARGET' and USE in('D', 'Y');
200631    +       keep NAME;
200632    +     run;
200633    +     proc sort data=_Target;
200634    +       by NAME;
200635    +     run;
200636    +     proc sort data=EM_TARGETDECINFO;
200637    +       by TARGET;
200638    +     run;
200639    +     data _Target;
200640    +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
200641    +       by NAME;
200642    +       if _a then do;
200643    +         call symput('decmeta', trim(DECMETA));
200644    +       end;
200645    +     run;
200646    +     proc delete data=_Target;run;
200647    +   %end;
200648    +   %else %let decmeta = &EM_DEC_DECMETA;
200651    +  /* retrieve targetEvent from decmeta */
200652    +  %let targetEvent=;
200653    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
200654    +    %if %sysfunc(exist(&DECMETA)) %then %do;
200655    +      data _null_;
200656    +       set &DECMETA(where=(_TYPE_="TARGET"));
200657    +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
200658    +      run;
200659    +    %end;
200660    +  %end;
200662    +  /* retrieve predicted var for targetEvent from decmeta */
200663    +  %let predTarget=;
200664    +  %let predLvl=;
200665    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
200666    +    %if %sysfunc(exist(&DECMETA)) %then %do;
200667    +      data _null_;
200668    +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
200669    +       call symput('predTarget', strip(VARIABLE));
200670    +       call symput('predLvl', strip(LEVEL));
200671    +      run;
200672    +    %end;
200673    +  %end;
200674    +  %else %do;
200675    +    %if %sysfunc(exist(&DECMETA)) %then %do;
200676    +      data _null_;
200677    +       set &DECMETA(where=(_TYPE_="PREDICTED"));
200678    +       call symput('predTarget', strip(VARIABLE));
200679    +      run;
200680    +    %end;
200681    +  %end;
200683    +  /* create BelowText value */
200684    +  data belowtext;
200685    +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
200686    +    keep node belowtext;
200687    +  run;
200689    +  /* replace belowtext with variable label if it exists */
200690    +  data belowtext2;
200691    +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
200692    +    keep node belowtextlbl;
200693    +  run;
200695    +  proc sort data=belowtext; by node; run;
200696    +  proc sort data=belowtext2; by node; run;
200698    +  data belowtext;
200699    +    merge belowtext belowtext2(in=_a);
200700    +    by node;
200701    +    if _a then belowtext=belowtextlbl;
200702    +    keep node belowtext;
200703    +  run;
200705    +  /* create AboveText value */
200706    +  data abovetext;
200707    +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
200708    +  run;
200709    +  proc sort data=abovetext; by node numeric_value; run;
200711    +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
200712    +  data abovetext;
200713    +    set abovetext(rename=(node=parent));
200714    +    by parent numeric_value;
200715    +    retain abovetext tempstring flag branch origval origchar ;
200716    +    length abovetext $256;
200717    +    length tempstring origchar $64;
200719    +    if STAT in ("INTERVAL", "ORDINAL") then do;
200720    +      if first.parent then do;
200721    +        if missing(character_value) then do;
200722    +          numeric_value = round(numeric_value, &sp_precision);
200723    +          abovetext = "< "||strip(NUMERIC_VALUE);
200724    +          branch = 1;
200725    +          origval = numeric_value;
200726    +          output;
200727    +        end;
200728    +        else do;
200729    +          abovetext = "< "||strip(CHARACTER_VALUE);
200730    +          branch = 1;
200731    +          origchar = character_value;
200732    +          output;
200733    +        end;
200735    +        if first.parent AND last.parent then do;
200736    +          if missing(character_value) then do;
200737    +            numeric_value = round(numeric_value, &sp_precision);
200738    +            branch = branch + 1;
200739    +            abovetext = ">= "||strip(NUMERIC_VALUE);
200740    +            output;
200741    +          end;
200742    +          else do;
200743    +            branch = branch + 1;
200744    +            abovetext = ">= "||strip(CHARACTER_VALUE);
200745    +            output;
200746    +          end;
200747    +        end;
200748    +      end;
200749    +      else if last.parent then do;
200750    +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
200751    +          if missing(character_value) then do;
200752    +            numeric_value = round(numeric_value, &sp_precision);
200753    +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
200754    +          end;
200755    +          else do;
200756    +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
200757    +          end;
200758    +          branch = branch + 1;
200759    +          output;
200761    +          if missing(character_value) then do;
200762    +            numeric_value = round(numeric_value, &sp_precision);
200763    +            abovetext = ">= "||strip(NUMERIC_VALUE);
200764    +          end;
200765    +          else do;
200766    +            abovetext = ">= "||strip(CHARACTER_VALUE);
200767    +          end;
200768    +          branch = branch + 1;
200769    +          output;
200770    +        end;
200771    +        else do;
200772    +          if missing(character_value) then do;
200773    +            numeric_value = round(numeric_value, &sp_precision);
200774    +            abovetext = ">= "||strip(NUMERIC_VALUE);
200775    +          end;
200776    +          else do;
200777    +            abovetext = ">= "||strip(CHARACTER_VALUE);
200778    +          end;
200779    +          branch = branch + 1;
200780    +          output;
200781    +        end;
200782    +      end;
200783    +      else do;
200784    +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
200785    +          if missing(character_value) then do;
200786    +            numeric_value = round(numeric_value,&sp_precision);
200787    +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
200788    +            origval = numeric_value;
200789    +          end;
200790    +          else do;
200791    +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
200792    +            origchar = character_value;
200793    +          end;
200794    +          branch = branch + 1;
200795    +          output;
200797    +        end;
200798    +        else do;
200799    +          if missing(character_value) then do;
200800    +            numeric_value = round(numeric_value, &sp_precision);
200801    +            abovetext = ">= "||strip(NUMERIC_VALUE);
200802    +            origval = numeric_value;
200803    +          end;
200804    +          else do;
200805    +            abovetext = ">= "||strip(CHARACTER_VALUE);
200806    +            origval = character_value;
200807    +          end;
200808    +          branch = branch + 1;
200809    +          output;
200810    +        end;
200811    +      end;
200812    +    end;
200813    +    else do;
200814    +       if first.numeric_value then do;
200815    +         flag = 0;
200816    +         abovetext = strip(CHARACTER_VALUE);
200817    +         branch = numeric_value;
200818    +         if first.numeric_value AND last.numeric_value then do;
200819    +           output;
200820    +         end;
200821    +       end;
200822    +       else if last.numeric_value then do;
200823    +         if flag=0 then do;
200824    +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
200825    +           length = length(strip(tempstring));
200826    +           if length < 32 then do;
200827    +             abovetext = strip(tempstring);
200828    +           end;
200829    +           else do;
200830    +             abovetext = strip(abovetext)||", ...";
200831    +             flag = 1;
200832    +           end;
200833    +         end;
200834    +         branch = numeric_value;
200835    +         output;
200836    +       end;
200837    +       else do;
200838    +         if flag=0 then do;
200839    +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
200840    +           length = length(strip(tempstring));
200841    +           if length < 32 then do;
200842    +             abovetext = strip(tempstring);
200843    +           end;
200844    +           else do;
200845    +             abovetext = strip(abovetext)||", ...";
200846    +             flag=1;
200847    +           end;
200848    +         end;
200849    +         branch = numeric_value;
200850    +       end;
200851    +    end;
200852    +    keep parent branch abovetext;
200853    +  run;
200855    +  /* Missing value to abovetext */
200856    +  data tempmissing;
200857    +    set &EM_USER_OUTRULES;
200858    +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
200859    +    rename node=parent numeric_value=branch character_value=misschar;
200860    +  run;
200863    +  proc sort data=abovetext; by parent branch; run;
200864    +  proc sort data=tempmissing; by parent branch; run;
200865    +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
200867    +  data tempoutnodes;
200868    +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
200869    +    by parent branch;
200870    +    length traintotal validtotal 8;
200871    +    retain traintotal validtotal;
200873    +    if _a then do;
200874    +      if ^MISSING(abovetext) then do;
200875    +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
200876    +      end;
200877    +      else do;
200878    +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
200879    +      end;
200880    +    end;
200881    +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
200883    +    if node=1 then do;
200884    +      traintotal = N;
200885    +      validtotal=VN;
200886    +    end;
200888    +    drop role rank stat misschar belowtext;
200889    +  run;
200890    +  proc sort data=tempoutnodes; by node; run;
200891    +  proc sort data=belowtext; by node; run;
200893    +  data tempoutnodes;
200894    +    merge tempoutnodes belowtext;
200895    +    by node;
200897    +  run;
200899    +  /* determine if adjusted counts exists; if so, use these vs true counts */
200900    +  %let adjusted = N;
200901    +  %let npriors = 0;
200902    +  data _null_ ;
200903    +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
200904    +    if eof then do ;
200905    +      call symput("npriors" , strip(put(_N_,best.))) ;
200906    +    end;
200907    +  run;
200908    +  %if &npriors gt 0 %then %let adjusted=Y;
200911    +  /* create a table with targetUsed and targetLevel columns for each node */
200912    +  data temptarmeta;
200913    +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
200914    +    %if &multipleTar eq N %then %do;
200915    +      AND USE in ('D', 'Y')
200916    +    %end;
200917    +    ));
200918    +    length TARGET $32;
200919    +    Target=name;
200920    +    keep target level;
200921    +  run;
200923    +  %if &multipleTar eq Y %then %do;
200924    +    data temptargetused;
200925    +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
200926    +      keep node target;
200927    +    run;
200928    +    proc sort data=temptargetused; by target; run;
200929    +    proc sort data=temptarmeta; by target; run;
200930    +    data temptargetused;
200931    +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
200932    +      by target;
200933    +      if _a and _b;
200934    +    run;
200935    +  %end;
200936    +  %else %do;
200937    +    data temptargetused;
200938    +      set &EM_USER_OUTSTATS;
200939    +      length target $32 tarlevel $10;
200940    +      target="%EM_TARGET";
200941    +      tarlevel="%EM_TARGET_LEVEL";
200942    +      keep node target tarlevel;
200943    +    run;
200944    +    proc sort data=temptargetused nodupkey; by node; run;
200945    +  %end;
200947    +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
200948    +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
200949    +  proc sort data=temptargetused; by node; run;
200952    +  /* create tables for all interval targets as well as all class targets */
200953    +  data tempinterval tempclass;
200954    +    merge tempoutstats temptargetused( rename=(target=targetused));
200955    +    by node;
200956    +    %if "&multipleTar" eq "Y" %then %do;
200957    +      if ((missing(Target)) OR (target=targetused ));
200958    +    %end;
200960    +    if tarlevel="INTERVAL" then output tempinterval;
200961    +    else output tempclass;
200962    +  run;
200964    +  /* initialize intTarget and classTarget flags */
200965    +  %let em_intNobs =0;
200966    +  %let em_classNobs = 0;
200967    +  %let em_intTarget= N;
200968    +  %let em_classTarget= N;
200970    +  proc sql;
200971    +    reset noprint;
200972    +    select count(*) into :em_intNobs from tempinterval;
200973    +  quit;
200974    +  proc sql;
200975    +    reset noprint;
200976    +    select count(*) into :em_classNobs from tempclass;
200977    +  quit;
200979    +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
200980    +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
200982    +  /* retrieve all information for interval targets */
200983    +  %if &em_intTarget eq Y %then %do;
200985    +    /* determine if leaf variable exists */
200986    +    %let dsid=%sysfunc(open(tempinterval,i));
200987    +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
200988    +    %let rc=%sysfunc(close(&dsid));
200990    +    proc transpose data=tempinterval
200991    +      %if &leafexists %then %do;
200992    +        (drop=leaf)
200993    +      %end;
200994    +      %if &validexist %then %do;
200995    +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
200996    +      %end;
200997    +      %else %do;
200998    +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
200999    +      %end;
201000    +      by node;
201001    +      id statname;
201002    +    run;
201003    +    data tempinterval;
201004    +      set tempinterval;
201005    +      if missing(N) then delete;
201006    +    run;
201007    +  %end;
201009    +  /* retrieve all information for class targets */
201010    +  %if &em_classTarget eq Y %then %do;
201011    +    proc sort data=tempclass; by node category; run;
201012    +    %if &validflag eq N %then %do;
201013    +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
201014    +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
201015    +    %end;
201016    +    %else %do;
201017    +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
201018    +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
201019    +    %end;
201020    +      set tempclass;
201022    +      %if &validflag eq N %then %do;
201023    +        %if "&adjusted" eq "N" %then %do;
201024    +          if statname="N" then output tempn;
201025    +        %end;
201026    +        %else %do;
201027    +          if statname="NPRIORS" then output tempn;
201028    +        %end;
201029    +        else if statname="PREDICTION" then output temppredict;
201030    +        else if statname="PROBABILITY" then output tempprob;
201031    +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
201032    +        else if statname="ALTERNATIVE LOSS" then output temploss;
201033    +      %end;
201034    +      %else %do;
201035    +        %if "&adjusted" eq "N" %then %do;
201036    +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
201037    +        %end;
201038    +        %else %do;
201039    +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
201040    +        %end;
201041    +        else if statname="PREDICTION" then output temppredict;
201042    +        else if statname="PROBABILITY" then output tempprob;
201043    +        else if statname="VALID: PROBABILITY" then output tempvprob;
201044    +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
201045    +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
201046    +      %end;
201047    +    run;
201050    +    /* determine if profit/loss exists in tempprofit */
201051    +    %let em_profitflag=0;
201052    +    %let em_lossflag=0;
201053    +    proc sql;
201054    +      reset noprint;
201055    +      select count(*) into :em_profitflag from tempprofit;
201056    +    quit;
201057    +    proc sql;
201058    +      reset noprint;
201059    +      select count(*) into :em_lossflag from temploss;
201060    +    quit;
201062    +    %if &validFlag eq Y %then %do;
201063    +      proc transpose data=tempn
201064    +        %if "&adjusted" eq "N" %then %do;
201065    +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
201066    +        %end;
201067    +        %else %do;
201068    +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
201069    +        %end;
201070    +        by node;
201071    +        id statname;
201072    +      run;
201073    +      %if &em_profitflag ne 0 %then %do;
201074    +        proc transpose data=tempprofit out=tempprofit;
201075    +          by node category;
201076    +          id statname ;
201077    +        run;
201078    +      %end;
201079    +      %if &em_lossflag ne 0 %then %do;
201080    +        proc transpose data=temploss out=temploss;
201081    +          by node category;
201082    +          id statname ;
201083    +        run;
201084    +      %end;
201085    +      data tempprob;
201086    +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
201087    +        by node
201088    +        %if &multipleTar eq Y %then %do;
201089    +          target
201090    +        %end;
201091    +        category;
201092    +      run;
201093    +    %end;
201095    +    /* store percentcorrect value */
201096    +    data temppredict;
201097    +      merge tempprob temppredict(in=_a);
201098    +      by node category;
201099    +      if _a then do;
201100    +        percentCorrect = statvalue;
201101    +        %if &validFlag eq Y %then %do;
201102    +          vpercentCorrect= vstatvalue;
201103    +        %end;
201104    +      end;
201105    +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
201106    +      %if &validFlag eq Y %then %do;
201107    +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
201108    +      %end;
201109    +      ;
201110    +      if missing(percentCorrect) then delete;
201111    +      drop target;
201112    +    run;
201114    +    /* build profittext */
201115    +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
201116    +      data tempprofittext(keep= node profittext profitloss);
201117    +        length profittext $800 profitloss 8.;
201118    +        retain profittext profitloss;
201120    +        merge tempprob
201121    +        %if &em_profitflag ne 0 %then %do;
201122    +          tempprofit
201123    +        %end;
201124    +        %else %if &em_lossflag ne 0 %then %do;
201125    +          temploss
201126    +        %end;
201127    +        ;
201128    +        by node category;
201130    +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
201131    +        %let profittype = &EM_PROPERTY_PROFITLOSS;
201132    +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
201133    +          %let profittype = ALL;
201134    +        %end;
201136    +        /* create the profitloss variable for nodecolor if selected */
201137    +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
201139    +        %if "&profittype" eq "ALL" %then %do;
201140    +          if strip(CATEGORY)="&targetEvent" then do;
201141    +            profitloss=statvalue;
201142    +          end;
201143    +          if first.node then do;
201144    +            %if &validFlag eq N %then %do;
201145    +             %if &em_profitflag ne 0 %then %do;
201146    +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
201147    +             %end;
201148    +             %if &em_lossflag ne 0 %then %do;
201149    +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
201150    +             %end;
201151    +            %end;
201152    +            %else %do;
201153    +             %if &em_profitflag ne 0 %then %do;
201154    +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
201154   !+14.&EM_PROPERTY_SPLITPRECISION);
201155    +             %end;
201156    +             %if &em_lossflag ne 0 %then %do;
201157    +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
201158    +             %end;
201159    +            %end;
201160    +          end;
201161    +          else if last.node then do;
201162    +            %if &validFlag eq N %then %do;
201163    +             %if &em_profitflag ne 0 %then %do;
201164    +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
201165    +             %end;
201166    +             %if &em_lossflag ne 0 %then %do;
201167    +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
201168    +             %end;
201169    +             /*if CATEGORY="&targetEvent" then do;
201170    +               profitloss=statvalue;
201171    +             end;*/
201172    +            %end;
201173    +            %else %do;
201174    +             %if &em_profitflag ne 0 %then %do;
201175    +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
201175   !+14.&EM_PROPERTY_SPLITPRECISION);
201176    +                if CATEGORY="&targetEvent" then do;
201177    +                 profitloss=ALTERNATIVE_PROFIT;
201178    +                end;
201179    +             %end;
201180    +             %if &em_lossflag ne 0 %then %do;
201181    +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
201181   !+14.&EM_PROPERTY_SPLITPRECISION);
201182    +                if CATEGORY="&targetEvent" then do;
201183    +                  profitloss=ALTERNATIVE_LOSS;
201184    +                end;
201185    +             %end;
201186    +            %end;
201187    +            output;
201188    +          end;
201189    +          else do;
201190    +            %if &validFlag eq N %then %do;
201191    +             %if &em_profitflag ne 0 %then %do;
201192    +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
201193    +             %end;
201194    +             %if &em_lossflag ne 0 %then %do;
201195    +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
201196    +             %end;
201197    +            %end;
201198    +            %else %do;
201199    +             %if &em_profitflag ne 0 %then %do;
201200    +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
201200   !+14.&EM_PROPERTY_SPLITPRECISION);
201201    +             %end;
201202    +             %if &em_lossflag ne 0 %then %do;
201203    +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
201203   !+14.&EM_PROPERTY_SPLITPRECISION);
201204    +             %end;
201205    +            %end;
201206    +          end;
201207    +        %end;
201208    +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
201209    +          if strip(CATEGORY) = "&targetevent" then do;
201210    +            %if &validFlag eq N %then %do;
201211    +             %if &em_profitflag ne 0 %then %do;
201212    +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
201213    +             %end;
201214    +             %if &em_lossflag ne 0 %then %do;
201215    +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
201216    +             %end;
201217    +             profitloss=statvalue;
201218    +            %end;
201219    +            %else %do;
201220    +             %if &em_profitflag ne 0 %then %do;
201221    +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
201221   !+14.&EM_PROPERTY_SPLITPRECISION);
201222    +                profitloss=ALTERNATIVE_PROFIT;
201223    +             %end;
201224    +             %if &em_lossflag ne 0 %then %do;
201225    +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
201226    +                profitloss=ALTERNATIVE_LOSS;
201227    +             %end;
201228    +            %end;
201229    +            output;
201230    +          end;
201231    +        %end;
201232    +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
201233    +          if strip(CATEGORY) = "&targetevent" then do;
201234    +            %if &validFlag eq N %then %do;
201235    +             profitloss=statvalue;
201236    +            %end;
201237    +            %else %do;
201238    +             %if &em_profitflag ne 0 %then %do;
201239    +                profitloss=ALTERNATIVE_PROFIT;
201240    +             %end;
201241    +             %if &em_lossflag ne 0 %then %do;
201242    +                profitloss=ALTERNATIVE_LOSS;
201243    +             %end;
201244    +            %end;
201245    +            output;
201246    +          end;
201247    +        %end;
201248    +      run;
201249    +    %end;
201251    +    data tempprob(keep= node probtext);
201252    +      length probtext $800;
201253    +      retain probtext;
201254    +      set tempprob ;
201255    +      by node;
201257    +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
201258    +      %let probtype = &EM_PROPERTY_TARGET;
201259    +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
201260    +        %let probtype = ALL;
201261    +      %end;
201263    +      %if "&probtype" eq "ALL" %then %do;
201264    +        if first.node then do;
201265    +          %if &validFlag eq N %then %do;
201266    +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
201267    +          %end;
201268    +          %else %do;
201269    +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
201270    +          %end;
201271    +        end;
201272    +        else if last.node then do;
201273    +          %if &validFlag eq N %then %do;
201274    +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
201275    +          %end;
201276    +          %else %do;
201277    +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
201278    +          %end;
201279    +          output;
201280    +        end;
201281    +        else do;
201282    +          %if &validFlag eq N %then %do;
201283    +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
201284    +          %end;
201285    +          %else %do;
201286    +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
201287    +          %end;
201288    +        end;
201289    +      %end;
201290    +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
201291    +        if strip(CATEGORY) = "&targetevent" then do;
201292    +          %if &validFlag eq N %then %do;
201293    +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
201294    +          %end;
201295    +          %else %do;
201296    +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
201297    +          %end;
201298    +          output;
201299    +        end;
201300    +      %end;
201301    +      %else %if "&probtype" eq "NONE" %then %do;
201302    +        if last.node then do;
201303    +          output;
201304    +        end;
201305    +      %end;
201306    +    run;
201307    +  %end;
201309    +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
201311    +  %let oldexists=0;
201312    +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
201313    +     data old_tree_plot;
201314    +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
201315    +        rename nodecolor=oldnodecolor;
201316    +     run;
201318    +     proc sort data=old_tree_plot;
201319    +        by node;
201320    +     run;
201322    +     %let oldexists=1;
201323    +  %end;
201325    +  data &EM_USER_TREE_PLOT;
201326    +    length textall $800;
201327    +    merge tempoutnodes temptargetused
201329    +    %if &em_intTarget eq Y %then %do;
201330    +      tempinterval
201331    +    %end;
201333    +    %if &em_classTarget eq Y %then %do;
201335    +      %if &validFlag eq N %then %do;
201336    +        tempn(rename=(statvalue=N))
201337    +      %end;
201338    +      %else %do;
201339    +        tempn
201340    +      %end;
201342    +      temppredict tempprob
201344    +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
201345    +        tempprofittext
201346    +      %end;
201347    +    %end;
201348    +    ;
201349    +    by node;
201351    +    /* build nodetext based on user selection */
201352    +    textall="";
201354    +    %if &em_intTarget eq Y %then %do;
201355    +    if tarlevel="INTERVAL" then do;
201356    +      /* Nodeid */
201357    +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
201358    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
201359    +      %end;
201361    +      /* Target identifier if multiple targets are used */
201362    +      %if "&multipleTar" eq "Y" %then %do;
201363    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
201364    +      %end;
201366    +      %if &validFlag eq Y %then %do;
201367    +         /* Column labels displayed in validflag eq Y only */
201368    +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
201369    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
201369   !+ noquote ))";
201370    +         %end;
201372    +         /* Average values */
201373    +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
201374    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
201375    +         %end;
201377    +         /* RASE */
201378    +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
201379    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
201380    +         %end;
201382    +         /* Count */
201383    +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
201384    +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
201385    +         %end;
201386    +      %end;
201387    +      %else %do;
201388    +         /* Average values */
201389    +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
201390    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
201391    +         %end;
201393    +         /* RASE */
201394    +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
201395    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
201396    +         %end;
201398    +         /* Count */
201399    +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
201400    +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
201401    +         %end;
201402    +      %end;
201404    +      /* nodecolor */
201405    +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
201406    +        nodecolor=PREDICTION;
201407    +      %end;
201408    +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
201409    +        nodecolor=RASE;
201410    +      %end;
201411    +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
201412    +        nodecolor=1;
201413    +      %end;
201415    +    end;
201416    +    %end;
201417    +    %if &em_classTarget eq Y %then %do;
201418    +    if tarlevel^="INTERVAL" then  do;
201420    +      /* Nodeid */
201421    +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
201422    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
201423    +      %end;
201424    +      /* Target identifier if multiple targets are used */
201425    +      %if "&multipleTar" eq "Y" %then %do;
201426    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
201427    +      %end;
201429    +      /* Predicted values */
201430    +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
201431    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
201432    +      %end;
201434    +      /* Column labels displayed in validflag eq Y only */
201435    +      %if "&ValidFlag" eq "Y" %then %do;
201436    +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
201437    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
201437   !+ noquote ))";
201438    +        %end;
201439    +      %end;
201441    +      /* Target Values */
201442    +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
201443    +        textall=strip(textall)||"0A"x||strip(probtext);
201444    +      %end;
201446    +      /* include profit or loss for all target levels */
201447    +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
201448    +        textall=strip(textall)||"0A"x||strip(profittext);
201449    +      %end;
201451    +      %if &validFlag eq N %then %do;
201452    +        /* Percent Correct */
201453    +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
201454    +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
201455    +        %end;
201457    +         /* Count */
201458    +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
201459    +          %if "&adjusted" eq "N" %then %do;
201460    +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
201461    +          %end;
201462    +          %else %do;
201463    +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
201464    +          %end;
201465    +         %end;
201466    +      %end;
201467    +      %else %do;
201468    +        /* Percent Correct */
201469    +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
201470    +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
201471    +        %end;
201473    +         /* Count */
201474    +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
201475    +          %if "&adjusted" eq "N" %then %do;
201476    +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
201477    +          %end;
201478    +          %else %do;
201479    +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
201480    +          %end;
201481    +         %end;
201482    +      %end;
201484    +      /* nodecolor */
201485    +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
201486    +       %if &multipleTar ne Y %then %do;
201487    +        nodecolor=&predTarget;
201488    +       %end;
201489    +       %else %do;
201490    +         nodecolor=percentcorrect;
201491    +       %end;
201492    +      %end;
201493    +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
201494    +        nodecolor=percentcorrect;
201495    +      %end;
201496    +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
201497    +        nodecolor=1;
201498    +      %end;
201499    +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
201500    +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
201501    +          nodecolor=percentcorrect;
201502    +        %end;
201503    +        %else %do;
201504    +          nodecolor=profitloss;
201505    +        %end;
201506    +      %end;
201508    +    end;
201509    +    %end;
201510    +    %if &em_intTarget eq Y %then %do;
201511    +     drop  PREDICTION  TARGET TARLEVEL
201512    +     %if &ValidFlag eq Y %then %do;
201513    +         VPREDICTION
201514    +     %end;
201515    +     ;
201516    +    %end;
201517    +    %if &em_classTarget eq Y %then %do;
201518    +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
201519    +     %if &ValidFlag eq Y %then %do;
201520    +         VSTATVALUE
201521    +     %end;
201522    +     ;
201523    +    %end;
201525    +  run;
201527    +  /* add leaf index information to plotds - based on primary target only*/
201528    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201529    +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
201530    +      set &EM_USER_OUTSTATS;
201531    +      if ((statname="PROBABILITY"
201532    +      %if &validexist %then %do;
201533    +       or statname="VALID: PROBABILITY"
201534    +      %end;
201535    +      ) AND (CATEGORY="&TARGETEVENT")
201536    +      %if "&multipleTar" eq "Y" %then %do;
201537    +        AND (Target="%EM_TARGET")
201538    +      %end;
201539    +      );
201540    +    run;
201542    +    %if &validexist %then %do;
201543    +      proc sort data=tempprob; by node; run;
201544    +      %let vpredTarget = V%substr(&predTarget, 2);
201545    +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
201546    +         by node;
201547    +         id statname;
201548    +      run;
201549    +    %end;
201550    +  %end;
201551    +  %else %do;
201552    +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
201553    +      set &EM_USER_OUTSTATS;
201554    +      if ((statname="PREDICTION"
201555    +      %if &validexist %then %do;
201556    +       or statname="VALID: PREDICTION"
201557    +      %end;
201558    +      )
201559    +      %if "&multipleTar" eq "Y" %then %do;
201560    +        AND (Target="%EM_TARGET")
201561    +      %end;
201562    +      );
201563    +    run;
201564    +    %if &validexist %then %do;
201565    +      proc sort data=tempprob; by node; run;
201566    +      %let vpredTarget = V%substr(&predTarget, 2);
201567    +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
201568    +         by node;
201569    +         id statname;
201570    +      run;
201571    +    %end;
201572    +  %end;
201574    +  proc sort data=tempprob; by node; run;
201575    +  data tempoutnodes;
201576    +    merge tempoutnodes tempprob;
201577    +    by node;
201578    +  run;
201580    +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
201581    +  data tempnodes;
201582    +    retain traintotal validtotal;
201583    +    set tempnodes(where=(leaf ne . ));
201584    +    tprob=round(&predTarget, .01);
201585    +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201586    +      percevent_train=round(tprob*100, .01);
201587    +    %end;
201588    +    %else %do;
201589    +      percevent_train=tprob;
201590    +    %end;
201592    +    perc_train=round((n/traintotal)*100, 0.01);
201593    +    /* leafwidth already has a *10 multiplier */
201594    +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
201596    +    %if &validexist %then %do;
201597    +      %let vpredTarget = V%substr(&predTarget,2);
201598    +      vprob=round(&vpredTarget, .01);
201599    +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201600    +        percevent_valid=round(vprob*100, .01);
201601    +      %end;
201602    +      %else %do;
201603    +        percevent_valid=vprob;
201604    +      %end;
201605    +      perc_valid=round((vn/validtotal)*100, .01);
201606    +    %end;
201608    +    index=_N_;
201609    +    keep node index tprob perc_train percevent_train
201610    +    %if &validexist %then %do;
201611    +        vprob percevent_valid perc_valid
201612    +    %end;
201613    +    ;
201614    +  run;
201615    +  proc sort data=tempnodes; by node; run;
201616    +  data &EM_USER_TREE_PLOT;
201617    +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
201618    +    by node;
201619    +    if missing(node) then delete;
201620    +    %if &oldexists %then %do;
201621    +      if missing(nodecolor) then nodecolor=oldnodecolor;
201622    +      drop oldnodecolor;
201623    +    %end;
201624    +    abovetext = compbl(abovetext);
201626    +    /* add variable labels */
201627    +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
201628    +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
201629    +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
201630    +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
201631    +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
201632    +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
201634    +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201635    +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
201636    +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
201637    +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
201638    +          %end;
201639    +          %else %do;
201640    +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
201641    +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
201642    +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
201643    +          %end;
201644    +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
201646    +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
201647    +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
201648    +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201649    +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
201650    +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
201651    +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
201652    +          %end;
201653    +          %else %do;
201654    +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
201655    +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
201656    +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
201657    +          %end;
201658    +    ;
201659    +  run;
201661    +  /* delete temporary tables */
201662    +  proc datasets lib=work nolist;
201663    +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
201664    +  run;
201666    +%mend em_tree_makePlotDs;
201670    +%macro em_tree_report;
201672    +   /* report properties */
201673    +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
201674    +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
201675    +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
201676    +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
201677    +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
201678    +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
201679    +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
201680    +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
201681    +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
201682    +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
201683    +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
201684    +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
201685    +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
201687    +   %let validexist=0;
201688    +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
201689    +     %let validexist=1;
201690    +   %end;
201692    +   /* determine if multiple targets will be processed */
201693    +   %let em_tree_multipleTargets=N;
201694    +   %let em_tree_numTarget=1;
201695    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
201696    +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
201697    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
201698    +         %let em_tree_multipleTargets=N;
201699    +      %end;
201700    +      %else %do;
201701    +        data _null_;
201702    +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
201703    +          if eof then
201704    +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
201705    +        run;
201707    +        %if &em_tree_numTarget gt 1 %then %do;
201708    +           %let em_tree_multipleTargets=Y;
201709    +        %end;
201710    +     %end;
201711    +   %end;
201713    +  %if "&em_tree_multipleTargets" eq "N" %then %do;
201715    +   /* variable importance */
201716    +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
201717    +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
201719    +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
201720    +     /* and the columns may not be generated                                                                                 */
201721    +     %let em_tree_cvexists=;
201722    +     %let em_tree_surrexists=.;
201723    +     data _null_;
201724    +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
201725    +       if eof then do ;
201726    +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
201727    +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
201728    +       end;
201729    +     run;
201731    +     data &EM_USER_OUTIMPORT;
201732    +         set &EM_USER_OUTIMPORT;
201733    +         /* format columns based on Precison value specified */
201734    +         format importance 15.&EM_PROPERTY_PRECISION
201735    +              %if &validexist %then %do;
201736    +                vimportance ratio 15.&EM_PROPERTY_PRECISION
201737    +              %end;
201738    +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
201739    +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
201740    +              %end;
201741    +         ;
201742    +     run;
201744    +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
201745    +     proc print data=&EM_USER_OUTIMPORT
201746    +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
201747    +          (where=((nrules>0) OR (nsurrogates>0)))
201748    +        %end;
201749    +        %else %do;
201750    +           (where=(nrules>0))
201751    +        %end;
201752    +        label noobs
201753    +        ;
201754    +     run;
201755    +     title10;
201757    +   %end;
201759    +   /* Sequence */
201760    +   %EM_GETNAME(key=OUTSEQ, type=DATA);
201761    +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
201762    +   data _null_ ;
201763    +      set &EM_USER_outseq (obs=2) end=eof ;
201764    +      if eof then do ;
201765    +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
201766    +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
201767    +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
201768    +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
201769    +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
201770    +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
201771    +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
201772    +      end;
201773    +    run;
201775    +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
201776    +      data &EM_USER_OUTSEQ;
201777    +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
201778    +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
201779    +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201780    +           _XMISC_=_VMISC_
201781    +        %end;
201782    +        %if "&em_tree_aprof" ne "."  %then %do;
201783    +           _XAPROF_=_VAPROF_
201784    +           _XPROF_ = _VPROF_
201785    +        %end;
201786    +        %if "&em_tree_aloss" ne "."  %then %do;
201787    +           _XALOSS_=_VALOSS_
201788    +        %end;
201789    +        %if "&EM_TREE_PRIOR" ne "." %then %do;
201790    +           _XPASE_ = _VPASE_
201791    +           _XPMISC_ = _VPMISC_
201792    +        %end;
201794    +        ));
201795    +     %end;
201796    +     %else %do;
201797    +        set &EM_USER_OUTSEQ;
201798    +     %end;
201800    +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
201801    +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201802    +            _MISC_   15.&EM_PROPERTY_PRECISION
201803    +         %end;
201804    +         %if "&EM_TREE_PRIOR" ne "." %then %do;
201805    +            _PASE_  15.&EM_PROPERTY_PRECISION
201806    +            _PMISC_ 15.&EM_PROPERTY_PRECISION
201807    +         %end;
201808    +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
201809    +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
201810    +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201811    +               _VMISC_ 15.&EM_PROPERTY_PRECISION
201812    +            %end;
201813    +            %if "&EM_TREE_PRIOR" ne "." %then %do;
201814    +              _VPASE_  15.&EM_PROPERTY_PRECISION
201815    +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
201816    +            %end;
201817    +         %end;
201818    +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
201819    +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
201820    +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201821    +               _VMISC_ 15.&EM_PROPERTY_PRECISION
201822    +            %end;
201823    +         %end;
201824    +         %if "&em_tree_seq" ne "." %then %do;
201825    +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
201826    +         %end;
201827    +         %if "&em_tree_vseq" ne "." %then %do;
201828    +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
201829    +         %end;
201830    +         %if "&em_tree_aprof" ne "." %then %do;
201831    +           _APROF_ 15.&EM_PROPERTY_PRECISION
201832    +           _PROF_ 15.&EM_PROPERTY_PRECISION
201833    +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
201834    +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
201835    +             _VPROF_ 15.&EM_PROPERTY_PRECISION
201836    +           %end;
201837    +         %end;
201838    +         %else %if "&em_tree_aloss" ne "." %then %do;
201839    +           _ALOSS_  15.&EM_PROPERTY_PRECISION
201840    +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
201841    +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
201842    +           %end;
201843    +         %end;
201844    +      ;
201845    +    run;
201846    +   %end;
201848    +   /* Observation Based Importance */
201849    +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
201851    +      /* need to check for 0 obs */
201852    +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
201853    +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
201854    +      %let rc=%sysfunc(close(&dsid));
201856    +      %if &onobs %then %do;
201857    +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
201858    +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
201860    +         data &EM_USER_OUTOBSIMP;
201861    +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
201862    +           if _a;
201863    +           by _INPUT1_;
201864    +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
201865    +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
201866    +                     _MISC_ 15.&EM_PROPERTY_PRECISION
201867    +                   %end;
201868    +                   ;
201869    +         run;
201870    +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
201871    +      %end;
201872    +   %end;
201874    +  %end;
201876    +  /* create dataset to support tree diagram and icicle plot */
201877    +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
201878    +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
201880    +  /* display tree diagram */
201881    +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
201882    +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
201884    +  /* display icicle diagram */
201885    +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
201886    +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
201888    +  /* Leaf Statistics Plot */
201889    +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
201891    +  /* print leaf information to output window */
201892    +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
201894    +     proc sort data=&EM_USER_TREE_PLOT out=t;
201895    +       by descending N;
201896    +     run;
201898    +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
201899    +     %local vn;
201900    +     data _null_;
201901    +       set t (obs=2) end=eof;
201902    +       if eof then do;
201903    +         call symput("vn", strip(put(vn, best.)));
201904    +       end;
201905    +     run;
201907    +     data t;
201908    +       set t;
201909    +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
201910    +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
201911    +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
201912    +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
201913    +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
201914    +       %end;
201915    +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
201916    +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
201917    +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
201918    +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
201919    +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
201920    +          %end;
201921    +       %end;
201922    +       ;
201923    +     run;
201925    +     /* determine if rase is found in t */
201926    +    %let dsid=%sysfunc(open(t,i));
201927    +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
201928    +    %let rc=%sysfunc(close(&dsid));
201930    +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
201931    +     proc print data=t noobs label;
201932    +       where tprob ne .;
201933    +       var node depth N tprob
201934    +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
201935    +         %if "&vn" ne "." %then %do;
201936    +           VN
201937    +         %end;
201938    +         vprob
201939    +       %end;
201940    +       %if &raseexists %then %do;
201941    +            RASE
201942    +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
201943    +              VRASE
201944    +            %end;
201945    +       %end;
201946    +       ;
201947    +     run;
201948    +     title10;
201949    +  %end;
201951    +  /* create plots that are done during training of node */
201952    +  /* display iterative plot, including reference line */
201953    +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
201954    +   /* %if &nleaves eq  %then %do; */
201955    +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
201956    +      data _null_;
201957    +        set &EM_USER_OUTTOPOLOGY end=eof;
201958    +        if eof then do;
201959    +          call symput('nleaves', LEAF);
201960    +        end;
201961    +      run;
201962    +   /* %end; */
201964    +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
201965    +    /*%EM_REPORT(view=1, Y=_ASE_); */
201966    +  %end;
201968    +  /* display leaf statistics */
201969    +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
201971    +  /* stats by node if multiple targets = Y */
201972    +  %EM_GETNAME(key=OUTSTATS, type=DATA);
201973    +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
201974    +    data &EM_USER_OUTSTATS;
201975    +      set &EM_USER_OUTSTATS;
201977    +     * if STATNAME="TARGET" then delete;
201978    +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
201979    +      drop leaf;
201980    +    run;
201981    +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
201983    +  %end;
201984    +  %else %do;
201985    +    /* add outstats and outdescribe to spk but not results */
201986    +    %EM_REPORT(viewtype=, key=OUTSTATS);
201987    +  %end;
201989    +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree2_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS1.Tree2_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree2_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Variable Importance";
MPRINT(EM_TREE_REPORT):   proc print data=EMWS1.Tree2_OUTIMPORT (where=(nrules>0)) label noobs ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 116.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_ ;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree2_OUTSEQ (obs=2) end=eof ;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vase" , strip(put(_VASE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_seq" , strip(put(_SEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vseq" , strip(put(_VSEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_prior" , strip(put(_PASE_, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS1.Tree2_OUTSEQ;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree2_OUTSEQ;
MPRINT(EM_TREE_REPORT):   format _ASE_ _ASSESS_ _MAX_ _SSE_ _RASE_ 15.4
MPRINT(EM_TREE_REPORT):   _MISC_ 15.4 _VASE_ _VASSESS_ _VMAX_ _VSSE_ _VRASE_ 15.4
MPRINT(EM_TREE_REPORT):   _VMISC_ 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 251 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 251 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="PREDICTED" AND LEVEL="1"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predTarget', strip(VARIABLE));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predLvl', strip(LEVEL));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree2_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 37 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 37 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree2_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 37 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 37 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 37 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 37 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   merge belowtext belowtext2(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then belowtext=belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 37 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree2_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 116 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 116 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 116 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 116 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set abovetext(rename=(node=parent));
MPRINT(EM_TREE_MAKEPLOTDS):   by parent numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   retain abovetext tempstring flag branch origval origchar ;
MPRINT(EM_TREE_MAKEPLOTDS):   length abovetext $256;
MPRINT(EM_TREE_MAKEPLOTDS):   length tempstring origchar $64;
MPRINT(EM_TREE_MAKEPLOTDS):   if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent AND last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value,0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 0;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag=1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   keep parent branch abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 116 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 132 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree2_OUTRULES;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_TREE_MAKEPLOTDS):   rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 3059 observations read from the data set EMWS1.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 37 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 132 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 132 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 37 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 37 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS1.Tree2_OUTNODES out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 133 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 133 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   length traintotal validtotal 8;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ^MISSING(abovetext) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= strip(abovetext)||" Or Missing";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = " Missing Values Only";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if MISSING(abovetext) then abovetext="Non-Missing Values";
MPRINT(EM_TREE_MAKEPLOTDS):   if node=1 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   traintotal = N;
MPRINT(EM_TREE_MAKEPLOTDS):   validtotal=VN;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop role rank stat misschar belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 132 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 133 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 37 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 133 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 133 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 133 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 37 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 133 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 37 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 133 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_ ;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree2_OUTSTATS(where=(STATNAME="NPRIORS")) end=eof ;
MPRINT(EM_TREE_MAKEPLOTDS):   if eof then do ;
MPRINT(EM_TREE_MAKEPLOTDS):   call symput("npriors" , strip(put(_N_,best.))) ;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptarmeta;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree2_VariableSet(where=(ROLE='TARGET' AND LEVEL^='ORDINAL' AND USE in ('D', 'Y') ));
MPRINT(EM_TREE_MAKEPLOTDS):   length TARGET $32;
MPRINT(EM_TREE_MAKEPLOTDS):   Target=name;
MPRINT(EM_TREE_MAKEPLOTDS):   keep target level;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree2_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   length target $32 tarlevel $10;
MPRINT(EM_TREE_MAKEPLOTDS):   target=
MPRINT(EM_TREE_MAKEPLOTDS):  "Attrition_Flag";
MPRINT(EM_TREE_MAKEPLOTDS):   tarlevel=
MPRINT(EM_TREE_MAKEPLOTDS):  "BINARY";
MPRINT(EM_TREE_MAKEPLOTDS):   keep node target tarlevel;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 931 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 931 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused nodupkey;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 931 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 798 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 133 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS1.Tree2_OUTSTATS out=tempoutstats;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 931 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 931 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempinterval tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutstats temptargetused( rename=(target=targetused));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel="INTERVAL" then output tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   else output tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 931 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 133 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 931 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_intNobs from tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_classNobs from tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 931 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 931 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET ) tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY )
temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
MPRINT(EM_TREE_MAKEPLOTDS):   set tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="N") OR (statname="VALID: N")) then output tempn;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PREDICTION" then output temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PROBABILITY" then output tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="VALID: PROBABILITY" then output tempvprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 931 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 266 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 133 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 266 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 266 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_profitflag from tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_lossflag from temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempn out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 266 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 133 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob tempvprob(rename=(statvalue=vstatvalue));
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 266 observations read from the data set WORK.TEMPPROB.
NOTE: There were 266 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 266 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob temppredict(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   percentCorrect = statvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   vpercentCorrect= vstatvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   label percentCorrect= "Percent Correct" vpercentCorrect= "Valid Percent Correct" ;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(percentCorrect) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   drop target;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 266 observations read from the data set WORK.TEMPPROB.
NOTE: There were 133 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 133 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep= node probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   length probtext $800;
MPRINT(EM_TREE_MAKEPLOTDS):   retain probtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 266 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 133 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 133 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 133 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS1.Tree2_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   length textall $800;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes temptargetused tempn temppredict tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   textall="";
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel^="INTERVAL" then do;
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Node Id: "||"09"x||strip(Node);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Statistic "||"09"x||"Train" ||"09"x|| "Validation";
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||strip(probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||" Count: "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
MPRINT(EM_TREE_MAKEPLOTDS):   nodecolor=percentcorrect;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop CATEGORY PROBTEXT TARGET TARLEVEL STATVALUE VSTATVALUE ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 133 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 133 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 133 observations read from the data set WORK.TEMPN.
NOTE: There were 133 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 133 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 133 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep=node statname statvalue rename=(statvalue=P_Attrition_Flag1));
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree2_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="PROBABILITY" or statname="VALID: PROBABILITY" ) AND (CATEGORY="1") );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 931 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 266 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 266 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 266 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=P_Attrition_Flag1 VALID__PROBABILITY=V_Attrition_Flag1));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 266 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 133 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 133 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 133 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 133 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 133 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 133 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by descending P_Attrition_Flag1;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 133 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 133 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempnodes(where=(leaf ne . ));
MPRINT(EM_TREE_MAKEPLOTDS):   tprob=round(P_Attrition_Flag1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_train=round(tprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_train=round((n/traintotal)*100, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   vprob=round(V_Attrition_Flag1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_valid=round(vprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_valid=round((vn/validtotal)*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   index=_N_;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node index tprob perc_train percevent_train vprob percevent_valid perc_valid ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      8 at 1289:94    8 at 1293:102   8 at 1293:113
NOTE: There were 96 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 96 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 96 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 96 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS1.Tree2_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   merge EMWS1.Tree2_TREE_PLOT tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(node) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = compbl(abovetext);
MPRINT(EM_TREE_MAKEPLOTDS):   label textall = "All Text" parent = "Parent Id" node = "Node Id" abovetext = "Above Text" traintotal = "Train Total" nodecolor =
MPRINT(EM_TREE_MAKEPLOTDS):   "Node Color" tprob = "Training Percent 1" percevent_train = "Event Percentage" perc_train = "Percent Cases" index = "Index" validtotal = "Valid Total" VN =
MPRINT(EM_TREE_MAKEPLOTDS):   "Valid: Number of Observations" vprob = "Validation Percent 1" perc_valid = "Valid: Percent Cases" percevent_valid = "Valid: Event Percentage" ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 133 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: There were 96 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 133 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEPLOTDS):   delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
MPRINT(EM_TREE_REPORT):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DTree";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "TREE";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "ABOVETEXT";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "BELOWTEXT";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "LINKWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.82037193506042;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Icicle";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ICICLE";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20870134849506;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "AREABAR";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "VARWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "PERCEVENT_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "PERC_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04556052947675;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   proc sort data=EMWS1.Tree2_TREE_PLOT out=t;
MPRINT(EM_TREE_REPORT):   by descending N;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 133 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 133 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set t (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput("vn", strip(put(vn, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   data t;
MPRINT(EM_TREE_REPORT):   set t;
MPRINT(EM_TREE_REPORT):   label N= "Training Observations" DEPTH=
MPRINT(EM_TREE_REPORT):   "Depth" VN=
MPRINT(EM_TREE_REPORT):   "Validation Observations" ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 133 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 133 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Tree Leaf Report";
MPRINT(EM_TREE_REPORT):   proc print data=t noobs label;
MPRINT(EM_TREE_REPORT):   where tprob ne .;
MPRINT(EM_TREE_REPORT):   var node depth N tprob VN vprob ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 96 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 117.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree2_OUTTOPOLOGY end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput('nleaves', LEAF);
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 133 observations read from the data set EMWS1.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSEQ";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "ITERATIONPLOT";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SUBTREE";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_NW_";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "96";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83297609017834;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "RESPONSEBAR";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "INDEX ne .";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "LEAFSTATS";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "INDEX";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "tprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "vprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSTATS";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.22295308170046;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Tree2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
201990
201991     *------------------------------------------------------------*;
201992     * End REPORT: Tree2;
201993     *------------------------------------------------------------*;
 
201994     /* Reset EM Options */
201995     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
201996     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
201997     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
201998     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
201999     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
202000     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
202001     proc sort data=EMWS1.Part2_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Part2_CMeta_TRAIN out=WORK.SUBSETINMETA;
202002     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
202003     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.PART2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
202004     proc sort data=EMWS1.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
202005     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
202006     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
202007     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
202008     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
202009     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
202010     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
202011     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
202012     set EMWS1.Tree2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_CMeta_TRAIN;
202013     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
202014     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
202015     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
202016     set EMWS1.Tree2_TRAIN(keep=
202017     F_Attrition_Flag
202018     I_Attrition_Flag
202019     P_Attrition_Flag0
202020     P_Attrition_Flag1
202021     Q_Attrition_Flag0
202022     Q_Attrition_Flag1
202023     R_Attrition_Flag0
202024     R_Attrition_Flag1
202025     U_Attrition_Flag
202026     V_Attrition_Flag0
202027     V_Attrition_Flag1
202028     _WARN_
202029     Attrition_Flag
202030     );
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_TRAIN(keep= F_Attrition_Flag I_Attrition_Flag P_Attrition_Flag0 P_Attrition_Flag1 Q_Attrition_Flag0 Q_Attrition_Flag1 R_Attrition_Flag0 R_Attrition_Flag1 U_Attrition_Flag V_Attrition_Flag0 V_Attrition_Flag1 _WARN_
Attrition_Flag );
202031     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7088 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Attrition_Flag*F_Attrition_Flag / out = WORK.Tree2_1VM7YE6 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree2_1VM7YE6;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree2_1VM7YE6(rename=(F_Attrition_Flag=FROM I_Attrition_Flag=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "Attrition_Flag";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree2_1VM7YE6;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree2_1VM7YE6;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Attrition_Flag ;
 
MPRINT(EM_ASSESS):   VAR P_Attrition_Flag1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Attrition_Flag1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Attrition_Flag P_Attrition_Flag1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Attrition_Flag ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Attrition_Flag1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Attrition_Flag1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 -
EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1606941309 _NEVENTS 1139 _NNONEVENTS 5949 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 7088));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Attrition_Flag1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Attrition_Flag1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Attrition_Flag1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Attrition_Flag1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 7088 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (7088/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 7088)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 7088/20) ) / ( AVGNUMRESP / (7088/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 7088 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 7088 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 7088/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 7088/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
206312     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
206313     set EMWS1.Tree2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_CMeta_TRAIN;
206314     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
206314   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
206315     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
206316     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
206317     set EMWS1.Tree2_VALIDATE(keep=
206318     F_Attrition_Flag
206319     I_Attrition_Flag
The SAS System
 
206320     P_Attrition_Flag0
206321     P_Attrition_Flag1
206322     Q_Attrition_Flag0
206323     Q_Attrition_Flag1
206324     R_Attrition_Flag0
206325     R_Attrition_Flag1
206326     U_Attrition_Flag
206327     V_Attrition_Flag0
206328     V_Attrition_Flag1
206329     _WARN_
206330     Attrition_Flag
206331     );
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_VALIDATE(keep= F_Attrition_Flag I_Attrition_Flag
P_Attrition_Flag0 P_Attrition_Flag1 Q_Attrition_Flag0 Q_Attrition_Flag1 R_Attrition_Flag0
R_Attrition_Flag1 U_Attrition_Flag V_Attrition_Flag0 V_Attrition_Flag1 _WARN_ Attrition_Flag );
206332     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2025 observations read from the data set EMWS1.PART2_VALIDATE.
NOTE: There were 2025 observations read from the data set EMWS1.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2025 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Attrition_Flag*F_Attrition_Flag / out = WORK.Tree2_3CSD92A nocol
norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree2_3CSD92A;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree2_3CSD92A(rename=(F_Attrition_Flag=FROM
I_Attrition_Flag=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "Attrition_Flag";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMCLASSIFICATION WORK.Tree2_3CSD92A;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree2_3CSD92A;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Attrition_Flag ;
 
MPRINT(EM_ASSESS):   VAR P_Attrition_Flag1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Attrition_Flag1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Attrition_Flag P_Attrition_Flag1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Attrition_Flag ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Attrition_Flag1 NTARGET _tmpfreqvar_
WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Attrition_Flag1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1604938272 _NEVENTS
325 _NNONEVENTS 1700 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2025));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Attrition_Flag1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Attrition_Flag1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Attrition_Flag1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Attrition_Flag1 *
_FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2025 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(2025/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2025)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2025/20) ) / (
AVGNUMRESP / (2025/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2025 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2025 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2025/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 2025/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
210622     %let _cn = %sysfunc(getoption(CENTER));
210623     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
210624     proc print data=EMWS1.Tree2_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree2_EMREPORTFIT noobs label;
210625     var STAT LABEL TRAIN
210626     VALIDATE
210627     TEST
210628     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
210629     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
210630     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
210631     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
210632     run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 118.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
210633     title10;
MPRINT(EM_DIAGRAM):   title10;
210634     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
210635     proc sort data=EMWS1.Tree2_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree2_EMCLASSIFICATION nothreads;
210636     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
210637     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
210638     %let _cn = %sysfunc(getoption(CENTER));
210639     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
210640     proc print data=EMWS1.Tree2_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree2_EMCLASSIFICATION noobs label;
210641     var from into pct_row pct_col count percent
210642     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
210643     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
210644     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
210645     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
210646     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
210647     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
210648     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
210649     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
210650     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
210651     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
210652     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
210653     run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 119.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
210654     title9;
MPRINT(EM_DIAGRAM):   title9;
210655     title10;
MPRINT(EM_DIAGRAM):   title10;
210656     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
210657     %let _cn = %sysfunc(getoption(CENTER));
210658     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
210659     data EMWS1.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree2_EMEVENTREPORT;
210660     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
210660   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
210661     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
210661   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
210661   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
210661   ! FALSEEVENT
210662     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
210662   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
210662   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
210663        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
210664     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
210665     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
210666     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
210667     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
210668     set EMWS1.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree2_EMEVENTREPORT;
210669     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
210670     proc print data=EMWS1.Tree2_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree2_EMEVENTREPORT noobs label;
210671     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
210672     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
210673     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
210674     run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 120.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
210675     title10;
MPRINT(EM_DIAGRAM):   title10;
210676     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
210677     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
210678     modify Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
210679     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
210680     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
210680   ! ;
MPRINT(EM_DIAGRAM):   run;
210681     run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMRANK.DATA.
210682     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
210683     %let _cn = %sysfunc(getoption(CENTER));
210684     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
210685     proc print data=EMWS1.Tree2_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree2_EMRANK label noobs;
210686     var
210687     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
210688     by
210689     notsorted DATAROLE
210690     notsorted TARGET
210691     notsorted TARGETLABEL
210692     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
210693     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
210694     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
210695     run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 121.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
210696     title10;
MPRINT(EM_DIAGRAM):   title10;
210697     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
210698     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
210699     modify Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
210700     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
210700   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
210701     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
210701   ! ;
MPRINT(EM_DIAGRAM):   run;
210702     run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMSCOREDIST.DATA.
210703     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree2_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "Attrition_Flag" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
