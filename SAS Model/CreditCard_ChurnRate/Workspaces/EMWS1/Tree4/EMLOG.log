*------------------------------------------------------------*
User:                Kevin
Date:                April 09, 2022
Time:                15:11:30
Site:                70135990
Platform:            X64_10HOME
Maintenance Release: 9.04.01M4P110916
EM Version:          14.2
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:11:18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                April 09, 2022
Time:                15:11:18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2HBY2PC
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2HBY2PC new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:11:18" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Kevin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70135990";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M4P110916";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.2";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMTRAIN.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMSCORE.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMREPORT.log" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMOUTPUT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:11:18" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Kevin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMTRAIN.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMSCORE.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMREPORT.out" encoding="UTF-8"
NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMRUNSTATUS.xml' encoding="UTF-8"
NOBOM;
242066     proc freq data=EMWS1.Tree4_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Tree4_VariableSet noprint;
242067     table ROLE*LEVEL/out=WORK.Tree4META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree4META;
242068     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE4_VARIABLESET.
NOTE: The data set WORK.TREE4META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
242069     proc print data=WORK.Tree4META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree4META label noobs;
242070     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
242071     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
242071   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
242071   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
242072     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
242073     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
242074     run;
 
NOTE: There were 5 observations read from the data set WORK.TREE4META.
NOTE: The PROCEDURE PRINT printed page 133.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
242075     title10;
MPRINT(EM_DIAGRAM):   title10;
242076     %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN EMWS1 Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN
EMWS1.Part2_TRAIN EMWS1.Part2_TRAIN EMWS1 Part2_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Part2_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class Attrition_Flag(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Attrition_Flag";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=Attrition_Flag));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="Attrition_Flag";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_Attrition_Flag_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by Attrition_Flag;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by Attrition_Flag;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
242105     data WORK.Tree4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
242106     length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
242107     label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
242107   ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
242107   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
242108        "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
242108   ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
242108   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
242109     set EMWS1.IDS_ATTRITION_FLAG_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_ATTRITION_FLAG_DM( where=(_TYPE_="TARGET"));
242110     NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
242111     select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
242112     when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
242113     when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
242114     when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
242115     when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
242116     otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
242117     end;
MPRINT(EM_DIAGRAM):   end;
242118     output;
MPRINT(EM_DIAGRAM):   output;
242119     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE4_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
242120     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
242121     proc print data=WORK.Tree4_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree4_EVENT noobs label;
242122     var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
242123     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
242124     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
242125     run;
 
NOTE: There were 1 observations read from the data set WORK.TREE4_EVENT.
NOTE: The PROCEDURE PRINT printed page 134.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
242126     title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "Attrition_Flag"."
242127     proc print data = EMWS1.Ids_Attrition_Flag_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_Attrition_Flag_DM noobs label;
242128     var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
242129     where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
242130     label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
242130   ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
242130   ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
242131     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
242132     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
242133     run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 135.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
242134     title10;
MPRINT(EM_DIAGRAM):   title10;
242135     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'CreditCard_ChurnRate';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'CreditCard_ChurnRate';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree4: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.Attrition_Flag;
MPRINT(EM_DECDATA):   length Attrition_Flag $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8
DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   Attrition_Flag="1";
MPRINT(EM_DECDATA):   COUNT=1627;
MPRINT(EM_DECDATA):   DATAPRIOR=0.16065962279055;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.16065962279055;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   Attrition_Flag="0";
MPRINT(EM_DECDATA):   COUNT=8500;
MPRINT(EM_DECDATA):   DATAPRIOR=0.83934037720944;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.83934037720944;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify Attrition_Flag(type=PROFIT label= Attrition_Flag);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Attrition_Flag";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Attrition_Flag_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Attrition_Flag_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="Attrition_Flag";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS1.Ids_Attrition_Flag_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS1.Ids_Attrition_Flag_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
242675     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
242676     * Tree4: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree4: Generation of macros and macro variables;
242677     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
242678     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
242679     %let EMEXCEPTIONSTRING=;
242680     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
242681     * TRAIN: Tree4;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree4;
242682     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
242683     %let EM_ACTION = TRAIN;
242684     %let syscc = 0;
242685     %macro main;
242686
242687       %if %upcase(&EM_ACTION) = CREATE %then %do;
242688         filename temp catalog 'sashelp.emmodl.tree_create.source';
242689         %include temp;
242690         filename temp;
242691
242692         %em_tree_create;
242693       %end;
242694
242695        %else
242696        %if %upcase(&EM_ACTION) = TRAIN %then %do;
242697
242698            filename temp catalog 'sashelp.emmodl.tree_train.source';
242699            %include temp;
242700            filename temp;
242701            %em_tree_train;
242702        %end;
242703
242704       %else
242705       %if %upcase(&EM_ACTION) = SCORE %then %do;
242706         filename temp catalog 'sashelp.emmodl.tree_score.source';
242707         %include temp;
242708         filename temp;
242709
242710         %em_tree_score;
242711
242712       %end;
242713
242714       %else
242715       %if %upcase(&EM_ACTION) = REPORT %then %do;
242716
242717            filename temp catalog 'sashelp.emmodl.tree_report.source';
242718            %include temp;
242719            filename temp;
242720
242721            %em_tree_report;
242722        %end;
242723
242724       %else
242725       %if %upcase(&EM_ACTION) = OPENINT %then %do;
242726
242727            filename temp catalog 'sashelp.emmodl.tree_actions.source';
242728            %include temp;
242729            filename temp;
242730            %EM_TREE_OPENTREEVIEWER;
242731
242732        %end;
242733
242734       %else
242735       %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
242736
242737            filename temp catalog 'sashelp.emmodl.tree_actions.source';
242738            %include temp;
242739            filename temp;
242740            %EM_TREE_CLOSETREEVIEWER;
242741
242742        %end;
242743
242744
242745        %doendm:
242746     %mend main;
242747
242748     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
242750    +%macro em_tree_train;
242752    +   %if &EM_IMPORT_DATA eq %then %do;
242753    +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
242754    +       %put &em_codebar;
242755    +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note,
242755   !+NOQUOTE));
242756    +       %put &errormsg;
242757    +       %put &em_codebar;
242758    +       %goto doendm;
242759    +   %end;
242760    +   %else
242761    +       %let EMEXCEPTIONSTRING =;
242763    +   %if  &EM_NUM_TARGET lt 1 %then %do;
242764    +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
242765    +        %put &em_codebar;
242766    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err,
242766   !+NOQUOTE));
242767    +        %put &errormsg;
242768    +        %put &em_codebar;
242769    +        %goto doendm;
242770    +   %end;
242772    +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and
242772   !+(&EM_NUM_ORDINAL_INPUT < 1)
242773    +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and
242773   !+(&EM_NUM_BINARY_REJECTED <1)
242774    +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then
242774   !+%do;
242775    +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
242776    +        %put &em_codebar;
242777    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE))
242777   !+;
242778    +        %put &errormsg;
242779    +        %put &em_codebar;
242780    +        %goto doendm;
242781    +   %end;
242783    +   /* Initialize property macro variables */
242784    +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
242785    +   %include temp;
242786    +   filename temp;
242788    +   %EM_SetProperties;
242790    +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
242791    +   %EM_GETNAME(key=EMTREE, type=DATA);
242792    +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
242793    +     /* if import eq Y and no importtable defined, throw an exception */
242794    +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
242795    +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
242796    +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR ,
242796   !+NOQUOTE));
242797    +         %put &em_codebar;
242798    +         %put &errmsg;
242799    +         %put &em_codebar;
242800    +         %goto doendm;
242801    +      %end;
242802    +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
242803    +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
242804    +         %put &em_codebar;
242805    +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
242805   !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
242806    +         %put &errormsg;
242807    +         %put &em_codebar;
242808    +         %goto doendm;
242809    +      %end;
242810    +      %else %do;
242811    +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
242812    +         %let varnumID = %sysfunc(varnum(&dsid,ID));
242813    +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
242814    +         %let varnumX = %sysfunc(varnum(&dsid,X));
242815    +         %let varnumY = %sysfunc(varnum(&dsid,Y));
242816    +         %let dsid = %sysfunc(close(&dsid));
242817    +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
242818    +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET
242818   !+;
242819    +            %put &em_codebar;
242820    +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
242820   !+emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
242821    +            %put &errormsg;
242822    +            %put &em_codebar;
242823    +            %goto doendm;
242824    +         %end;
242825    +      %end;
242826    +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and
242826   !+(%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then
242826   !+%do;
242827    +         proc delete data=&EM_USER_EMTREE;
242828    +         run;
242829    +      %end;
242830    +   %end;
242831    +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or
242831   !+%sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
242832    +      proc delete data=&EM_USER_EMTREE;
242833    +      run;
242834    +   %end;
242836    +   /* load tree macros */
242837    +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
242838    +   %include temp;
242839    +   filename temp;
242841    +   /* data sets */
242842    +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
242843    +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
242844    +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
242846    +   /* files */
242847    +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
242849    +   /* check actual num of target levels */
242850    +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
242851    +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
242852    +                              nLevel=_nTargetLevel );
242853    +      %if &_nTargetLevel  > 2 %then %do;
242854    +        %let EMEXCEPTIONSTRING =
242854   !+exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
242855    +        %put &em_codebar;
242856    +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel,
242856   !+NOQUOTE));
242857    +        %put &errormsg;
242858    +        %put &em_codebar;
242859    +        %goto doendm;
242860    +      %end;
242861    +   %end;
242863    +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
242864    +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
242865    +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
242866    +        %let costflag=0;
242867    +        data _null_;
242868    +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND
242868   !+^missing(COST) )) end=eof;
242869    +          if eof then call symput("costflag", _N_);
242870    +        run;
242871    +        %if &costflag gt 0 %then %do;
242872    +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
242873    +          %put &em_codebar;
242874    +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
242874   !+costnotvalidwithusedecisions_note_err, NOQUOTE));
242875    +          %put &errormsg;
242876    +          %put &em_codebar;
242877    +          %goto doendm;
242878    +       %end;
242879    +     %end;
242880    +   %end;
242882    +   /* determine if multiple targets will be processed */
242883    +   %let em_tree_multipleTargets=N;
242884    +   %let em_tree_numTarget = 1;
242885    +   %let em_tree_targetVars=;
242887    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
242888    +      /* determine if there are any ordinal target variables - if so, multiple
242888   !+targets are not supported */
242889    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
242890    +         %let em_tree_multipleTargets=N;
242891    +      %end;
242892    +      %else %do;
242893    +         /* create macro array of targets  */
242894    +         data _null_;
242895    +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'))
242895   !+end=eof;
242896    +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
242897    +           if eof then
242898    +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
242899    +        run;
242901    +        %if &em_tree_numTarget gt 1 %then %do;
242902    +           %let em_tree_multipleTargets=Y;
242903    +        %end;
242904    +      %end;
242905    +   %end;
242907    +   /* create view of only necessary variable for performance reasons */
242908    +   %let tempData = &EM_LIB..em_&EM_NODEID;
242909    +   data &tempData / view=&tempData;
242910    +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
242911    +     %if "&em_tree_multipleTargets" eq "N" %then %do;
242912    +       %EM_TARGET
242913    +     %end;
242914    +     %else %do;
242915    +       %if &em_tree_numTarget ne 0 %then %do;
242916    +         %do i=1 %to &em_tree_numTarget;
242917    +            &&em_tree_targetVars&i
242918    +         %end;
242919    +       %end;
242920    +     %end;
242921    +     );
242922    +   run;
242924    +   /* run Tree procedure */
242925    +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets)
242925   !+;
242927    +   /* Check return code and throw exception if error is detected */
242928    +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
242929    +   %if &syserr %then %do;
242930    +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
242931    +     %goto doendm;
242932    +   %end;
242934    +   /* add decision score code if multiple targets are processed */
242935    +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
242936    +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N)
242936   !+;
242937    +   %end;
242939    +   /* create outfit dataset if multiple score statements have been executed */
242940    +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
242942    +   /* create English Rules */
242943    +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
242944    +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
242945    +       %em_tree_makeEnglishRules;
242947    +       /* English Rules */
242948    +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL,
242948   !+description=ENGLISHRULES, autodisplay=N);
242950    +     %end;
242951    +   filename x;
242953    +   %doendm:
242954    +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
242955    +%macro EM_SetProperties;
242957    +   /* train properties */
242958    +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
242959    +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
242960    +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
242961    +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
242962    +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ,
242962   !+global=Y);
242963    +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
242964    +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
242965    +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
242966    +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
242967    +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
242968    +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
242969    +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
242970    +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
242971    +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
242972    +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
242973    +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
242974    +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH,
242974   !+global=Y);
242975    +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
242976    +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT,
242976   !+global=Y);
242977    +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
242978    +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS,
242978   !+global=Y);
242979    +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
242980    +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
242981    +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
242982    +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
242983    +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
242984    +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
242985    +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
242986    +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
242987    +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
242988    +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
242989    +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
242990    +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
242991    +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
242992    +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
242993    +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
242994    +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
242995    +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
242996    +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
242997    +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
242998    +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
243000    +   /* properties for interactive sample */
243001    +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
243002    +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
243003    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
243004    +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
243006    +   /* report properties */
243007    +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
243008    +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
243009    +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN,
243009   !+global=Y);
243010    +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
243011    +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
243012    +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
243013    +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
243014    +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
243015    +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
243016    +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
243017    +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
243018    +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
243019    +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
243021    +   /* score properties */
243022    +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
243023    +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
243025    +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS1.Tree4_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: Deleting EMWS1.TREE4_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
243027    +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
243028    +  %global &nLevel;
243029    +  proc dmdb batch data=&indata
243030    +    classout=_tmp_dmdbout;
243031    +    class &target;
243032    +  run;
243033    +  data _tmp_dmdbout;
243034    +    set _tmp_dmdbout;
243035    +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
243036    +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
243037    +  run;
243038    +  data _null_;
243039    +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
243040    +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
243041    +    %let dsid = %sysfunc(close(&dsid));
243042    +     call symput("&nLevel", put(&_obs, Best12.));
243043    +  run;
243045    +  proc datasets lib=work nolist;
243046    +     delete _tmp_dmdbout;
243047    +  run;
243048    +  quit;
243049    +%Mend EM_CheckBinaryTargetLevel;
243052    +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
243054    +  /* determine the number of obs in training data */
243055    +  proc sql;
243056    +    reset noprint;
243057    +    select count(*) into :em_nobs from &indata;
243058    +  quit;
243060    +  /* determine the number of input variables */
243061    +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +
243061   !+&EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
243062    +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED +
243062   !+&EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
243064    +  /* retrieve targetEvent from decmeta */
243065    +  %let targetEvent=;
243066    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
243067    +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
243068    +      data _null_;
243069    +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
243070    +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
243071    +      run;
243072    +    %end;
243073    +  %end;
243075    +  /* create targetTable if multipleTar eq Y */
243076    +  data temptarget;
243077    +    set &EM_DATA_VARIABLESET;
243078    +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
243079    +  run;
243081    + /* data sets */
243082    + %EM_GETNAME(key=OUTSTATS,      type=DATA);
243083    + %EM_GETNAME(key=EMTREE,        type=DATA);
243084    + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
243085    + %EM_GETNAME(key=OUTSEQ,        type=DATA);
243086    + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
243087    + %EM_GETNAME(key=OUTNODES,      type=DATA);
243088    + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
243089    + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
243090    + %EM_GETNAME(key=OUTPATH,       type=DATA);
243091    + %EM_GETNAME(key=OUTRULES,      type=DATA);
243093    + /* files */
243094    + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
243095    + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
243097    + /* turn on pmml if requested */
243098    + %let nnpmml=0;
243099    + %if %symexist(EM_PMML) %then %do;
243100    +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
243101    +       %let nnpmml=1;
243103    +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
243104    +   %end;
243105    +%end;
243107    +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET +
243107   !+&EM_NUM_ORDINAL_TARGET);
243109    +%if &nnpmml or &numClassTarget %then %do;
243111    +    /* create dmdb needed for pmml generation */
243112    +    %let tree_maxlevel = 512;
243113    +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
243114    +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
243115    +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
243116    +      %end;
243117    +    %end;
243118    +    %if &tree_maxlevel gt 0 %then %do;
243119    +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
243120    +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
243121    +    %end;
243123    +    %let targetOrderString =;
243124    +    %let targetString = ;
243125    +    data _null_;
243126    +       length orderString nameString $10000;
243127    +       retain orderString nameString;
243128    +       set &em_data_variableset end=eof;
243129    +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then
243129   !+ %do;
243130    +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
243131    +       %end;
243132    +       %else %do;
243133    +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE
243133   !+='Y';
243134    +       %end;          select(order);
243135    +         when('')        order ='DESC';
243136    +         when('FMTASC')  order='ASCFMT';
243137    +         when('FMTDESC') order='DESFMT';
243138    +         otherwise;
243139    +       end;
243140    +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
243141    +       nameString = trim(nameString)!!' '!!trim(NAME);
243143    +       if eof then do;
243144    +          call symput('targetOrderString', trim(orderString));
243145    +          call symput('targetString', trim(nameString));
243146    +       end;
243147    +    run;
243149    +    %let arborkluge= "work._treeDMDB";
243151    +    proc dmdb batch data=&indata
243152    +    %if &nnpmml %then %do;
243153    +        PMML
243154    +    %end;
243155    +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
243157    +      %if &nnpmml %then %do;
243158    +           %if "%EM_ID" ne "" %then %do;
243159    +             id %EM_ID;
243160    +           %end;
243161    +           %if &EM_NUM_CLASS gt 0 %then %do;
243162    +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
243163    +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
243164    +                  &targetOrderString;
243165    +           %end;
243166    +           %if &EM_NUM_INTERVAL gt 0 %then %do;
243167    +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
243168    +           %end;
243169    +           target &targetString %EM_INTERVAL_TARGET;
243170    +           %if "%EM_FREQ" ne "" %then %do;
243171    +             freq %EM_FREQ;
243172    +           %end;
243173    +      %end;
243174    +      %else %do;
243175    +         class  &targetOrderString;
243176    +         target &targetString %EM_INTERVAL_TARGET;
243177    +      %end;
243178    +    run;
243179    +    quit;
243181    +    proc datasets lib=work nolist;
243182    +       delete classout varout;
243183    +    run;
243184    +    quit;
243186    + %end;
243189    + /* run Arbor procedure */
243190    + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
243191    +  proc arbor data=&INDATA
243193    +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
243194    +    Leafsize = &EM_PROPERTY_LEAFSIZE
243195    +  %end;
243197    +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs))
243197   !+%then %do;
243198    +    Splitsize = &EM_PROPERTY_SPLITSIZE
243199    +  %end;
243201    +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
243202    +    MinCatSize = &EM_PROPERTY_MINCATSIZE
243203    +  %end;
243205    +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
243206    +    MaxBranch = &EM_PROPERTY_MAXBRANCH
243207    +  %end;
243209    +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
243210    +    MaxDepth = &EM_PROPERTY_MAXDEPTH
243211    +  %end;
243213    +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then
243213   !+%do;
243214    +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
243215    +  %end;
243216    +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
243217    +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
243218    +  %end;
243219    +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
243220    +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
243221    +  %end;
243223    +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
243224    +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
243225    +      alpha = &EM_PROPERTY_SIGLEVEL
243226    +    %end;
243227    +  %end;
243229    +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or
243229   !+("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
243230    +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion"
243230   !+ eq "DEFAULT")) %then %do;
243231    +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
243232    +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
243233    +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
243235    +        padjust =
243236    +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
243237    +          &chaid
243238    +        %end;
243239    +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
243240    +          DEPTH
243241    +        %end;
243242    +      %end;
243243    +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
243244    +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
243245    +         pvars = &num_inputs
243246    +      %end;
243247    +    %end;
243248    +  %end;
243249    +  %else %do;
243250    +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR
243250   !+("&Criterion" eq "DEFAULT")) %then %do;
243251    +         padjust = NONE
243252    +      %end;
243253    +  %end;
243255    +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
243256    +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
243257    +    Maxrules = &num_nrules
243258    +  %end;
243260    +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
243261    +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
243262    +    Maxsurrs = &num_nsurrs
243263    +  %end;
243265    +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
243266    +     Missing=&EM_PROPERTY_MISSINGVALUE
243267    +  %end;
243269    +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
243270    +     USEVARONCE
243271    +  %end;
243273    +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
243274    +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
243275    +  %end;
243278    +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
243279    +    event = "&targetEvent"
243280    +  %end;
243282    +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
243283    +     DECSEARCH
243284    +  %end;
243286    +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
243287    +     PRIORSSEARCH
243288    +  %end;
243290    +  %if &arbor_1 ne %then %do;
243291    +    &arbor_1
243292    +  %end;
243294    +  %if &em_arbor ne %then %do;
243295    +     &em_arbor
243296    +  %end;
243297    +  ;
243298    + %end;
243299    + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
243300    +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
243301    +       Performance &EM_PROPERTY_PERFORMANCE
243302    +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
243303    +         nodesize=&EM_PROPERTY_NODESAMPLE
243304    +       %end;
243305    +       ;
243306    +       interact;
243307    + %end;
243308    + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
243309    +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
243310    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
243311    +    %put &em_codebar;
243312    +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
243312   !+NOQUOTE));
243313    +    %put &errormsg;
243314    +    %put &em_codebar;
243315    +    %goto doendm;
243316    +   %end;
243317    +   %else %do;
243318    +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
243319    +       Performance &EM_PROPERTY_PERFORMANCE
243320    +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
243321    +         nodesize=&EM_PROPERTY_NODESAMPLE
243322    +       %end;
243323    +       ;
243324    +       interact;
243325    +   %end;
243326    + %end;
243328    + %else %do;
243329    +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
243330    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
243331    +    %put &em_codebar;
243332    +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err,
243332   !+NOQUOTE));
243333    +    %put &errormsg;
243334    +    %put &em_codebar;
243335    +    %goto doendm;
243336    +   %end;
243337    +   %else %do;
243338    +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
243339    +       Performance &EM_PROPERTY_PERFORMANCE
243340    +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
243341    +         nodesize=&EM_PROPERTY_NODESAMPLE
243342    +       %end;
243343    +       ;
243344    +        interact;
243345    +   %end;
243346    + %end;
243348    + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
243349    +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
243350    +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
243351    +    %end;
243353    +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
243354    +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
243355    +    %end;
243357    +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
243358    +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
243359    +    %end;
243361    +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
243362    +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
243363    +    %end;
243365    +    %if "%EM_FREQ" ne "" %then %do;
243366    +       freq %EM_FREQ;
243367    +    %end;
243369    +    %if "&multipleTar" eq "Y" %then %do;
243370    +       /* cycle through all target vars in variableset */
243371    +       %let tdsid = %sysfunc(open(temptarget));
243372    +       %if &tdsid %then %do;
243373    +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
243374    +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
243375    +          %do %while(^ %sysfunc(fetch(&tdsid)));
243376    +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
243377    +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
243378    +             target &var / level = &lvl
243379    +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
243380    +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
243381    +             %end;
243382    +             %else %if "&lvl" eq "INTERVAL" %then %do;
243383    +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
243384    +             %end;
243385    +             %else %if "&lvl" eq "ORDINAL" %then %do;
243386    +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
243387    +             %end;
243388    +          %end;
243389    +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
243390    +       %end;
243391    +       useTarget variable = %EM_TARGET;
243392    +    %end;
243393    +    %else %do;
243394    +      target %EM_TARGET / level = %EM_TARGET_LEVEL
243395    +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL"))
243395   !+%then %do;
243396    +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
The SAS System
 
243397    +      %end;
243398    +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
243399    +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
243400    +      %end;
243401    +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
243402    +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
243403    +      %end;
243404    +    %end;
243406    +    %if "&multipleTar" eq "N" %then %do;
243407    +      &EM_DEC_STATEMENT;
243408    +    %end;
243410    +    Performance &EM_PROPERTY_PERFORMANCE
243411    +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
243412    +      nodesize=&EM_PROPERTY_NODESAMPLE
243413    +    %end;
243414    +    ;
243416    +    %if "&intFlag" eq "Y" %then %do;
243417    +       INTERACT Largest;
243418    +       Train maxnewdepth=0;
243419    +    %end;
243421    +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
243422    +         Assess
243423    +         %if (("&EM_IMPORT_VALIDATE" ne "") AND
243423   !+(%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW))
243423   !+)) %then %do;
243424    +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
243425    +              %put &em_codebar;
243426    +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine,
243426   !+novalidationwithcv_note, NOQUOTE));
243427    +              %put &errormsg;
243428    +              %put &em_codebar;
243429    +            %end;
243430    +            %else %do;
243431    +               Validata=&EM_IMPORT_VALIDATE
243432    +            %end;
243433    +         %end;
243434    +         %else %do;
243435    +           NoValidata
243436    +         %end;
243437    +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
243438    +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
243439    +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
243440    +               %if &dsid %then %do;
243441    +                 %let usenum = %sysfunc(varnum(&dsid, USE));
243442    +                 %do %while(^ %sysfunc(fetch(&dsid)));
243443    +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
243444    +                   %if "&use" eq "Y" %then %let measure=PROFIT;
243445    +                   %else %do;
243446    +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
243447    +                      %else %let measure= MISC;
243448    +                   %end;
243449    +                 %end;
243450    +               %end;
243451    +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
243452    +            %end;
243453    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
243454    +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
243455    +                 %let measure=ASE;
243456    +              %end;
243457    +              %else %do;
243458    +                 %let measure=MISC;
243459    +              %end;
243460    +            %end;
243461    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
243462    +              %let measure=ASE;
243463    +            %end;
243464    +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
243465    +               %let measure = LIFT;
243466    +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
243467    +               %if &dsid %then %do;
243468    +                 %let usenum = %sysfunc(varnum(&dsid, USE));
243469    +                 %do %while(^ %sysfunc(fetch(&dsid)));
243470    +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
243471    +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
243472    +                 %end;
243473    +               %end;
243474    +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
243475    +            %end;
243476    +            measure=&measure
243477    +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL"))
243477   !+%then %do;
243478    +               event = "&targetEvent"
243479    +            %end;
243480    +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
243481    +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
243482    +            %end;
243483    +         %end;
243484    +         %if "&multipleTar" eq "N" %then %do;
243485    +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
243486    +               CV
243487    +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
243488    +                 CVNITer = &EM_PROPERTY_CVNITER
243489    +               %end;
243490    +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
243491    +                 CVRepeat = &EM_PROPERTY_CVREPEAT
243492    +               %end;
243493    +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
243494    +                 CVSeed = &EM_PROPERTY_CVSEED
243495    +               %end;
243496    +            %end;
243497    +         %end;
243498    +       %end;
243499    +      ;
243501    +      %if "&intFlag" ne "Y" %then %do;
243502    +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
243503    +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
243504    +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
243505    +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
243507    +          SUBTREE &subtree
243508    +          %if "&subtree" eq "NLEAVES" %then %do;
243509    +            =&EM_PROPERTY_NSUBTREE
243510    +          %end;
243511    +          ;
243512    +        %end;
243514    +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then
243514   !+ %do;
243515    +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
243516    +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP
243516   !+nvars=&EM_PROPERTY_NUMSINGLEIMP;
243517    +          %end;
243518    +       %end;
243519    +      %end;
243520    + %end;
243523    + MakeMacro nleaves = nleaves;
243524    + save
243525    + %if "&EM_USER_EMTREE" ne "" %then %do;
243526    +   MODEL=&EM_USER_EMTREE
243527    + %end;
243528    + %if "&EM_USER_OUTSEQ" ne "" %then %do;
243529    +   SEQUENCE=&EM_USER_OUTSEQ
243530    + %end;
243531    + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
243532    +   IMPORTANCE=&EM_USER_OUTIMPORT
243533    + %end;
243534    + %if "&EM_USER_OUTNODES" ne "" %then %do;
243535    +   NODESTAT=&EM_USER_OUTNODES
243536    + %end;
243537    + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
243538    +   SUMMARY=&EM_USER_OUTSUMMARY
243539    + %end;
243540    + %if "&EM_USER_OUTSTATS" ne "" %then %do;
243541    +   STATSBYNODE=&EM_USER_OUTSTATS
243542    + %end;
243543    + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
243544    +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
243545    + %end;
243546    + %if "&EM_USER_OUTPATH" ne "" %then %do;
243547    +   Pathlistnonmissing=&EM_USER_OUTPATH
243548    + %end;
243549    + %if "&EM_USER_OUTRULES" ne "" %then %do;
243550    +   RULES = &EM_USER_OUTRULES
243551    + %end;
243552    + ;
243554    + %if "&intFlag" ne "Y" %then %do;
243556    +   %let lookupString = ;
243557    +   %if ^%symexist(EM_OPTION) %then
243558    +      %let EM_OPTION=;
243560    +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or
243560   !+%sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
243561    +      %let lookupString = LOOKUP=SELECT;
243562    +   %end;
243564    +   %let codetext=;
243565    +   %let norescodetxt=;
243567    +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
243568    +     %let codetext=&codetext DUMMY;
243569    +     %let norescodetxt=&norescodetxt DUMMY;
243570    +   %end;
243571    +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
243572    +     %let codetext=&codetext NOLEAFID;
243573    +     %let norescodetxt=&norescodetxt NOLEAFID;
243574    +   %end;
243575    +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
243576    +     %let norescodetxt=&norescodetxt NOPRED;
243577    +   %end;
243579    +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
243580    +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid
243580   !+&lookupString;
243582    +   %if &nnpmml %then %do;
243583    +     code pmml;
243584    +   %end;
243586    +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
243587    +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
243588    +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
243589    +   %end;
243590    +   %if "&EM_IMPORT_TEST" ne "" %then %do;
243591    +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
243592    +   %end;
243593    + %end;
243595    + run;
243596    + quit;
243598    + /*%em_checkerror(); */
243599    +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
243600    +   /* Delete DMDB catalog */
243601    +   proc datasets lib=work nolist;
243602    +       delete _treeDMDB / mt=cat;
243603    +  run;
243604    +  %end;
243606    + %if &nnpmml %then %do;
243607    +    ods pmml close;
243608    + %end;
243610    +  %doendm:
243612    +%mend em_tree_runTreeProcedure;
243614    +%macro em_tree_createFitStats( multipleTar= );
243617    +  /* create targetTable is multipleTar eq Y */
243618    +  data temptarget;
243619    +    set &EM_DATA_VARIABLESET;
243620    +    where ROLE="TARGET";
243621    +  run;
243623    +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
243624    +   data &EM_USER_EMOUTFIT;
243625    +     length target $32;
243626    +     merge work.fit_train
243627    +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
243628    +       work.fit_valid
243629    +     %end;
243630    +     %if "&EM_IMPORT_TEST" ne "" %then %do;
243631    +       work.fit_test
243632    +     %end;
243633    +     ;
243634    +     %if "&multipleTar" eq "N" %then %do;
243635    +       target="%EM_TARGET";
243636    +     %end;
243637    +     %else %do;
243638    +       target = _TARGET_;
243639    +     %end;
243640    +     drop _NW_ _SUMW_
243641    +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
243642    +        _VSUMW_
243643    +     %end;
243644    +     ;
243645    +   run;
243647    +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
243648    +     proc datasets library=work nolist;
243649    +       delete fit_valid;
243650    +     run;
243651    +   %end;
243652    +   %if "&EM_IMPORT_TEST" ne "" %then %do;
243653    +     proc datasets library=work nolist;
243654    +       delete fit_test;
243655    +     run;
243656    +   %end;
243658    +%mend em_tree_createFitStats;
243661    +%macro em_tree_makeEnglishRules;
243663    +  %EM_GETNAME(key=OUTNODES, type=DATA);
243664    +  %EM_GETNAME(key=OUTPATH, type=DATA);
243666    +  /* verify that necessary tables exist and if not, skip processing */
243667    +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
243668    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
243669    +    %goto doendm;
243670    +  %end;
243671    +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
243672    +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
243673    +    %goto doendm;
243674    +  %end;
243676    +  /* determine length of variable in outpath dataset */
243677    +  %let vlength= ;
243678    +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
243679    +  %if &dsid ne %then %do;
243680    +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
243681    +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
243682    +  %end;
243683    +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
243685    +  data tempoutpath;
243686    +    length varname $&vlength;
243687    +    retain varname;
243688    +    set &EM_USER_OUTPATH;
243690    +    if ^missing(variable) then varname=variable;
243691    +    else if ^missing(var_name) then varname=var_name;
243692    +    output;
243693    +  run;
243695    +  /* create an array of generated predicted variable names */
243696    +  %let tree_pred_vars = ;
243697    +  %let tree_pred_label = ;
243698    +  %let numpred= 0;
243699    +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
243701    +    data _null_;
243702    +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
243703    +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
243704    +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
243704   !+strip(tranwrd(LABEL,'"','""')));
243705    +     if eof then
243706    +       call symput('numpred', strip(put(_N_, BEST.)));
243707    +    run;
243708    +  %end;
243710    +  /* determine if NPRIORS exists in outnodes  */
243711    +  %local nprior_flag;
243712    +  data _null_;
243713    +    set &EM_USER_OUTNODES(obs=2) end=eof;
243714    +    if eof then do;
243715    +      call symput('nprior_flag', strip(put(npriors, best.)));
243716    +    end;
243717    +  run;
243719    +  proc sort data=tempoutpath; by node; run;
243720    +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
243722    +  data tempoutpath;
243723    +    merge tempoutpath(in=_a) outnodes(keep= node
243724    +    %if "&nprior_flag" ne "." %then %do;
243725    +      NPRIORS
243726    +    %end;
243727    +    %else %do;
243728    +      N
243729    +    %end;
243730    +    %if &numpred gt 0 %then %do;
243731    +      %do i=1 %to &numpred;
243732    +        &&tree_pred_vars&i
243733    +      %end;
243734    +    %end;
243735    +    );
243736    +    by node;
243737    +    if _a;
243738    +  run;
243740    +  proc sort data=tempoutpath; by node descending varname descending numeric_value;
243740   !+run;
243742    +  data _null_;
243743    +    file x;
243744    +    set tempoutpath;
243745    +    by node descending varname;
243746    +    retain origvar oldnode string;
243747    +    length origvar $32 oldnode 8 string $200;
243749    +    if _N_ = 1 then do;
243750    +      origvar = varname;
243751    +      oldnode = node;
243752    +    end;
243754    +    if first.node then do;
243755    +       put "&EM_CODEBAR";
243756    +       put " Node = " node;
243757    +       put "&EM_CODEBAR";
243758    +    end;
243760    +      if first.varname then do;
243761    +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
243762    +            if MISSING(CHARACTER_VALUE) then do;
243763    +             if NUMERIC_VALUE ne .  then do;
243764    +              if ^first.node then do;
243765    +                string= "AND "|| strip(varname)||" "||strip(relation)||"
243765   !+"||strip(numeric_value);
243766    +              end;
243767    +              else do;
243768    +                string= "if "|| strip(varname)||" "||strip(relation)||"
243768   !+"||strip(numeric_value);
243769    +              end;
243770    +             end;
243771    +            end;
243772    +            else do;
243773    +              if ^first.node then do;
243774    +                string= "AND "|| strip(varname)||" "||strip(relation)||"
243774   !+"||strip(character_value);
243775    +              end;
243776    +              else do;
243777    +                string= "if "|| strip(varname)||" "||strip(relation)||"
243777   !+"||strip(character_value);
243778    +              end;
243779    +             end;
243780    +         end;
243781    +         else if RELATION in ("=") then do;
243782    +            if ^first.node then do;
243783    +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
243784    +            end;
243785    +            else do;
243786    +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
243787    +            end;
243788    +         end;
243789    +         else if RELATION in ("ISMISSING") then do;
243790    +            if ^first.node then do;
243791    +              string = " AND "|| strip(varname) || " equals Missing";
243792    +            end;
243793    +            else do;
243794    +              string = "if "|| strip(varname) ||" equals Missing";
243795    +            end;
243796    +         end;
243797    +         else if RELATION in ("ISNOTMISSING") then do;
243798    +            if ^first.node then do;
243799    +              string = " AND "|| strip(varname) || " equals All Values";
243800    +            end;
243801    +            else do;
243802    +              string = "if "|| strip(varname) ||" equals All Values";
243803    +            end;
243804    +         end;
243805    +         if ^missing(varname) then origvar = varname;
243806    +         oldnode=node;
243808    +      end;
243809    +      else do;
243810    +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
243811    +          if MISSING(CHARACTER_VALUE) then do;
243812    +           if  NUMERIC_VALUE ne .  then do;
243813    +            if ^MISSING(string) then
243814    +              string= strip(string)||" AND "|| strip(varname)||"
243814   !+"||strip(relation)||" "||strip(numeric_value);
243815    +            else
243816    +              string= " if "|| strip(varname)||" "||strip(relation)||"
243816   !+"||strip(numeric_value);
243817    +           end;
243818    +          end;
243819    +          else do;
243820    +            if ^MISSING(string) then
243821    +              string= strip(string)||" AND "|| strip(varname)||"
243821   !+"||strip(relation)||" "||strip(character_value);
243822    +            else
243823    +              string= " if "|| strip(varname)||" "||strip(relation)||"
243823   !+"||strip(character_value);
243824    +          end;
243826    +         end;
243827    +         else if RELATION in ("=") then do;
243828    +           string = strip(string)||", "||strip(character_value);
243829    +         end;
243830    +         else if RELATION in ("ISMISSING") then do;
243832    +         end;
243833    +         if ^missing(varname) then origvar = varname;
243834    +         oldnode=node;
243835    +      end;
243836    +      if last.varname then do;
243837    +         if RELATION in ("ISMISSING") then do;
243838    +           if ^first.varname then do;
243839    +             string = strip(string) || " or MISSING";
243840    +           end;
243841    +         end;
243842    +         put string;
243843    +         if ^missing(varname) then origvar = varname;
243844    +         oldnode=node;
243845    +      end;
243847    +      if last.node then do;
243848    +         put "then ";
243849    +         put " Tree Node Identifier   = " node;
243851    +         %if "&nprior_flag" ne "." %then %do;
243852    +           put " Number of Observations = " NPRIORS;
243853    +         %end;
243854    +         %else %do;
243855    +           put " Number of Observations = " N;
243856    +         %end;
243858    +         %if &numpred gt 0 %then %do;
243859    +           %do i=1 %to &numpred;
243860    +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
243861    +           %end;
243862    +         %end;
243864    +         put " ";
243865    +         if ^missing(varname) then origvar = varname;
243866    +         oldnode=node;
243867    +      end;
243869    +  run;
243871    +  proc datasets lib=work nolist;
243872    +    delete tempoutpath outnodes;
243873    +  run;
243875    +  %doendm:
243876    +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1
property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS1.Part2_TRAIN
classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class Attrition_Flag;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Records processed = 7088   Memory used = 511K.
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS1.em_Tree4 / view=EMWS1.em_Tree4;
MPRINT(EM_TREE_TRAIN):   set EMWS1.Part2_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =G_Contacts_Count_12_mon G_Customer_Age G_Months_Inactive_12_mon
G_Months_on_book G_Total_Relationship_Count G_Total_Trans_Ct RANGE_LOG_Total_Trans_Amt
RANGE_SQRT_Avg_Utilization_Ratio RANGE_SQRT_Total_Amt_Chng_Q4_Q1
RANGE_SQRT_Total_Ct_Chng_Q4_Q1 RANGE_Total_Revolving_Bal Attrition_Flag Attrition_Flag );
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE4.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS1.em_Tree4;
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree4_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS1.Tree4_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL",
"ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!'
'!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS1.em_Tree4 dmdbcat=_treeDMDB
classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class Attrition_Flag(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target Attrition_Flag
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Records processed = 7088   Memory used = 511K.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.EM_TREE4.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS1.em_Tree4 Leafsize = 5 MinCatSize = 5
MaxBranch = 2 MaxDepth = 10
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Maxrules = 5 Maxsurrs = 0 Missing=USEINSEARCH
Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   RANGE_LOG_Total_Trans_Amt RANGE_SQRT_Avg_Utilization_Ratio
RANGE_SQRT_Total_Amt_Chng_Q4_Q1 RANGE_SQRT_Total_Ct_Chng_Q4_Q1 RANGE_Total_Revolving_Bal
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   G_Contacts_Count_12_mon G_Customer_Age G_Months_Inactive_12_mon
G_Months_on_book G_Total_Relationship_Count G_Total_Trans_Ct
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   Attrition_Flag
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=GINI;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS1.Part2_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=MISC
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1560127 kilobytes of physical memory.
NOTE: Will use 7088 out of 7088 training cases.
NOTE: Using memory pool with 162713600 bytes.
NOTE: Passed training data 20 times.
NOTE: Training used 2165408 bytes of work memory.
NOTE: The subtree sequence contains 168 subtrees. The largest has 335 nodes and 168 leaves.
NOTE: Using subtree with 111 nodes and 56 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 111 nodes and 56 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 56.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS1.Tree4_EMTREE SEQUENCE=EMWS1.Tree4_OUTSEQ
IMPORTANCE=EMWS1.Tree4_OUTIMPORT NODESTAT=EMWS1.Tree4_OUTNODES SUMMARY=EMWS1.Tree4_OUTSUMMARY
STATSBYNODE=EMWS1.Tree4_OUTSTATS TOPOLOGY=EMWS1.Tree4_OUTTOPOLOGY
Pathlistnonmissing=EMWS1.Tree4_OUTPATH RULES = EMWS1.Tree4_OUTRULES ;
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 11 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_EMTREE has 13196 observations and 4 variables.
NOTE: The data set EMWS1.TREE4_OUTNODES has 111 observations and 24 variables.
NOTE: The data set EMWS1.TREE4_OUTPATH has 813 observations and 7 variables.
NOTE: The data set EMWS1.TREE4_OUTRULES has 3338 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 168 observations and 20 variables.
NOTE: The data set EMWS1.TREE4_OUTSTATS has 777 observations and 5 variables.
NOTE: The data set EMWS1.TREE4_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE4_OUTTOPOLOGY has 111 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code
file="D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\TREEFLOW.sas" res group=Tree4
;
NOTE: External file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\TREEFLOW.sas
      opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code
file="D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\TREEPUBLISH.sas" nores
group=Tree4 ;
NOTE: External file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\TREEPUBLISH.sas
      opened.
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.em_Tree4 out=_NULL_ outfit=work.fit_train
role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part2_VALIDATE out=_NULL_
outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS1.Part2_TEST out=_NULL_
outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: View EMWS1.EM_TREE4.VIEW used (Total process time):
      real time           0.92 seconds
      cpu time            0.92 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.EM_TREE4.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.94 seconds
      cpu time            0.93 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS1.Tree4_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS1.Tree4_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "Attrition_Flag";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X
"D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\ENGLISHRULES.txt" encoding='utf-8'
NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $46;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree4_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 813 observations read from the data set EMWS1.TREE4_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 813 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set
EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)),
strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)),
strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS1.Tree4_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 813 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 813 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS1.Tree4_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 111 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.OUTNODES has 111 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS
P_Attrition_Flag1 P_Attrition_Flag0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 813 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 111 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 813 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 813 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 813 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $200;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put
"*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF:
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF:
"||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||"
"||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||"
"||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Attrition_Flag=1 = " P_Attrition_Flag1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: Attrition_Flag=0 = " P_Attrition_Flag0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=09Apr2022:15:11:21,
      Create Time=09Apr2022:15:11:21
 
NOTE: 786 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 129.
NOTE: There were 813 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.15937023058504;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
243878
243879     *------------------------------------------------------------*;
243880     * End TRAIN: Tree4;
243881     *------------------------------------------------------------*;
 
243882     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
243883     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
243884     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
243885     ;
MPRINT(EM_DIAGRAM):   ;
243886     ;
MPRINT(EM_DIAGRAM):   ;
243887     ;
MPRINT(EM_DIAGRAM):   ;
243888     ;
MPRINT(EM_DIAGRAM):   ;
243889     quit;
MPRINT(EM_DIAGRAM):   quit;
243890     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
243891     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
243892     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
243893     /*; *"; *'; */
243894     ;
MPRINT(EM_DIAGRAM):   ;
243895     run;
MPRINT(EM_DIAGRAM):   run;
243896     quit;
MPRINT(EM_DIAGRAM):   quit;
243897     /* Reset EM Options */
243898     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
243899     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
243900     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
243901     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
243902     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
243903     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:11:22" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                April 09, 2022
Time:                15:11:22
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1SZURJG "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1SZURJG new;
MPRINT(EM_DIAGRAM):   run;
244005     %let EMEXCEPTIONSTRING=;
244006     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
244007     * SCORE: Tree4;
MPRINT(EM_DIAGRAM):   * SCORE: Tree4;
244008     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
244009     %let EM_ACTION = SCORE;
244010     %let syscc = 0;
244011     %macro main;
244012
244013       %if %upcase(&EM_ACTION) = CREATE %then %do;
244014         filename temp catalog 'sashelp.emmodl.tree_create.source';
244015         %include temp;
244016         filename temp;
244017
244018         %em_tree_create;
244019       %end;
244020
244021        %else
244022        %if %upcase(&EM_ACTION) = TRAIN %then %do;
244023
244024            filename temp catalog 'sashelp.emmodl.tree_train.source';
244025            %include temp;
244026            filename temp;
244027            %em_tree_train;
244028        %end;
244029
244030       %else
244031       %if %upcase(&EM_ACTION) = SCORE %then %do;
244032         filename temp catalog 'sashelp.emmodl.tree_score.source';
244033         %include temp;
244034         filename temp;
244035
244036         %em_tree_score;
244037
244038       %end;
244039
244040       %else
244041       %if %upcase(&EM_ACTION) = REPORT %then %do;
244042
244043            filename temp catalog 'sashelp.emmodl.tree_report.source';
244044            %include temp;
244045            filename temp;
244046
244047            %em_tree_report;
244048        %end;
244049
244050       %else
244051       %if %upcase(&EM_ACTION) = OPENINT %then %do;
244052
244053            filename temp catalog 'sashelp.emmodl.tree_actions.source';
244054            %include temp;
244055            filename temp;
244056            %EM_TREE_OPENTREEVIEWER;
244057
244058        %end;
244059
244060       %else
244061       %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
244062
244063            filename temp catalog 'sashelp.emmodl.tree_actions.source';
244064            %include temp;
244065            filename temp;
244066            %EM_TREE_CLOSETREEVIEWER;
244067
244068        %end;
244069
244070
244071        %doendm:
244072     %mend main;
244073
244074     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
244076    +%macro em_tree_score;
244078    +   /* determine if multiple targets will be processed */
244079    +   %let em_tree_multipleTargets=N;
244080    +   %let em_tree_numTarget=1;
244081    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
244082    +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
244083    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
244084    +         %let em_tree_multipleTargets=N;
244085    +      %end;
244086    +      %else %do;
244087    +         /* create macro array of targets  */
244088    +         data _null_;
244089    +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
244090    +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
244091    +           if eof then
244092    +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
244093    +        run;
244095    +        %if &em_tree_numTarget gt 1 %then %do;
244096    +           %let em_tree_multipleTargets=Y;
244097    +        %end;
244098    +      %end;
244099    +   %end;
244101    +   /* build flow and publish scoring code */
244102    +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
244103    +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
244105    +   filename treeflow "&EM_USER_TREEFLOW";
244106    +   filename treepub "&EM_USER_TREEPUBLISH";
244108    +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
244109    +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
244111    +   %em_copyfile(infref=treeflow, outfref=flowref);
244112    +   %em_copyfile(infref=treepub, outfref=pubref);
244114    +   filename treeflow;
244115    +   filename treepub;
244117    +   /* if priors are used, add code to generate unadjusted residuals in export */
244118    +   %let useAdjPriors = N;
244119    +   data _null_;
244120    +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
244121    +     if USE="Y" then call symput('useAdjPriors', 'Y');
244122    +   run;
244123    +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
244124    +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
244125    +      %include temp;
244126    +      filename temp;
244128    +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
244129    +      filename adjref "&EM_USER_adjResidualCode";
244130    +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
244132    +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
244134    +      filename adjref;
244135    +   %end;
244137    +   /* LEAF */
244138    +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
244139    +      data _null_;
244140    +        file flowref mod;
244141    +        put 'drop _LEAF_;';
244142    +      run;
244144    +      data _null_;
244145    +        file pubref mod;
244146    +        put 'drop _LEAF_;';
244147    +      run;
244149    +   %end;
244151    +   filename flowref;
244152    +   filename pubref;
244154    +   /* em_metachange code */
244155    +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
244156    +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
244157    +   %end;
244159    +   /* variable selection based on importance stat    */
244160    +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
244161    +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
244162    +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
244163    +     %let varnum = %sysfunc(varnum(&dsid, NAME));
244164    +     %let obs = %sysfunc(fetch(&dsid));
244165    +     %do %while(&obs=0);
244166    +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
244167    +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
244168    +       %EM_METACHANGE(name=&varname, role=REJECTED);
244169    +       %let obs = %sysfunc(fetch(&dsid));
244170    +     %end;
244171    +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
244172    +   %end;
244174    +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
244175    +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
244176    +    %let tree_pred_vars = ;
244177    +    %let tree_pred_lvl =;
244178    +    %let numpred= 0;
244180    +    data _null_;
244181    +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
244182    +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
244183    +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
244184    +     if eof then
244185    +       call symput('numpred', strip(put(_N_, BEST.)));
244186    +    run;
244187    +   %end;
244189    +   %if &numpred ne 0 %then %do;
244190    +    %do i=1 %to &numpred;
244191    +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
244192    +      %EM_METACHANGE(name=&qpred, role=ASSESS);
244193    +    %end;
244194    +   %end;
244196    +   /* determine if multiple targets will be processed */
244197    +   %let em_tree_multipleTargets=N;
244198    +   %let em_tree_numTarget=1;
244199    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
244200    +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
244201    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
244202    +         %let em_tree_multipleTargets=N;
244203    +      %end;
244204    +      %else %do;
244205    +        data _null_;
244206    +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
244207    +          if eof then
244208    +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
244209    +        run;
244211    +        %if &em_tree_numTarget gt 1 %then %do;
244212    +           %let em_tree_multipleTargets=Y;
244213    +        %end;
244214    +     %end;
244215    +   %end;
244217    +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
244218    +   %if "&em_tree_multipleTargets" eq "N" %then %do;
244220    +      /* variable importance */
244221    +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
244222    +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
244224    +         %let validexist=0;
244225    +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
244226    +           %let validexist=1;
244227    +         %end;
244229    +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
244230    +         /* and the columns may not be generated                                                                                 */
244231    +         %let em_tree_cvexists=;
244232    +         %let em_tree_surrexists=.;
244233    +         data _null_;
244234    +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
244235    +            if eof then do ;
244236    +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
244237    +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
244238    +            end;
244239    +         run;
244241    +         data &EM_USER_OUTIMPORT;
244242    +            set &EM_USER_OUTIMPORT;
244244    +            /* format columns based on Precison value specified */
244245    +            format importance 15.&EM_PROPERTY_PRECISION
244246    +                 %if &validexist %then %do;
244247    +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
244248    +                 %end;
244249    +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
244250    +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
244251    +                 %end;
244252    +            ;
244253    +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
244254    +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
244255    +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
244256    +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
244257    +                 %if "&em_tree_surrexists" ne "" %then %do;
244258    +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
244259    +                 %end;
244260    +                 %if &validexist %then %do;
244261    +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
244262    +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
244263    +                 %end;
244264    +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
244265    +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
244266    +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
244267    +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
244268    +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
244269    +                 %end;
244270    +            ;
244271    +         run;
244273    +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
244274    +      %end;
244275    +   %end;
244277    +   %doendm:
244278    +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file FLOWREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09Apr2022:15:11:22,
      Create Time=09Apr2022:15:11:22
 
NOTE: 916 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PUBREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=09Apr2022:15:11:22,
      Create Time=09Apr2022:15:11:22
 
NOTE: 894 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 78.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file FLOWREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=42006,
      Last Modified=09Apr2022:15:11:22,
      Create Time=09Apr2022:15:11:22
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file PUBREF is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=41222,
      Last Modified=09Apr2022:15:11:22,
      Create Time=09Apr2022:15:11:22
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("G_Contacts_Count_12_mon         ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("G_Months_on_book                ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Attrition_Flag1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_Attrition_Flag0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree4_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data EMWS1.Tree4_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree4_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training
Importance" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance" CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 11 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05010326395281;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
244279
244280     *------------------------------------------------------------*;
244281     * End SCORE: Tree4;
244282     *------------------------------------------------------------*;
 
244283     proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
244284     by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
244285     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
244286     filename x "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas";
244287     data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
244288     file x;
MPRINT(EM_DIAGRAM):   file x;
244289     put 'if upcase(NAME) = "G_CONTACTS_COUNT_12_MON" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "G_CONTACTS_COUNT_12_MON" then do;';
244290     put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
244291     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
244292     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
244293     put 'if upcase(NAME) = "G_MONTHS_ON_BOOK" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "G_MONTHS_ON_BOOK" then do;';
244294     put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
244295     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
244296     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
244297     put 'if upcase(NAME) = "Q_ATTRITION_FLAG0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_ATTRITION_FLAG0" then do;';
244298     put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
244299     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
244300     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
244301     put 'if upcase(NAME) = "Q_ATTRITION_FLAG1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_ATTRITION_FLAG1" then do;';
244302     put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
244303     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
244304     put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
244305     put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
244306     put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
244307     put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
244308     put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
244309     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file X is:
      Filename=D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=09Apr2022:15:11:22,
      Create Time=29Mar2022:21:42:23
 
NOTE: 20 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
244310     filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
244311     filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
244312     *------------------------------------------------------------*;
244313     * Tree4: Scoring DATA data;
244314     *------------------------------------------------------------*;
244315     data EMWS1.Tree4_TRAIN
244316     / view=EMWS1.Tree4_TRAIN
244317     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_TRAIN / view=EMWS1.Tree4_TRAIN ;
244318     set EMWS1.Part2_TRAIN
244319     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part2_TRAIN ;
244320     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
244321    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
244322    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
244323    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
244324    +
244325    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
244326    +LENGTH F_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH F_Attrition_Flag $ 17;
244327    +LENGTH I_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH I_Attrition_Flag $ 17;
244328    +LENGTH U_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH U_Attrition_Flag $ 17;
244329    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
244330    +
244331    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
244332    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
244333    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
244334    +label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
244335    +label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
244336    +label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
244337    +label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
244338    +label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
244339    +label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
244340    +label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
244341    +label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
244342    +label F_Attrition_Flag = 'From: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label F_Attrition_Flag = 'From: Attrition_Flag' ;
244343    +label I_Attrition_Flag = 'Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label I_Attrition_Flag = 'Into: Attrition_Flag' ;
244344    +label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
244345    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
244346    +
244347    +
244348    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
244349    +LENGTH _ARBFMT_17 $     17; DROP _ARBFMT_17;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_17 $ 17;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_17;
244350    +_ARBFMT_17 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = ' ';
244351    +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
244352    +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
244353    +
244354    +
244355    +_ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
244356    + %DMNORMCP( _ARBFMT_17, F_Attrition_Flag );
MPRINT(DMNORMCP):   F_Attrition_Flag=dmnorm(_ARBFMT_17,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
244357    +
244358    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
244359    +_ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
244360    + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244361    +IF _ARBFMT_12 IN ('1' ,'3' ,'4' ,'2' ,'0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'3' ,'4' ,'2' ,'0' ) THEN DO;
244362    +  IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
244363    +    RANGE_Total_Revolving_Bal  <     0.24215335717123 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.24215335717123 THEN DO;
244364    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244365    +          0.45221286754555 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45221286754555 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
244366    +      _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
244367    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244368    +      IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
244369    +        _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
244370    +        _LEAF_  =                   38;
MPRINT(EM_DIAGRAM):   _LEAF_ = 38;
244371    +        P_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05555555555555;
244372    +        P_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94444444444444;
244373    +        Q_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05555555555555;
244374    +        Q_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94444444444444;
244375    +        V_Attrition_Flag0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.11111111111111;
244376    +        V_Attrition_Flag1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.88888888888888;
244377    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244378    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244379    +        END;
MPRINT(EM_DIAGRAM):   END;
244380    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244381    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
244382    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.43199033198472 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.43199033198472 THEN DO;
244383    +          _NODE_  =                   48;
MPRINT(EM_DIAGRAM):   _NODE_ = 48;
244384    +          _LEAF_  =                   39;
MPRINT(EM_DIAGRAM):   _LEAF_ = 39;
244385    +          P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
244386    +          P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
244387    +          Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
244388    +          Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
244389    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
244390    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
244391    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244392    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244393    +          END;
MPRINT(EM_DIAGRAM):   END;
244394    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244395    +          _NODE_  =                   49;
MPRINT(EM_DIAGRAM):   _NODE_ = 49;
244396    +          _LEAF_  =                   40;
MPRINT(EM_DIAGRAM):   _LEAF_ = 40;
244397    +          P_Attrition_Flag0  =               0.8125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8125;
244398    +          P_Attrition_Flag1  =               0.1875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1875;
244399    +          Q_Attrition_Flag0  =               0.8125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8125;
244400    +          Q_Attrition_Flag1  =               0.1875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1875;
244401    +          V_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.8;
244402    +          V_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.2;
244403    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244404    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244405    +          END;
MPRINT(EM_DIAGRAM):   END;
244406    +        END;
MPRINT(EM_DIAGRAM):   END;
244407    +      END;
MPRINT(EM_DIAGRAM):   END;
244408    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244409    +      _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
244410    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244411    +      IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
244412    +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
244413    +        _LEAF_  =                   32;
MPRINT(EM_DIAGRAM):   _LEAF_ = 32;
244414    +        P_Attrition_Flag0  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.54;
244415    +        P_Attrition_Flag1  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.46;
244416    +        Q_Attrition_Flag0  =                 0.54;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.54;
244417    +        Q_Attrition_Flag1  =                 0.46;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.46;
244418    +        V_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.83333333333333;
244419    +        V_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.16666666666666;
244420    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244421    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244422    +        END;
MPRINT(EM_DIAGRAM):   END;
244423    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244424    +        _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
244425    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244426    +        IF _ARBFMT_12 IN ('9' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ) THEN DO;
244427    +          _NODE_  =                   44;
MPRINT(EM_DIAGRAM):   _NODE_ = 44;
244428    +          _LEAF_  =                   33;
MPRINT(EM_DIAGRAM):   _LEAF_ = 33;
244429    +          P_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.75;
244430    +          P_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.25;
244431    +          Q_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.75;
244432    +          Q_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.25;
244433    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
244434    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
244435    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244436    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244437    +          END;
MPRINT(EM_DIAGRAM):   END;
244438    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244439    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244440    +            RANGE_LOG_Total_Trans_Amt  <     0.10455689918435 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.10455689918435 THEN DO;
244441    +            _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
244442    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244443    +            IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ) THEN DO;
244444    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
244445    +                    0.43956355842133 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
244446    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43956355842133 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
244447    +                _NODE_  =                  181;
MPRINT(EM_DIAGRAM):   _NODE_ = 181;
244448    +                _LEAF_  =                   36;
MPRINT(EM_DIAGRAM):   _LEAF_ = 36;
244449    +                P_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.77777777777777;
244450    +                P_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.22222222222222;
244451    +                Q_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.77777777777777;
244452    +                Q_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.22222222222222;
244453    +                V_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88888888888888;
244454    +                V_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11111111111111;
244455    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244456    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244457    +                END;
MPRINT(EM_DIAGRAM):   END;
244458    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244459    +                _NODE_  =                  180;
MPRINT(EM_DIAGRAM):   _NODE_ = 180;
244460    +                _LEAF_  =                   35;
MPRINT(EM_DIAGRAM):   _LEAF_ = 35;
244461    +                P_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26666666666666;
244462    +                P_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.73333333333333;
244463    +                Q_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26666666666666;
244464    +                Q_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.73333333333333;
244465    +                V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
244466    +                V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
244467    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244468    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244469    +                END;
MPRINT(EM_DIAGRAM):   END;
244470    +              END;
MPRINT(EM_DIAGRAM):   END;
244471    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244472    +              _NODE_  =                  120;
MPRINT(EM_DIAGRAM):   _NODE_ = 120;
244473    +              _LEAF_  =                   34;
MPRINT(EM_DIAGRAM):   _LEAF_ = 34;
244474    +              P_Attrition_Flag0  =      0.1081081081081;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.1081081081081;
244475    +              P_Attrition_Flag1  =     0.89189189189189;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.89189189189189;
244476    +              Q_Attrition_Flag0  =      0.1081081081081;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.1081081081081;
244477    +              Q_Attrition_Flag1  =     0.89189189189189;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.89189189189189;
244478    +              V_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16666666666666;
244479    +              V_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83333333333333;
244480    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244481    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244482    +              END;
MPRINT(EM_DIAGRAM):   END;
244483    +            END;
MPRINT(EM_DIAGRAM):   END;
244484    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244485    +            _NODE_  =                   81;
MPRINT(EM_DIAGRAM):   _NODE_ = 81;
244486    +            _LEAF_  =                   37;
MPRINT(EM_DIAGRAM):   _LEAF_ = 37;
244487    +            P_Attrition_Flag0  =      0.0360110803324;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.0360110803324;
244488    +            P_Attrition_Flag1  =     0.96398891966759;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.96398891966759;
244489    +            Q_Attrition_Flag0  =      0.0360110803324;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.0360110803324;
244490    +            Q_Attrition_Flag1  =     0.96398891966759;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.96398891966759;
244491    +            V_Attrition_Flag0  =     0.05882352941176;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.05882352941176;
244492    +            V_Attrition_Flag1  =     0.94117647058823;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.94117647058823;
244493    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244494    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244495    +            END;
MPRINT(EM_DIAGRAM):   END;
244496    +          END;
MPRINT(EM_DIAGRAM):   END;
244497    +        END;
MPRINT(EM_DIAGRAM):   END;
244498    +      END;
MPRINT(EM_DIAGRAM):   END;
244499    +    END;
MPRINT(EM_DIAGRAM):   END;
244500    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244501    +    _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
244502    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244503    +    IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
244504    +      _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
244505    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244506    +      IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
244507    +        _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
244508    +        _LEAF_  =                   44;
MPRINT(EM_DIAGRAM):   _LEAF_ = 44;
244509    +        P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
244510    +        P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
244511    +        Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
244512    +        Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
244513    +        V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
244514    +        V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
244515    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244516    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244517    +        END;
MPRINT(EM_DIAGRAM):   END;
244518    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244519    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244520    +              0.43753508527028 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.43753508527028 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
244521    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244522    +            RANGE_LOG_Total_Trans_Amt  <     0.12518504649037 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.12518504649037 THEN DO;
244523    +            _NODE_  =                   88;
MPRINT(EM_DIAGRAM):   _NODE_ = 88;
244524    +            _LEAF_  =                   42;
MPRINT(EM_DIAGRAM):   _LEAF_ = 42;
244525    +            P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
244526    +            P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
244527    +            Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
244528    +            Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
244529    +            V_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.6;
244530    +            V_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.4;
244531    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244532    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244533    +            END;
MPRINT(EM_DIAGRAM):   END;
244534    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244535    +            _NODE_  =                   89;
MPRINT(EM_DIAGRAM):   _NODE_ = 89;
244536    +            _LEAF_  =                   43;
MPRINT(EM_DIAGRAM):   _LEAF_ = 43;
244537    +            P_Attrition_Flag0  =     0.23529411764705;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.23529411764705;
244538    +            P_Attrition_Flag1  =     0.76470588235294;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.76470588235294;
244539    +            Q_Attrition_Flag0  =     0.23529411764705;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.23529411764705;
244540    +            Q_Attrition_Flag1  =     0.76470588235294;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.76470588235294;
244541    +            V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
244542    +            V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
244543    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244544    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244545    +            END;
MPRINT(EM_DIAGRAM):   END;
244546    +          END;
MPRINT(EM_DIAGRAM):   END;
244547    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244548    +          _NODE_  =                   50;
MPRINT(EM_DIAGRAM):   _NODE_ = 50;
244549    +          _LEAF_  =                   41;
MPRINT(EM_DIAGRAM):   _LEAF_ = 41;
244550    +          P_Attrition_Flag0  =     0.04477611940298;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.04477611940298;
244551    +          P_Attrition_Flag1  =     0.95522388059701;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.95522388059701;
244552    +          Q_Attrition_Flag0  =     0.04477611940298;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.04477611940298;
244553    +          Q_Attrition_Flag1  =     0.95522388059701;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.95522388059701;
244554    +          V_Attrition_Flag0  =                 0.04;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.04;
244555    +          V_Attrition_Flag1  =                 0.96;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.96;
244556    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244557    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244558    +          END;
MPRINT(EM_DIAGRAM):   END;
244559    +        END;
MPRINT(EM_DIAGRAM):   END;
244560    +      END;
MPRINT(EM_DIAGRAM):   END;
244561    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244562    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244563    +            0.11922630474959 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11922630474959 <= RANGE_LOG_Total_Trans_Amt THEN DO;
244564    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244565    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.41234945173394 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.41234945173394 THEN DO;
244566    +          _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
244567    +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244568    +          IF _ARBFMT_12 IN ('9' ,'8' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ,'8' ) THEN DO;
244569    +            _NODE_  =                   94;
MPRINT(EM_DIAGRAM):   _NODE_ = 94;
244570    +            _LEAF_  =                   47;
MPRINT(EM_DIAGRAM):   _LEAF_ = 47;
244571    +            P_Attrition_Flag0  =                 0.85;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85;
244572    +            P_Attrition_Flag1  =                 0.15;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.15;
244573    +            Q_Attrition_Flag0  =                 0.85;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85;
244574    +            Q_Attrition_Flag1  =                 0.15;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.15;
244575    +            V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
244576    +            V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
244577    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244578    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244579    +            END;
MPRINT(EM_DIAGRAM):   END;
244580    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244581    +            IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
244582    +              RANGE_SQRT_Avg_Utilization_Ratio
244583    +                 <     0.54890616290935 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.54890616290935 THEN DO;
244584    +              IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244585    +                    0.38951475728176 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1
244586    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.38951475728176 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
244587    +                _NODE_  =                  197;
MPRINT(EM_DIAGRAM):   _NODE_ = 197;
244588    +                _LEAF_  =                   49;
MPRINT(EM_DIAGRAM):   _LEAF_ = 49;
244589    +                P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
244590    +                P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
244591    +                Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
244592    +                Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
244593    +                V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
244594    +                V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
244595    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244596    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244597    +                END;
MPRINT(EM_DIAGRAM):   END;
244598    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244599    +                _NODE_  =                  196;
MPRINT(EM_DIAGRAM):   _NODE_ = 196;
244600    +                _LEAF_  =                   48;
MPRINT(EM_DIAGRAM):   _LEAF_ = 48;
244601    +                P_Attrition_Flag0  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.3;
244602    +                P_Attrition_Flag1  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.7;
244603    +                Q_Attrition_Flag0  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.3;
244604    +                Q_Attrition_Flag1  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.7;
244605    +                V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
244606    +                V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
244607    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244608    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244609    +                END;
MPRINT(EM_DIAGRAM):   END;
244610    +              END;
MPRINT(EM_DIAGRAM):   END;
244611    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244612    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
244613    +                    0.53282607355155 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
244614    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.53282607355155 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
244615    +                _NODE_  =                  199;
MPRINT(EM_DIAGRAM):   _NODE_ = 199;
244616    +                _LEAF_  =                   51;
MPRINT(EM_DIAGRAM):   _LEAF_ = 51;
244617    +                P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
244618    +                P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
244619    +                Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
244620    +                Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
244621    +                V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
244622    +                V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
244623    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244624    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244625    +                END;
MPRINT(EM_DIAGRAM):   END;
244626    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244627    +                _NODE_  =                  198;
MPRINT(EM_DIAGRAM):   _NODE_ = 198;
244628    +                _LEAF_  =                   50;
MPRINT(EM_DIAGRAM):   _LEAF_ = 50;
244629    +                P_Attrition_Flag0  =                0.075;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.075;
244630    +                P_Attrition_Flag1  =                0.925;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.925;
244631    +                Q_Attrition_Flag0  =                0.075;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.075;
244632    +                Q_Attrition_Flag1  =                0.925;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.925;
244633    +                V_Attrition_Flag0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.06666666666666;
244634    +                V_Attrition_Flag1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.93333333333333;
244635    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244636    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244637    +                END;
MPRINT(EM_DIAGRAM):   END;
244638    +              END;
MPRINT(EM_DIAGRAM):   END;
244639    +            END;
MPRINT(EM_DIAGRAM):   END;
244640    +          END;
MPRINT(EM_DIAGRAM):   END;
244641    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244642    +          IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
244643    +                0.99463647199046 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.99463647199046 <= RANGE_Total_Revolving_Bal THEN DO;
244644    +            IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244645    +                   0.4523299955855 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.4523299955855 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
244646    +              _NODE_  =                  145;
MPRINT(EM_DIAGRAM):   _NODE_ = 145;
244647    +              _LEAF_  =                   56;
MPRINT(EM_DIAGRAM):   _LEAF_ = 56;
244648    +              P_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.88888888888888;
244649    +              P_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.11111111111111;
244650    +              Q_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.88888888888888;
244651    +              Q_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.11111111111111;
244652    +              V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
244653    +              V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
244654    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244655    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244656    +              END;
MPRINT(EM_DIAGRAM):   END;
244657    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244658    +              _NODE_  =                  144;
MPRINT(EM_DIAGRAM):   _NODE_ = 144;
244659    +              _LEAF_  =                   55;
MPRINT(EM_DIAGRAM):   _LEAF_ = 55;
244660    +              P_Attrition_Flag0  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.18181818181818;
244661    +              P_Attrition_Flag1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.81818181818181;
244662    +              Q_Attrition_Flag0  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.18181818181818;
244663    +              Q_Attrition_Flag1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.81818181818181;
244664    +              V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
244665    +              V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
244666    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244667    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244668    +              END;
MPRINT(EM_DIAGRAM):   END;
244669    +            END;
MPRINT(EM_DIAGRAM):   END;
244670    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244671    +            IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
244672    +                  0.87422091928403 <= RANGE_SQRT_Avg_Utilization_Ratio
244673    +                 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.87422091928403 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
244674    +              IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244675    +                    0.45753335515667 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1
244676    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45753335515667 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
244677    +                _NODE_  =                  203;
MPRINT(EM_DIAGRAM):   _NODE_ = 203;
244678    +                _LEAF_  =                   54;
MPRINT(EM_DIAGRAM):   _LEAF_ = 54;
244679    +                P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
244680    +                P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
244681    +                Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
244682    +                Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
244683    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
244684    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
244685    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244686    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244687    +                END;
MPRINT(EM_DIAGRAM):   END;
244688    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244689    +                _NODE_  =                  202;
MPRINT(EM_DIAGRAM):   _NODE_ = 202;
244690    +                _LEAF_  =                   53;
MPRINT(EM_DIAGRAM):   _LEAF_ = 53;
244691    +                P_Attrition_Flag0  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.22222222222222;
244692    +                P_Attrition_Flag1  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.77777777777777;
244693    +                Q_Attrition_Flag0  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.22222222222222;
244694    +                Q_Attrition_Flag1  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.77777777777777;
244695    +                V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
244696    +                V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
244697    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244698    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244699    +                END;
MPRINT(EM_DIAGRAM):   END;
244700    +              END;
MPRINT(EM_DIAGRAM):   END;
244701    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244702    +              _NODE_  =                  142;
MPRINT(EM_DIAGRAM):   _NODE_ = 142;
244703    +              _LEAF_  =                   52;
MPRINT(EM_DIAGRAM):   _LEAF_ = 52;
244704    +              P_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92;
244705    +              P_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08;
244706    +              Q_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92;
244707    +              Q_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08;
244708    +              V_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.89361702127659;
244709    +              V_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.1063829787234;
244710    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244711    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244712    +              END;
MPRINT(EM_DIAGRAM):   END;
244713    +            END;
MPRINT(EM_DIAGRAM):   END;
244714    +          END;
MPRINT(EM_DIAGRAM):   END;
244715    +        END;
MPRINT(EM_DIAGRAM):   END;
244716    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244717    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244718    +          RANGE_LOG_Total_Trans_Amt  <     0.03539998717758 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03539998717758 THEN DO;
244719    +          _NODE_  =                   54;
MPRINT(EM_DIAGRAM):   _NODE_ = 54;
244720    +          _LEAF_  =                   45;
MPRINT(EM_DIAGRAM):   _LEAF_ = 45;
244721    +          P_Attrition_Flag0  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.09090909090909;
244722    +          P_Attrition_Flag1  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.9090909090909;
244723    +          Q_Attrition_Flag0  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.09090909090909;
244724    +          Q_Attrition_Flag1  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.9090909090909;
244725    +          V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
244726    +          V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
244727    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244728    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244729    +          END;
MPRINT(EM_DIAGRAM):   END;
244730    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244731    +          _NODE_  =                   55;
MPRINT(EM_DIAGRAM):   _NODE_ = 55;
244732    +          _LEAF_  =                   46;
MPRINT(EM_DIAGRAM):   _LEAF_ = 46;
244733    +          P_Attrition_Flag0  =     0.93779160186625;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93779160186625;
244734    +          P_Attrition_Flag1  =     0.06220839813374;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06220839813374;
244735    +          Q_Attrition_Flag0  =     0.93779160186625;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93779160186625;
244736    +          Q_Attrition_Flag1  =     0.06220839813374;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06220839813374;
244737    +          V_Attrition_Flag0  =     0.95555555555555;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.95555555555555;
244738    +          V_Attrition_Flag1  =     0.04444444444444;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.04444444444444;
244739    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244740    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244741    +          END;
MPRINT(EM_DIAGRAM):   END;
244742    +        END;
MPRINT(EM_DIAGRAM):   END;
244743    +      END;
MPRINT(EM_DIAGRAM):   END;
244744    +    END;
MPRINT(EM_DIAGRAM):   END;
244745    +  END;
MPRINT(EM_DIAGRAM):   END;
244746    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244747    +  IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244748    +    RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <      0.3183909236815 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.3183909236815 THEN DO;
244749    +    IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244750    +          0.09312695012822 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.09312695012822 <= RANGE_LOG_Total_Trans_Amt THEN DO;
244751    +      _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
244752    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244753    +      IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
244754    +        _NODE_  =                   18;
MPRINT(EM_DIAGRAM):   _NODE_ = 18;
244755    +        _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
244756    +        P_Attrition_Flag0  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.13333333333333;
244757    +        P_Attrition_Flag1  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.86666666666666;
244758    +        Q_Attrition_Flag0  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.13333333333333;
244759    +        Q_Attrition_Flag1  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.86666666666666;
244760    +        V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
244761    +        V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
244762    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244763    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244764    +        END;
MPRINT(EM_DIAGRAM):   END;
244765    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244766    +        _NODE_  =                   19;
MPRINT(EM_DIAGRAM):   _NODE_ = 19;
244767    +        _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
244768    +        P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
244769    +        P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
244770    +        Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
244771    +        Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
244772    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
244773    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
244774    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244775    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244776    +        END;
MPRINT(EM_DIAGRAM):   END;
244777    +      END;
MPRINT(EM_DIAGRAM):   END;
244778    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244779    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244780    +        RANGE_LOG_Total_Trans_Amt  <     0.04063848760383 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.04063848760383 THEN DO;
244781    +        _NODE_  =                   16;
MPRINT(EM_DIAGRAM):   _NODE_ = 16;
244782    +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
244783    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
244784    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
244785    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
244786    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
244787    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
244788    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
244789    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244790    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244791    +        END;
MPRINT(EM_DIAGRAM):   END;
244792    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244793    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
244794    +              0.95053635280095 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.95053635280095 <= RANGE_Total_Revolving_Bal THEN DO;
244795    +          _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
244796    +          _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
244797    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
244798    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
244799    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
244800    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
244801    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
244802    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
244803    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244804    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244805    +          END;
MPRINT(EM_DIAGRAM):   END;
244806    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244807    +          IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
244808    +            RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.30399187060514 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.30399187060514 THEN DO;
244809    +            _NODE_  =                   58;
MPRINT(EM_DIAGRAM):   _NODE_ = 58;
244810    +            _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
244811    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
244812    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
244813    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
244814    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
244815    +            V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
244816    +            V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
244817    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244818    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244819    +            END;
MPRINT(EM_DIAGRAM):   END;
244820    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244821    +            _NODE_  =                   59;
MPRINT(EM_DIAGRAM):   _NODE_ = 59;
244822    +            _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
244823    +            P_Attrition_Flag0  =     0.87692307692307;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.87692307692307;
244824    +            P_Attrition_Flag1  =     0.12307692307692;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.12307692307692;
244825    +            Q_Attrition_Flag0  =     0.87692307692307;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.87692307692307;
244826    +            Q_Attrition_Flag1  =     0.12307692307692;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.12307692307692;
244827    +            V_Attrition_Flag0  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.73333333333333;
244828    +            V_Attrition_Flag1  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.26666666666666;
244829    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244830    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244831    +            END;
MPRINT(EM_DIAGRAM):   END;
244832    +          END;
MPRINT(EM_DIAGRAM):   END;
244833    +        END;
MPRINT(EM_DIAGRAM):   END;
244834    +      END;
MPRINT(EM_DIAGRAM):   END;
244835    +    END;
MPRINT(EM_DIAGRAM):   END;
244836    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244837    +    IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
244838    +      RANGE_Total_Revolving_Bal  <     0.22804926499801 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.22804926499801 THEN DO;
244839    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244840    +            0.34801787120737 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.34801787120737 <= RANGE_LOG_Total_Trans_Amt THEN DO;
244841    +        _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
244842    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244843    +        IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
244844    +          _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
244845    +          _LEAF_  =                   19;
MPRINT(EM_DIAGRAM):   _LEAF_ = 19;
244846    +          P_Attrition_Flag0  =     0.01492537313432;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.01492537313432;
244847    +          P_Attrition_Flag1  =     0.98507462686567;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.98507462686567;
244848    +          Q_Attrition_Flag0  =     0.01492537313432;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.01492537313432;
244849    +          Q_Attrition_Flag1  =     0.98507462686567;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.98507462686567;
244850    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
244851    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
244852    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244853    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244854    +          END;
MPRINT(EM_DIAGRAM):   END;
244855    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244856    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244857    +                0.68728789103993 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.68728789103993 <= RANGE_LOG_Total_Trans_Amt THEN DO;
244858    +            _NODE_  =                   67;
MPRINT(EM_DIAGRAM):   _NODE_ = 67;
244859    +            _LEAF_  =                   18;
MPRINT(EM_DIAGRAM):   _LEAF_ = 18;
244860    +            P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
244861    +            P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
244862    +            Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
244863    +            Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
244864    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
244865    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
244866    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244867    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244868    +            END;
MPRINT(EM_DIAGRAM):   END;
244869    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244870    +            IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244871    +              RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.43258488457259 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.43258488457259 THEN DO;
244872    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
244873    +                    0.50504321182854 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
244874    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.50504321182854 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
244875    +                _NODE_  =                  161;
MPRINT(EM_DIAGRAM):   _NODE_ = 161;
244876    +                _LEAF_  =                   16;
MPRINT(EM_DIAGRAM):   _LEAF_ = 16;
244877    +                P_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.42857142857142;
244878    +                P_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.57142857142857;
244879    +                Q_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.42857142857142;
244880    +                Q_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.57142857142857;
244881    +                V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
244882    +                V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
244883    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244884    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244885    +                END;
MPRINT(EM_DIAGRAM):   END;
244886    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244887    +                _NODE_  =                  160;
MPRINT(EM_DIAGRAM):   _NODE_ = 160;
244888    +                _LEAF_  =                   15;
MPRINT(EM_DIAGRAM):   _LEAF_ = 15;
244889    +                P_Attrition_Flag0  =     0.96551724137931;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96551724137931;
244890    +                P_Attrition_Flag1  =     0.03448275862068;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.03448275862068;
244891    +                Q_Attrition_Flag0  =     0.96551724137931;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96551724137931;
244892    +                Q_Attrition_Flag1  =     0.03448275862068;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.03448275862068;
244893    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
244894    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
244895    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244896    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244897    +                END;
MPRINT(EM_DIAGRAM):   END;
244898    +              END;
MPRINT(EM_DIAGRAM):   END;
244899    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244900    +              _NODE_  =                  109;
MPRINT(EM_DIAGRAM):   _NODE_ = 109;
244901    +              _LEAF_  =                   17;
MPRINT(EM_DIAGRAM):   _LEAF_ = 17;
244902    +              P_Attrition_Flag0  =     0.26086956521739;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26086956521739;
244903    +              P_Attrition_Flag1  =      0.7391304347826;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.7391304347826;
244904    +              Q_Attrition_Flag0  =     0.26086956521739;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26086956521739;
244905    +              Q_Attrition_Flag1  =      0.7391304347826;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.7391304347826;
244906    +              V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
244907    +              V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
244908    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244909    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244910    +              END;
MPRINT(EM_DIAGRAM):   END;
244911    +            END;
MPRINT(EM_DIAGRAM):   END;
244912    +          END;
MPRINT(EM_DIAGRAM):   END;
244913    +        END;
MPRINT(EM_DIAGRAM):   END;
244914    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244915    +        _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
244916    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244917    +        IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
244918    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
244919    +            RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39278572866989 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39278572866989 THEN DO;
244920    +            _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
244921    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244922    +            IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
244923    +              _NODE_  =                  105;
MPRINT(EM_DIAGRAM):   _NODE_ = 105;
244924    +              _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
244925    +              P_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.7;
244926    +              P_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.3;
244927    +              Q_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.7;
244928    +              Q_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.3;
244929    +              V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
244930    +              V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
244931    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244932    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244933    +              END;
MPRINT(EM_DIAGRAM):   END;
244934    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244935    +              _NODE_  =                  104;
MPRINT(EM_DIAGRAM):   _NODE_ = 104;
244936    +              _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
244937    +              P_Attrition_Flag0  =     0.17073170731707;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.17073170731707;
244938    +              P_Attrition_Flag1  =     0.82926829268292;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.82926829268292;
244939    +              Q_Attrition_Flag0  =     0.17073170731707;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.17073170731707;
244940    +              Q_Attrition_Flag1  =     0.82926829268292;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.82926829268292;
244941    +              V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
244942    +              V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
244943    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244944    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244945    +              END;
MPRINT(EM_DIAGRAM):   END;
244946    +            END;
MPRINT(EM_DIAGRAM):   END;
244947    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244948    +            _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
244949    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
244950    +            IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
244951    +              _NODE_  =                  106;
MPRINT(EM_DIAGRAM):   _NODE_ = 106;
244952    +              _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
244953    +              P_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26666666666666;
244954    +              P_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.73333333333333;
244955    +              Q_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26666666666666;
244956    +              Q_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.73333333333333;
244957    +              V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
244958    +              V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
244959    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
244960    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
244961    +              END;
MPRINT(EM_DIAGRAM):   END;
244962    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244963    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244964    +                    0.19694236549537 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.19694236549537 <= RANGE_LOG_Total_Trans_Amt THEN DO;
244965    +                _NODE_  =                  159;
MPRINT(EM_DIAGRAM):   _NODE_ = 159;
244966    +                _LEAF_  =                   14;
MPRINT(EM_DIAGRAM):   _LEAF_ = 14;
244967    +                P_Attrition_Flag0  =                0.975;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.975;
244968    +                P_Attrition_Flag1  =                0.025;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.025;
244969    +                Q_Attrition_Flag0  =                0.975;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.975;
244970    +                Q_Attrition_Flag1  =                0.025;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.025;
244971    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
244972    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
244973    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244974    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244975    +                END;
MPRINT(EM_DIAGRAM):   END;
244976    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244977    +                IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
244978    +                      0.11578300596794 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11578300596794 <= RANGE_LOG_Total_Trans_Amt THEN DO;
244979    +                  IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
244980    +                        0.51285981573527 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
244981    +                       THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.51285981573527 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
244982    +                    _NODE_  =                  279;
MPRINT(EM_DIAGRAM):   _NODE_ = 279;
244983    +                    _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
244984    +                    P_Attrition_Flag0  =                  0.9;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.9;
244985    +                    P_Attrition_Flag1  =                  0.1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1;
244986    +                    Q_Attrition_Flag0  =                  0.9;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.9;
244987    +                    Q_Attrition_Flag1  =                  0.1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1;
244988    +                    V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
244989    +                    V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
244990    +                    I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
244991    +                    U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
244992    +                    END;
MPRINT(EM_DIAGRAM):   END;
244993    +                  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
244994    +                    _NODE_  =                  278;
MPRINT(EM_DIAGRAM):   _NODE_ = 278;
244995    +                    _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
244996    +                    P_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.28571428571428;
244997    +                    P_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.71428571428571;
244998    +                    Q_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.28571428571428;
244999    +                    Q_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.71428571428571;
245000    +                    V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
245001    +                    V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
245002    +                    I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245003    +                    U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245004    +                    END;
MPRINT(EM_DIAGRAM):   END;
245005    +                  END;
MPRINT(EM_DIAGRAM):   END;
245006    +                ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245007    +                  _NODE_  =                  212;
MPRINT(EM_DIAGRAM):   _NODE_ = 212;
245008    +                  _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
245009    +                  P_Attrition_Flag0  =     0.90566037735849;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.90566037735849;
245010    +                  P_Attrition_Flag1  =      0.0943396226415;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.0943396226415;
245011    +                  Q_Attrition_Flag0  =     0.90566037735849;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.90566037735849;
245012    +                  Q_Attrition_Flag1  =      0.0943396226415;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.0943396226415;
245013    +                  V_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.92307692307692;
245014    +                  V_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.07692307692307;
245015    +                  I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245016    +                  U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245017    +                  END;
MPRINT(EM_DIAGRAM):   END;
245018    +                END;
MPRINT(EM_DIAGRAM):   END;
245019    +              END;
MPRINT(EM_DIAGRAM):   END;
245020    +            END;
MPRINT(EM_DIAGRAM):   END;
245021    +          END;
MPRINT(EM_DIAGRAM):   END;
245022    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245023    +          _NODE_  =                   36;
MPRINT(EM_DIAGRAM):   _NODE_ = 36;
245024    +          _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
245025    +          P_Attrition_Flag0  =     0.98959687906371;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.98959687906371;
245026    +          P_Attrition_Flag1  =     0.01040312093628;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.01040312093628;
245027    +          Q_Attrition_Flag0  =     0.98959687906371;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.98959687906371;
245028    +          Q_Attrition_Flag1  =     0.01040312093628;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.01040312093628;
245029    +          V_Attrition_Flag0  =     0.97630331753554;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.97630331753554;
245030    +          V_Attrition_Flag1  =     0.02369668246445;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.02369668246445;
245031    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245032    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245033    +          END;
MPRINT(EM_DIAGRAM):   END;
245034    +        END;
MPRINT(EM_DIAGRAM):   END;
245035    +      END;
MPRINT(EM_DIAGRAM):   END;
245036    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245037    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245038    +        RANGE_LOG_Total_Trans_Amt  <     0.03340216054825 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03340216054825 THEN DO;
245039    +        _NODE_  =                   22;
MPRINT(EM_DIAGRAM):   _NODE_ = 22;
245040    +        _LEAF_  =                   20;
MPRINT(EM_DIAGRAM):   _LEAF_ = 20;
245041    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
245042    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
245043    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
245044    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
245045    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245046    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245047    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245048    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245049    +        END;
MPRINT(EM_DIAGRAM):   END;
245050    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245051    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
245052    +              0.99940405244338 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.99940405244338 <= RANGE_Total_Revolving_Bal THEN DO;
245053    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245054    +            RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.36248390962168 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.36248390962168 THEN DO;
245055    +            _NODE_  =                   72;
MPRINT(EM_DIAGRAM):   _NODE_ = 72;
245056    +            _LEAF_  =                   28;
MPRINT(EM_DIAGRAM):   _LEAF_ = 28;
245057    +            P_Attrition_Flag0  =     0.27272727272727;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.27272727272727;
245058    +            P_Attrition_Flag1  =     0.72727272727272;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.72727272727272;
245059    +            Q_Attrition_Flag0  =     0.27272727272727;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.27272727272727;
245060    +            Q_Attrition_Flag1  =     0.72727272727272;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.72727272727272;
245061    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245062    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245063    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245064    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245065    +            END;
MPRINT(EM_DIAGRAM):   END;
245066    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245067    +            IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245068    +                   0.5078915992207 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.5078915992207 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245069    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245070    +                RANGE_LOG_Total_Trans_Amt  <     0.69408037642344 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.69408037642344 THEN DO;
245071    +                _NODE_  =                  174;
MPRINT(EM_DIAGRAM):   _NODE_ = 174;
245072    +                _LEAF_  =                   30;
MPRINT(EM_DIAGRAM):   _LEAF_ = 30;
245073    +                P_Attrition_Flag0  =     0.31818181818181;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.31818181818181;
245074    +                P_Attrition_Flag1  =     0.68181818181818;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.68181818181818;
245075    +                Q_Attrition_Flag0  =     0.31818181818181;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.31818181818181;
245076    +                Q_Attrition_Flag1  =     0.68181818181818;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.68181818181818;
245077    +                V_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16666666666666;
245078    +                V_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83333333333333;
245079    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245080    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245081    +                END;
MPRINT(EM_DIAGRAM):   END;
245082    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245083    +                _NODE_  =                  175;
MPRINT(EM_DIAGRAM):   _NODE_ = 175;
245084    +                _LEAF_  =                   31;
MPRINT(EM_DIAGRAM):   _LEAF_ = 31;
245085    +                P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
245086    +                P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
245087    +                Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
245088    +                Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
245089    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245090    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245091    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245092    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245093    +                END;
MPRINT(EM_DIAGRAM):   END;
245094    +              END;
MPRINT(EM_DIAGRAM):   END;
245095    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245096    +              _NODE_  =                  116;
MPRINT(EM_DIAGRAM):   _NODE_ = 116;
245097    +              _LEAF_  =                   29;
MPRINT(EM_DIAGRAM):   _LEAF_ = 29;
245098    +              P_Attrition_Flag0  =     0.94267515923566;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.94267515923566;
245099    +              P_Attrition_Flag1  =     0.05732484076433;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.05732484076433;
245100    +              Q_Attrition_Flag0  =     0.94267515923566;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.94267515923566;
245101    +              Q_Attrition_Flag1  =     0.05732484076433;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.05732484076433;
245102    +              V_Attrition_Flag0  =               0.9375;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.9375;
245103    +              V_Attrition_Flag1  =               0.0625;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.0625;
245104    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245105    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245106    +              END;
MPRINT(EM_DIAGRAM):   END;
245107    +            END;
MPRINT(EM_DIAGRAM):   END;
245108    +          END;
MPRINT(EM_DIAGRAM):   END;
245109    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245110    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245111    +                0.34036717463282 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.34036717463282 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245112    +            _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
245113    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245114    +            IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
245115    +              _NODE_  =                  112;
MPRINT(EM_DIAGRAM):   _NODE_ = 112;
245116    +              _LEAF_  =                   25;
MPRINT(EM_DIAGRAM):   _LEAF_ = 25;
245117    +              P_Attrition_Flag0  =     0.97766097240473;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.97766097240473;
245118    +              P_Attrition_Flag1  =     0.02233902759526;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.02233902759526;
245119    +              Q_Attrition_Flag0  =     0.97766097240473;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.97766097240473;
245120    +              Q_Attrition_Flag1  =     0.02233902759526;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.02233902759526;
245121    +              V_Attrition_Flag0  =     0.99528301886792;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99528301886792;
245122    +              V_Attrition_Flag1  =     0.00471698113207;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00471698113207;
245123    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245124    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245125    +              END;
MPRINT(EM_DIAGRAM):   END;
245126    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245127    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245128    +                RANGE_LOG_Total_Trans_Amt  <     0.39467030301083 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.39467030301083 THEN DO;
245129    +                _NODE_  =                  170;
MPRINT(EM_DIAGRAM):   _NODE_ = 170;
245130    +                _LEAF_  =                   26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 26;
245131    +                P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
245132    +                P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
245133    +                Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
245134    +                Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
245135    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245136    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245137    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245138    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245139    +                END;
MPRINT(EM_DIAGRAM):   END;
245140    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245141    +                _NODE_  =                  171;
MPRINT(EM_DIAGRAM):   _NODE_ = 171;
245142    +                _LEAF_  =                   27;
MPRINT(EM_DIAGRAM):   _LEAF_ = 27;
245143    +                P_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.21428571428571;
245144    +                P_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.78571428571428;
245145    +                Q_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.21428571428571;
245146    +                Q_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.78571428571428;
245147    +                V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
245148    +                V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
245149    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245150    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245151    +                END;
MPRINT(EM_DIAGRAM):   END;
245152    +              END;
MPRINT(EM_DIAGRAM):   END;
245153    +            END;
MPRINT(EM_DIAGRAM):   END;
245154    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245155    +            IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245156    +              RANGE_LOG_Total_Trans_Amt  <     0.17794703865872 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.17794703865872 THEN DO;
245157    +              _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
245158    +               %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245159    +              IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
245160    +                IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245161    +                      0.08908868992172 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.08908868992172 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245162    +                  _NODE_  =                  223;
MPRINT(EM_DIAGRAM):   _NODE_ = 223;
245163    +                  _LEAF_  =                   22;
MPRINT(EM_DIAGRAM):   _LEAF_ = 22;
245164    +                  P_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.14285714285714;
245165    +                  P_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.85714285714285;
245166    +                  Q_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.14285714285714;
245167    +                  Q_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.85714285714285;
245168    +                  V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245169    +                  V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245170    +                  I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245171    +                  U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245172    +                  END;
MPRINT(EM_DIAGRAM):   END;
245173    +                ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245174    +                  _NODE_  =                  222;
MPRINT(EM_DIAGRAM):   _NODE_ = 222;
245175    +                  _LEAF_  =                   21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 21;
245176    +                  P_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92307692307692;
245177    +                  P_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.07692307692307;
245178    +                  Q_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92307692307692;
245179    +                  Q_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.07692307692307;
245180    +                  V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245181    +                  V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245182    +                  I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245183    +                  U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245184    +                  END;
MPRINT(EM_DIAGRAM):   END;
245185    +                END;
MPRINT(EM_DIAGRAM):   END;
245186    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245187    +                _NODE_  =                  165;
MPRINT(EM_DIAGRAM):   _NODE_ = 165;
245188    +                _LEAF_  =                   23;
MPRINT(EM_DIAGRAM):   _LEAF_ = 23;
245189    +                P_Attrition_Flag0  =     0.96840442338072;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96840442338072;
245190    +                P_Attrition_Flag1  =     0.03159557661927;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.03159557661927;
245191    +                Q_Attrition_Flag0  =     0.96840442338072;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96840442338072;
245192    +                Q_Attrition_Flag1  =     0.03159557661927;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.03159557661927;
245193    +                V_Attrition_Flag0  =     0.97382198952879;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.97382198952879;
245194    +                V_Attrition_Flag1  =      0.0261780104712;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.0261780104712;
245195    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245196    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245197    +                END;
MPRINT(EM_DIAGRAM):   END;
245198    +              END;
MPRINT(EM_DIAGRAM):   END;
245199    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245200    +              _NODE_  =                  111;
MPRINT(EM_DIAGRAM):   _NODE_ = 111;
245201    +              _LEAF_  =                   24;
MPRINT(EM_DIAGRAM):   _LEAF_ = 24;
245202    +              P_Attrition_Flag0  =     0.99786233433091;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.99786233433091;
245203    +              P_Attrition_Flag1  =     0.00213766566908;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.00213766566908;
245204    +              Q_Attrition_Flag0  =     0.99786233433091;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.99786233433091;
245205    +              Q_Attrition_Flag1  =     0.00213766566908;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.00213766566908;
245206    +              V_Attrition_Flag0  =     0.99698340874811;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99698340874811;
245207    +              V_Attrition_Flag1  =     0.00301659125188;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00301659125188;
245208    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245209    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245210    +              END;
MPRINT(EM_DIAGRAM):   END;
245211    +            END;
MPRINT(EM_DIAGRAM):   END;
245212    +          END;
MPRINT(EM_DIAGRAM):   END;
245213    +        END;
MPRINT(EM_DIAGRAM):   END;
245214    +      END;
MPRINT(EM_DIAGRAM):   END;
245215    +    END;
MPRINT(EM_DIAGRAM):   END;
245216    +  END;
MPRINT(EM_DIAGRAM):   END;
245217    +
245218    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
245219    +IF  F_Attrition_Flag  NE '0'
245220    +AND F_Attrition_Flag  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Attrition_Flag NE '0' AND F_Attrition_Flag NE '1' THEN DO;
245221    +        R_Attrition_Flag0  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = .;
245222    +        R_Attrition_Flag1  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = .;
245223    + END;
MPRINT(EM_DIAGRAM):   END;
245224    + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245225    +       R_Attrition_Flag0  =  -P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = -P_Attrition_Flag0 ;
245226    +       R_Attrition_Flag1  =  -P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = -P_Attrition_Flag1 ;
245227    +       SELECT( F_Attrition_Flag  );
MPRINT(EM_DIAGRAM):   SELECT( F_Attrition_Flag );
245228    +          WHEN( '0'  ) R_Attrition_Flag0  = R_Attrition_Flag0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_Attrition_Flag0 = R_Attrition_Flag0 +1;
245229    +          WHEN( '1'  ) R_Attrition_Flag1  = R_Attrition_Flag1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_Attrition_Flag1 = R_Attrition_Flag1 +1;
245230    +       END;
MPRINT(EM_DIAGRAM):   END;
245231    + END;
MPRINT(EM_DIAGRAM):   END;
245232    +
245233    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
245234    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
245235    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
245236    +
245237    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
245238     run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
245239     quit;
245240     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
245241     filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
245242     *------------------------------------------------------------*;
245243     * Tree4: Scoring VALIDATE data;
245244     *------------------------------------------------------------*;
245245     data EMWS1.Tree4_VALIDATE
245246     / view=EMWS1.Tree4_VALIDATE
245247     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_VALIDATE / view=EMWS1.Tree4_VALIDATE ;
245248     set EMWS1.Part2_VALIDATE
245249     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part2_VALIDATE ;
245250     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
245251    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
245252    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
245253    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
245254    +
245255    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
245256    +LENGTH F_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH F_Attrition_Flag $ 17;
245257    +LENGTH I_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH I_Attrition_Flag $ 17;
245258    +LENGTH U_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH U_Attrition_Flag $ 17;
245259    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
245260    +
245261    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
245262    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
245263    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
245264    +label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
245265    +label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
245266    +label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
245267    +label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
245268    +label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
245269    +label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
245270    +label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
245271    +label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
245272    +label F_Attrition_Flag = 'From: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label F_Attrition_Flag = 'From: Attrition_Flag' ;
245273    +label I_Attrition_Flag = 'Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label I_Attrition_Flag = 'Into: Attrition_Flag' ;
245274    +label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
245275    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
245276    +
245277    +
245278    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
245279    +LENGTH _ARBFMT_17 $     17; DROP _ARBFMT_17;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_17 $ 17;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_17;
245280    +_ARBFMT_17 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = ' ';
245281    +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
245282    +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
245283    +
245284    +
245285    +_ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
245286    + %DMNORMCP( _ARBFMT_17, F_Attrition_Flag );
MPRINT(DMNORMCP):   F_Attrition_Flag=dmnorm(_ARBFMT_17,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
245287    +
245288    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
245289    +_ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
245290    + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245291    +IF _ARBFMT_12 IN ('1' ,'3' ,'4' ,'2' ,'0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'3' ,'4' ,'2' ,'0' ) THEN DO;
245292    +  IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
245293    +    RANGE_Total_Revolving_Bal  <     0.24215335717123 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.24215335717123 THEN DO;
245294    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245295    +          0.45221286754555 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45221286754555 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
245296    +      _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
245297    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245298    +      IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
245299    +        _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
245300    +        _LEAF_  =                   38;
MPRINT(EM_DIAGRAM):   _LEAF_ = 38;
245301    +        P_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05555555555555;
245302    +        P_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94444444444444;
245303    +        Q_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05555555555555;
245304    +        Q_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94444444444444;
245305    +        V_Attrition_Flag0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.11111111111111;
245306    +        V_Attrition_Flag1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.88888888888888;
245307    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245308    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245309    +        END;
MPRINT(EM_DIAGRAM):   END;
245310    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245311    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
245312    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.43199033198472 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.43199033198472 THEN DO;
245313    +          _NODE_  =                   48;
MPRINT(EM_DIAGRAM):   _NODE_ = 48;
245314    +          _LEAF_  =                   39;
MPRINT(EM_DIAGRAM):   _LEAF_ = 39;
245315    +          P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
245316    +          P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
245317    +          Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
245318    +          Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
245319    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
245320    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
245321    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245322    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245323    +          END;
MPRINT(EM_DIAGRAM):   END;
245324    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245325    +          _NODE_  =                   49;
MPRINT(EM_DIAGRAM):   _NODE_ = 49;
245326    +          _LEAF_  =                   40;
MPRINT(EM_DIAGRAM):   _LEAF_ = 40;
245327    +          P_Attrition_Flag0  =               0.8125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8125;
245328    +          P_Attrition_Flag1  =               0.1875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1875;
245329    +          Q_Attrition_Flag0  =               0.8125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8125;
245330    +          Q_Attrition_Flag1  =               0.1875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1875;
245331    +          V_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.8;
245332    +          V_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.2;
245333    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245334    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245335    +          END;
MPRINT(EM_DIAGRAM):   END;
245336    +        END;
MPRINT(EM_DIAGRAM):   END;
245337    +      END;
MPRINT(EM_DIAGRAM):   END;
245338    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245339    +      _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
245340    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245341    +      IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
245342    +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
245343    +        _LEAF_  =                   32;
MPRINT(EM_DIAGRAM):   _LEAF_ = 32;
245344    +        P_Attrition_Flag0  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.54;
245345    +        P_Attrition_Flag1  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.46;
245346    +        Q_Attrition_Flag0  =                 0.54;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.54;
245347    +        Q_Attrition_Flag1  =                 0.46;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.46;
245348    +        V_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.83333333333333;
245349    +        V_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.16666666666666;
245350    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245351    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245352    +        END;
MPRINT(EM_DIAGRAM):   END;
245353    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245354    +        _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
245355    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245356    +        IF _ARBFMT_12 IN ('9' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ) THEN DO;
245357    +          _NODE_  =                   44;
MPRINT(EM_DIAGRAM):   _NODE_ = 44;
245358    +          _LEAF_  =                   33;
MPRINT(EM_DIAGRAM):   _LEAF_ = 33;
245359    +          P_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.75;
245360    +          P_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.25;
245361    +          Q_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.75;
245362    +          Q_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.25;
245363    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245364    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245365    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245366    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245367    +          END;
MPRINT(EM_DIAGRAM):   END;
245368    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245369    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245370    +            RANGE_LOG_Total_Trans_Amt  <     0.10455689918435 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.10455689918435 THEN DO;
245371    +            _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
245372    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245373    +            IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ) THEN DO;
245374    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
245375    +                    0.43956355842133 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
245376    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43956355842133 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
245377    +                _NODE_  =                  181;
MPRINT(EM_DIAGRAM):   _NODE_ = 181;
245378    +                _LEAF_  =                   36;
MPRINT(EM_DIAGRAM):   _LEAF_ = 36;
245379    +                P_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.77777777777777;
245380    +                P_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.22222222222222;
245381    +                Q_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.77777777777777;
245382    +                Q_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.22222222222222;
245383    +                V_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88888888888888;
245384    +                V_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11111111111111;
245385    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245386    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245387    +                END;
MPRINT(EM_DIAGRAM):   END;
245388    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245389    +                _NODE_  =                  180;
MPRINT(EM_DIAGRAM):   _NODE_ = 180;
245390    +                _LEAF_  =                   35;
MPRINT(EM_DIAGRAM):   _LEAF_ = 35;
245391    +                P_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26666666666666;
245392    +                P_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.73333333333333;
245393    +                Q_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26666666666666;
245394    +                Q_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.73333333333333;
245395    +                V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
245396    +                V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
245397    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245398    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245399    +                END;
MPRINT(EM_DIAGRAM):   END;
245400    +              END;
MPRINT(EM_DIAGRAM):   END;
245401    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245402    +              _NODE_  =                  120;
MPRINT(EM_DIAGRAM):   _NODE_ = 120;
245403    +              _LEAF_  =                   34;
MPRINT(EM_DIAGRAM):   _LEAF_ = 34;
245404    +              P_Attrition_Flag0  =      0.1081081081081;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.1081081081081;
245405    +              P_Attrition_Flag1  =     0.89189189189189;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.89189189189189;
245406    +              Q_Attrition_Flag0  =      0.1081081081081;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.1081081081081;
245407    +              Q_Attrition_Flag1  =     0.89189189189189;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.89189189189189;
245408    +              V_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16666666666666;
245409    +              V_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83333333333333;
245410    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245411    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245412    +              END;
MPRINT(EM_DIAGRAM):   END;
245413    +            END;
MPRINT(EM_DIAGRAM):   END;
245414    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245415    +            _NODE_  =                   81;
MPRINT(EM_DIAGRAM):   _NODE_ = 81;
245416    +            _LEAF_  =                   37;
MPRINT(EM_DIAGRAM):   _LEAF_ = 37;
245417    +            P_Attrition_Flag0  =      0.0360110803324;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.0360110803324;
245418    +            P_Attrition_Flag1  =     0.96398891966759;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.96398891966759;
245419    +            Q_Attrition_Flag0  =      0.0360110803324;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.0360110803324;
245420    +            Q_Attrition_Flag1  =     0.96398891966759;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.96398891966759;
245421    +            V_Attrition_Flag0  =     0.05882352941176;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.05882352941176;
245422    +            V_Attrition_Flag1  =     0.94117647058823;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.94117647058823;
245423    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245424    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245425    +            END;
MPRINT(EM_DIAGRAM):   END;
245426    +          END;
MPRINT(EM_DIAGRAM):   END;
245427    +        END;
MPRINT(EM_DIAGRAM):   END;
245428    +      END;
MPRINT(EM_DIAGRAM):   END;
245429    +    END;
MPRINT(EM_DIAGRAM):   END;
245430    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245431    +    _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
245432    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245433    +    IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
245434    +      _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
245435    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245436    +      IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
245437    +        _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
245438    +        _LEAF_  =                   44;
MPRINT(EM_DIAGRAM):   _LEAF_ = 44;
245439    +        P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
245440    +        P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
245441    +        Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
245442    +        Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
245443    +        V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
245444    +        V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
245445    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245446    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245447    +        END;
MPRINT(EM_DIAGRAM):   END;
245448    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245449    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245450    +              0.43753508527028 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.43753508527028 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
245451    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245452    +            RANGE_LOG_Total_Trans_Amt  <     0.12518504649037 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.12518504649037 THEN DO;
245453    +            _NODE_  =                   88;
MPRINT(EM_DIAGRAM):   _NODE_ = 88;
245454    +            _LEAF_  =                   42;
MPRINT(EM_DIAGRAM):   _LEAF_ = 42;
245455    +            P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
245456    +            P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
245457    +            Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
245458    +            Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
245459    +            V_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.6;
245460    +            V_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.4;
245461    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245462    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245463    +            END;
MPRINT(EM_DIAGRAM):   END;
245464    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245465    +            _NODE_  =                   89;
MPRINT(EM_DIAGRAM):   _NODE_ = 89;
245466    +            _LEAF_  =                   43;
MPRINT(EM_DIAGRAM):   _LEAF_ = 43;
245467    +            P_Attrition_Flag0  =     0.23529411764705;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.23529411764705;
245468    +            P_Attrition_Flag1  =     0.76470588235294;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.76470588235294;
245469    +            Q_Attrition_Flag0  =     0.23529411764705;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.23529411764705;
245470    +            Q_Attrition_Flag1  =     0.76470588235294;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.76470588235294;
245471    +            V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
245472    +            V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
245473    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245474    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245475    +            END;
MPRINT(EM_DIAGRAM):   END;
245476    +          END;
MPRINT(EM_DIAGRAM):   END;
245477    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245478    +          _NODE_  =                   50;
MPRINT(EM_DIAGRAM):   _NODE_ = 50;
245479    +          _LEAF_  =                   41;
MPRINT(EM_DIAGRAM):   _LEAF_ = 41;
245480    +          P_Attrition_Flag0  =     0.04477611940298;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.04477611940298;
245481    +          P_Attrition_Flag1  =     0.95522388059701;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.95522388059701;
245482    +          Q_Attrition_Flag0  =     0.04477611940298;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.04477611940298;
245483    +          Q_Attrition_Flag1  =     0.95522388059701;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.95522388059701;
245484    +          V_Attrition_Flag0  =                 0.04;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.04;
245485    +          V_Attrition_Flag1  =                 0.96;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.96;
245486    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245487    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245488    +          END;
MPRINT(EM_DIAGRAM):   END;
245489    +        END;
MPRINT(EM_DIAGRAM):   END;
245490    +      END;
MPRINT(EM_DIAGRAM):   END;
245491    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245492    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245493    +            0.11922630474959 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11922630474959 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245494    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245495    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.41234945173394 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.41234945173394 THEN DO;
245496    +          _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
245497    +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245498    +          IF _ARBFMT_12 IN ('9' ,'8' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ,'8' ) THEN DO;
245499    +            _NODE_  =                   94;
MPRINT(EM_DIAGRAM):   _NODE_ = 94;
245500    +            _LEAF_  =                   47;
MPRINT(EM_DIAGRAM):   _LEAF_ = 47;
245501    +            P_Attrition_Flag0  =                 0.85;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85;
245502    +            P_Attrition_Flag1  =                 0.15;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.15;
245503    +            Q_Attrition_Flag0  =                 0.85;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85;
245504    +            Q_Attrition_Flag1  =                 0.15;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.15;
245505    +            V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
245506    +            V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
245507    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245508    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245509    +            END;
MPRINT(EM_DIAGRAM):   END;
245510    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245511    +            IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
245512    +              RANGE_SQRT_Avg_Utilization_Ratio
245513    +                 <     0.54890616290935 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.54890616290935 THEN DO;
245514    +              IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245515    +                    0.38951475728176 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1
245516    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.38951475728176 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
245517    +                _NODE_  =                  197;
MPRINT(EM_DIAGRAM):   _NODE_ = 197;
245518    +                _LEAF_  =                   49;
MPRINT(EM_DIAGRAM):   _LEAF_ = 49;
245519    +                P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
245520    +                P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
245521    +                Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
245522    +                Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
245523    +                V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
245524    +                V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
245525    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245526    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245527    +                END;
MPRINT(EM_DIAGRAM):   END;
245528    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245529    +                _NODE_  =                  196;
MPRINT(EM_DIAGRAM):   _NODE_ = 196;
245530    +                _LEAF_  =                   48;
MPRINT(EM_DIAGRAM):   _LEAF_ = 48;
245531    +                P_Attrition_Flag0  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.3;
245532    +                P_Attrition_Flag1  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.7;
245533    +                Q_Attrition_Flag0  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.3;
245534    +                Q_Attrition_Flag1  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.7;
245535    +                V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
245536    +                V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
245537    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245538    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245539    +                END;
MPRINT(EM_DIAGRAM):   END;
245540    +              END;
MPRINT(EM_DIAGRAM):   END;
245541    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245542    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
245543    +                    0.53282607355155 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
245544    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.53282607355155 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
245545    +                _NODE_  =                  199;
MPRINT(EM_DIAGRAM):   _NODE_ = 199;
245546    +                _LEAF_  =                   51;
MPRINT(EM_DIAGRAM):   _LEAF_ = 51;
245547    +                P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
245548    +                P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
245549    +                Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
245550    +                Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
245551    +                V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
245552    +                V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
245553    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245554    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245555    +                END;
MPRINT(EM_DIAGRAM):   END;
245556    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245557    +                _NODE_  =                  198;
MPRINT(EM_DIAGRAM):   _NODE_ = 198;
245558    +                _LEAF_  =                   50;
MPRINT(EM_DIAGRAM):   _LEAF_ = 50;
245559    +                P_Attrition_Flag0  =                0.075;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.075;
245560    +                P_Attrition_Flag1  =                0.925;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.925;
245561    +                Q_Attrition_Flag0  =                0.075;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.075;
245562    +                Q_Attrition_Flag1  =                0.925;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.925;
245563    +                V_Attrition_Flag0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.06666666666666;
245564    +                V_Attrition_Flag1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.93333333333333;
245565    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245566    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245567    +                END;
MPRINT(EM_DIAGRAM):   END;
245568    +              END;
MPRINT(EM_DIAGRAM):   END;
245569    +            END;
MPRINT(EM_DIAGRAM):   END;
245570    +          END;
MPRINT(EM_DIAGRAM):   END;
245571    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245572    +          IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
245573    +                0.99463647199046 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.99463647199046 <= RANGE_Total_Revolving_Bal THEN DO;
245574    +            IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245575    +                   0.4523299955855 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.4523299955855 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
245576    +              _NODE_  =                  145;
MPRINT(EM_DIAGRAM):   _NODE_ = 145;
245577    +              _LEAF_  =                   56;
MPRINT(EM_DIAGRAM):   _LEAF_ = 56;
245578    +              P_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.88888888888888;
245579    +              P_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.11111111111111;
245580    +              Q_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.88888888888888;
245581    +              Q_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.11111111111111;
245582    +              V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
245583    +              V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
245584    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245585    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245586    +              END;
MPRINT(EM_DIAGRAM):   END;
245587    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245588    +              _NODE_  =                  144;
MPRINT(EM_DIAGRAM):   _NODE_ = 144;
245589    +              _LEAF_  =                   55;
MPRINT(EM_DIAGRAM):   _LEAF_ = 55;
245590    +              P_Attrition_Flag0  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.18181818181818;
245591    +              P_Attrition_Flag1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.81818181818181;
245592    +              Q_Attrition_Flag0  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.18181818181818;
245593    +              Q_Attrition_Flag1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.81818181818181;
245594    +              V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245595    +              V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245596    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245597    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245598    +              END;
MPRINT(EM_DIAGRAM):   END;
245599    +            END;
MPRINT(EM_DIAGRAM):   END;
245600    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245601    +            IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
245602    +                  0.87422091928403 <= RANGE_SQRT_Avg_Utilization_Ratio
245603    +                 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.87422091928403 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
245604    +              IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245605    +                    0.45753335515667 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1
245606    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45753335515667 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
245607    +                _NODE_  =                  203;
MPRINT(EM_DIAGRAM):   _NODE_ = 203;
245608    +                _LEAF_  =                   54;
MPRINT(EM_DIAGRAM):   _LEAF_ = 54;
245609    +                P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
245610    +                P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
245611    +                Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
245612    +                Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
245613    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245614    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245615    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245616    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245617    +                END;
MPRINT(EM_DIAGRAM):   END;
245618    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245619    +                _NODE_  =                  202;
MPRINT(EM_DIAGRAM):   _NODE_ = 202;
245620    +                _LEAF_  =                   53;
MPRINT(EM_DIAGRAM):   _LEAF_ = 53;
245621    +                P_Attrition_Flag0  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.22222222222222;
245622    +                P_Attrition_Flag1  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.77777777777777;
245623    +                Q_Attrition_Flag0  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.22222222222222;
245624    +                Q_Attrition_Flag1  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.77777777777777;
245625    +                V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245626    +                V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245627    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245628    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245629    +                END;
MPRINT(EM_DIAGRAM):   END;
245630    +              END;
MPRINT(EM_DIAGRAM):   END;
245631    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245632    +              _NODE_  =                  142;
MPRINT(EM_DIAGRAM):   _NODE_ = 142;
245633    +              _LEAF_  =                   52;
MPRINT(EM_DIAGRAM):   _LEAF_ = 52;
245634    +              P_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92;
245635    +              P_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08;
245636    +              Q_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92;
245637    +              Q_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08;
245638    +              V_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.89361702127659;
245639    +              V_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.1063829787234;
245640    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245641    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245642    +              END;
MPRINT(EM_DIAGRAM):   END;
245643    +            END;
MPRINT(EM_DIAGRAM):   END;
245644    +          END;
MPRINT(EM_DIAGRAM):   END;
245645    +        END;
MPRINT(EM_DIAGRAM):   END;
245646    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245647    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245648    +          RANGE_LOG_Total_Trans_Amt  <     0.03539998717758 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03539998717758 THEN DO;
245649    +          _NODE_  =                   54;
MPRINT(EM_DIAGRAM):   _NODE_ = 54;
245650    +          _LEAF_  =                   45;
MPRINT(EM_DIAGRAM):   _LEAF_ = 45;
245651    +          P_Attrition_Flag0  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.09090909090909;
245652    +          P_Attrition_Flag1  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.9090909090909;
245653    +          Q_Attrition_Flag0  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.09090909090909;
245654    +          Q_Attrition_Flag1  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.9090909090909;
245655    +          V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
245656    +          V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
245657    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245658    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245659    +          END;
MPRINT(EM_DIAGRAM):   END;
245660    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245661    +          _NODE_  =                   55;
MPRINT(EM_DIAGRAM):   _NODE_ = 55;
245662    +          _LEAF_  =                   46;
MPRINT(EM_DIAGRAM):   _LEAF_ = 46;
245663    +          P_Attrition_Flag0  =     0.93779160186625;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93779160186625;
245664    +          P_Attrition_Flag1  =     0.06220839813374;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06220839813374;
245665    +          Q_Attrition_Flag0  =     0.93779160186625;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93779160186625;
245666    +          Q_Attrition_Flag1  =     0.06220839813374;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06220839813374;
245667    +          V_Attrition_Flag0  =     0.95555555555555;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.95555555555555;
245668    +          V_Attrition_Flag1  =     0.04444444444444;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.04444444444444;
245669    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245670    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245671    +          END;
MPRINT(EM_DIAGRAM):   END;
245672    +        END;
MPRINT(EM_DIAGRAM):   END;
245673    +      END;
MPRINT(EM_DIAGRAM):   END;
245674    +    END;
MPRINT(EM_DIAGRAM):   END;
245675    +  END;
MPRINT(EM_DIAGRAM):   END;
245676    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245677    +  IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245678    +    RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <      0.3183909236815 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.3183909236815 THEN DO;
245679    +    IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245680    +          0.09312695012822 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.09312695012822 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245681    +      _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
245682    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245683    +      IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
245684    +        _NODE_  =                   18;
MPRINT(EM_DIAGRAM):   _NODE_ = 18;
245685    +        _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
245686    +        P_Attrition_Flag0  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.13333333333333;
245687    +        P_Attrition_Flag1  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.86666666666666;
245688    +        Q_Attrition_Flag0  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.13333333333333;
245689    +        Q_Attrition_Flag1  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.86666666666666;
245690    +        V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
245691    +        V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
245692    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245693    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245694    +        END;
MPRINT(EM_DIAGRAM):   END;
245695    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245696    +        _NODE_  =                   19;
MPRINT(EM_DIAGRAM):   _NODE_ = 19;
245697    +        _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
245698    +        P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
245699    +        P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
245700    +        Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
245701    +        Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
245702    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245703    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245704    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245705    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245706    +        END;
MPRINT(EM_DIAGRAM):   END;
245707    +      END;
MPRINT(EM_DIAGRAM):   END;
245708    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245709    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245710    +        RANGE_LOG_Total_Trans_Amt  <     0.04063848760383 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.04063848760383 THEN DO;
245711    +        _NODE_  =                   16;
MPRINT(EM_DIAGRAM):   _NODE_ = 16;
245712    +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
245713    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
245714    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
245715    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
245716    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
245717    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245718    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245719    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245720    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245721    +        END;
MPRINT(EM_DIAGRAM):   END;
245722    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245723    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
245724    +              0.95053635280095 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.95053635280095 <= RANGE_Total_Revolving_Bal THEN DO;
245725    +          _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
245726    +          _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
245727    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
245728    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
245729    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
245730    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
245731    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245732    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245733    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245734    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245735    +          END;
MPRINT(EM_DIAGRAM):   END;
245736    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245737    +          IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
245738    +            RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.30399187060514 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.30399187060514 THEN DO;
245739    +            _NODE_  =                   58;
MPRINT(EM_DIAGRAM):   _NODE_ = 58;
245740    +            _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
245741    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
245742    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
245743    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
245744    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
245745    +            V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
245746    +            V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
245747    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245748    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245749    +            END;
MPRINT(EM_DIAGRAM):   END;
245750    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245751    +            _NODE_  =                   59;
MPRINT(EM_DIAGRAM):   _NODE_ = 59;
245752    +            _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
245753    +            P_Attrition_Flag0  =     0.87692307692307;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.87692307692307;
245754    +            P_Attrition_Flag1  =     0.12307692307692;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.12307692307692;
245755    +            Q_Attrition_Flag0  =     0.87692307692307;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.87692307692307;
245756    +            Q_Attrition_Flag1  =     0.12307692307692;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.12307692307692;
245757    +            V_Attrition_Flag0  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.73333333333333;
245758    +            V_Attrition_Flag1  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.26666666666666;
245759    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245760    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245761    +            END;
MPRINT(EM_DIAGRAM):   END;
245762    +          END;
MPRINT(EM_DIAGRAM):   END;
245763    +        END;
MPRINT(EM_DIAGRAM):   END;
245764    +      END;
MPRINT(EM_DIAGRAM):   END;
245765    +    END;
MPRINT(EM_DIAGRAM):   END;
245766    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245767    +    IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
245768    +      RANGE_Total_Revolving_Bal  <     0.22804926499801 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.22804926499801 THEN DO;
245769    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245770    +            0.34801787120737 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.34801787120737 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245771    +        _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
245772    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245773    +        IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
245774    +          _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
245775    +          _LEAF_  =                   19;
MPRINT(EM_DIAGRAM):   _LEAF_ = 19;
245776    +          P_Attrition_Flag0  =     0.01492537313432;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.01492537313432;
245777    +          P_Attrition_Flag1  =     0.98507462686567;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.98507462686567;
245778    +          Q_Attrition_Flag0  =     0.01492537313432;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.01492537313432;
245779    +          Q_Attrition_Flag1  =     0.98507462686567;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.98507462686567;
245780    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245781    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245782    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245783    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245784    +          END;
MPRINT(EM_DIAGRAM):   END;
245785    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245786    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245787    +                0.68728789103993 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.68728789103993 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245788    +            _NODE_  =                   67;
MPRINT(EM_DIAGRAM):   _NODE_ = 67;
245789    +            _LEAF_  =                   18;
MPRINT(EM_DIAGRAM):   _LEAF_ = 18;
245790    +            P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
245791    +            P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
245792    +            Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
245793    +            Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
245794    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245795    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245796    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245797    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245798    +            END;
MPRINT(EM_DIAGRAM):   END;
245799    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245800    +            IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245801    +              RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.43258488457259 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.43258488457259 THEN DO;
245802    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
245803    +                    0.50504321182854 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
245804    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.50504321182854 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
245805    +                _NODE_  =                  161;
MPRINT(EM_DIAGRAM):   _NODE_ = 161;
245806    +                _LEAF_  =                   16;
MPRINT(EM_DIAGRAM):   _LEAF_ = 16;
245807    +                P_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.42857142857142;
245808    +                P_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.57142857142857;
245809    +                Q_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.42857142857142;
245810    +                Q_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.57142857142857;
245811    +                V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245812    +                V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245813    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245814    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245815    +                END;
MPRINT(EM_DIAGRAM):   END;
245816    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245817    +                _NODE_  =                  160;
MPRINT(EM_DIAGRAM):   _NODE_ = 160;
245818    +                _LEAF_  =                   15;
MPRINT(EM_DIAGRAM):   _LEAF_ = 15;
245819    +                P_Attrition_Flag0  =     0.96551724137931;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96551724137931;
245820    +                P_Attrition_Flag1  =     0.03448275862068;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.03448275862068;
245821    +                Q_Attrition_Flag0  =     0.96551724137931;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96551724137931;
245822    +                Q_Attrition_Flag1  =     0.03448275862068;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.03448275862068;
245823    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245824    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245825    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245826    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245827    +                END;
MPRINT(EM_DIAGRAM):   END;
245828    +              END;
MPRINT(EM_DIAGRAM):   END;
245829    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245830    +              _NODE_  =                  109;
MPRINT(EM_DIAGRAM):   _NODE_ = 109;
245831    +              _LEAF_  =                   17;
MPRINT(EM_DIAGRAM):   _LEAF_ = 17;
245832    +              P_Attrition_Flag0  =     0.26086956521739;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26086956521739;
245833    +              P_Attrition_Flag1  =      0.7391304347826;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.7391304347826;
245834    +              Q_Attrition_Flag0  =     0.26086956521739;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26086956521739;
245835    +              Q_Attrition_Flag1  =      0.7391304347826;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.7391304347826;
245836    +              V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
245837    +              V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
245838    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245839    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245840    +              END;
MPRINT(EM_DIAGRAM):   END;
245841    +            END;
MPRINT(EM_DIAGRAM):   END;
245842    +          END;
MPRINT(EM_DIAGRAM):   END;
245843    +        END;
MPRINT(EM_DIAGRAM):   END;
245844    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245845    +        _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
245846    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245847    +        IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
245848    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245849    +            RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39278572866989 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39278572866989 THEN DO;
245850    +            _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
245851    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245852    +            IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
245853    +              _NODE_  =                  105;
MPRINT(EM_DIAGRAM):   _NODE_ = 105;
245854    +              _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
245855    +              P_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.7;
245856    +              P_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.3;
245857    +              Q_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.7;
245858    +              Q_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.3;
245859    +              V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245860    +              V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245861    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245862    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245863    +              END;
MPRINT(EM_DIAGRAM):   END;
245864    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245865    +              _NODE_  =                  104;
MPRINT(EM_DIAGRAM):   _NODE_ = 104;
245866    +              _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
245867    +              P_Attrition_Flag0  =     0.17073170731707;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.17073170731707;
245868    +              P_Attrition_Flag1  =     0.82926829268292;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.82926829268292;
245869    +              Q_Attrition_Flag0  =     0.17073170731707;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.17073170731707;
245870    +              Q_Attrition_Flag1  =     0.82926829268292;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.82926829268292;
245871    +              V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
245872    +              V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
245873    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245874    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245875    +              END;
MPRINT(EM_DIAGRAM):   END;
245876    +            END;
MPRINT(EM_DIAGRAM):   END;
245877    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245878    +            _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
245879    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
245880    +            IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
245881    +              _NODE_  =                  106;
MPRINT(EM_DIAGRAM):   _NODE_ = 106;
245882    +              _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
245883    +              P_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26666666666666;
245884    +              P_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.73333333333333;
245885    +              Q_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26666666666666;
245886    +              Q_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.73333333333333;
245887    +              V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245888    +              V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245889    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245890    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245891    +              END;
MPRINT(EM_DIAGRAM):   END;
245892    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245893    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245894    +                    0.19694236549537 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.19694236549537 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245895    +                _NODE_  =                  159;
MPRINT(EM_DIAGRAM):   _NODE_ = 159;
245896    +                _LEAF_  =                   14;
MPRINT(EM_DIAGRAM):   _LEAF_ = 14;
245897    +                P_Attrition_Flag0  =                0.975;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.975;
245898    +                P_Attrition_Flag1  =                0.025;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.025;
245899    +                Q_Attrition_Flag0  =                0.975;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.975;
245900    +                Q_Attrition_Flag1  =                0.025;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.025;
245901    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245902    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245903    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245904    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245905    +                END;
MPRINT(EM_DIAGRAM):   END;
245906    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245907    +                IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245908    +                      0.11578300596794 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11578300596794 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245909    +                  IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
245910    +                        0.51285981573527 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
245911    +                       THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.51285981573527 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
245912    +                    _NODE_  =                  279;
MPRINT(EM_DIAGRAM):   _NODE_ = 279;
245913    +                    _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
245914    +                    P_Attrition_Flag0  =                  0.9;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.9;
245915    +                    P_Attrition_Flag1  =                  0.1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1;
245916    +                    Q_Attrition_Flag0  =                  0.9;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.9;
245917    +                    Q_Attrition_Flag1  =                  0.1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1;
245918    +                    V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
245919    +                    V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
245920    +                    I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245921    +                    U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245922    +                    END;
MPRINT(EM_DIAGRAM):   END;
245923    +                  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245924    +                    _NODE_  =                  278;
MPRINT(EM_DIAGRAM):   _NODE_ = 278;
245925    +                    _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
245926    +                    P_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.28571428571428;
245927    +                    P_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.71428571428571;
245928    +                    Q_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.28571428571428;
245929    +                    Q_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.71428571428571;
245930    +                    V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
245931    +                    V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
245932    +                    I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245933    +                    U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245934    +                    END;
MPRINT(EM_DIAGRAM):   END;
245935    +                  END;
MPRINT(EM_DIAGRAM):   END;
245936    +                ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245937    +                  _NODE_  =                  212;
MPRINT(EM_DIAGRAM):   _NODE_ = 212;
245938    +                  _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
245939    +                  P_Attrition_Flag0  =     0.90566037735849;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.90566037735849;
245940    +                  P_Attrition_Flag1  =      0.0943396226415;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.0943396226415;
245941    +                  Q_Attrition_Flag0  =     0.90566037735849;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.90566037735849;
245942    +                  Q_Attrition_Flag1  =      0.0943396226415;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.0943396226415;
245943    +                  V_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.92307692307692;
245944    +                  V_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.07692307692307;
245945    +                  I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245946    +                  U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245947    +                  END;
MPRINT(EM_DIAGRAM):   END;
245948    +                END;
MPRINT(EM_DIAGRAM):   END;
245949    +              END;
MPRINT(EM_DIAGRAM):   END;
245950    +            END;
MPRINT(EM_DIAGRAM):   END;
245951    +          END;
MPRINT(EM_DIAGRAM):   END;
245952    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245953    +          _NODE_  =                   36;
MPRINT(EM_DIAGRAM):   _NODE_ = 36;
245954    +          _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
245955    +          P_Attrition_Flag0  =     0.98959687906371;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.98959687906371;
245956    +          P_Attrition_Flag1  =     0.01040312093628;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.01040312093628;
245957    +          Q_Attrition_Flag0  =     0.98959687906371;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.98959687906371;
245958    +          Q_Attrition_Flag1  =     0.01040312093628;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.01040312093628;
245959    +          V_Attrition_Flag0  =     0.97630331753554;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.97630331753554;
245960    +          V_Attrition_Flag1  =     0.02369668246445;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.02369668246445;
245961    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
245962    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
245963    +          END;
MPRINT(EM_DIAGRAM):   END;
245964    +        END;
MPRINT(EM_DIAGRAM):   END;
245965    +      END;
MPRINT(EM_DIAGRAM):   END;
245966    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245967    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245968    +        RANGE_LOG_Total_Trans_Amt  <     0.03340216054825 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03340216054825 THEN DO;
245969    +        _NODE_  =                   22;
MPRINT(EM_DIAGRAM):   _NODE_ = 22;
245970    +        _LEAF_  =                   20;
MPRINT(EM_DIAGRAM):   _LEAF_ = 20;
245971    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
245972    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
245973    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
245974    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
245975    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
245976    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
245977    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245978    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245979    +        END;
MPRINT(EM_DIAGRAM):   END;
245980    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245981    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
245982    +              0.99940405244338 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.99940405244338 <= RANGE_Total_Revolving_Bal THEN DO;
245983    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
245984    +            RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.36248390962168 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.36248390962168 THEN DO;
245985    +            _NODE_  =                   72;
MPRINT(EM_DIAGRAM):   _NODE_ = 72;
245986    +            _LEAF_  =                   28;
MPRINT(EM_DIAGRAM):   _LEAF_ = 28;
245987    +            P_Attrition_Flag0  =     0.27272727272727;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.27272727272727;
245988    +            P_Attrition_Flag1  =     0.72727272727272;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.72727272727272;
245989    +            Q_Attrition_Flag0  =     0.27272727272727;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.27272727272727;
245990    +            Q_Attrition_Flag1  =     0.72727272727272;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.72727272727272;
245991    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
245992    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
245993    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
245994    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
245995    +            END;
MPRINT(EM_DIAGRAM):   END;
245996    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
245997    +            IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
245998    +                   0.5078915992207 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.5078915992207 <= RANGE_LOG_Total_Trans_Amt THEN DO;
245999    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246000    +                RANGE_LOG_Total_Trans_Amt  <     0.69408037642344 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.69408037642344 THEN DO;
246001    +                _NODE_  =                  174;
MPRINT(EM_DIAGRAM):   _NODE_ = 174;
246002    +                _LEAF_  =                   30;
MPRINT(EM_DIAGRAM):   _LEAF_ = 30;
246003    +                P_Attrition_Flag0  =     0.31818181818181;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.31818181818181;
246004    +                P_Attrition_Flag1  =     0.68181818181818;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.68181818181818;
246005    +                Q_Attrition_Flag0  =     0.31818181818181;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.31818181818181;
246006    +                Q_Attrition_Flag1  =     0.68181818181818;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.68181818181818;
246007    +                V_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16666666666666;
246008    +                V_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83333333333333;
246009    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246010    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246011    +                END;
MPRINT(EM_DIAGRAM):   END;
246012    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246013    +                _NODE_  =                  175;
MPRINT(EM_DIAGRAM):   _NODE_ = 175;
246014    +                _LEAF_  =                   31;
MPRINT(EM_DIAGRAM):   _LEAF_ = 31;
246015    +                P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
246016    +                P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
246017    +                Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
246018    +                Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
246019    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246020    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246021    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246022    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246023    +                END;
MPRINT(EM_DIAGRAM):   END;
246024    +              END;
MPRINT(EM_DIAGRAM):   END;
246025    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246026    +              _NODE_  =                  116;
MPRINT(EM_DIAGRAM):   _NODE_ = 116;
246027    +              _LEAF_  =                   29;
MPRINT(EM_DIAGRAM):   _LEAF_ = 29;
246028    +              P_Attrition_Flag0  =     0.94267515923566;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.94267515923566;
246029    +              P_Attrition_Flag1  =     0.05732484076433;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.05732484076433;
246030    +              Q_Attrition_Flag0  =     0.94267515923566;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.94267515923566;
246031    +              Q_Attrition_Flag1  =     0.05732484076433;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.05732484076433;
246032    +              V_Attrition_Flag0  =               0.9375;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.9375;
246033    +              V_Attrition_Flag1  =               0.0625;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.0625;
246034    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246035    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246036    +              END;
MPRINT(EM_DIAGRAM):   END;
246037    +            END;
MPRINT(EM_DIAGRAM):   END;
246038    +          END;
MPRINT(EM_DIAGRAM):   END;
246039    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246040    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246041    +                0.34036717463282 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.34036717463282 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246042    +            _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
246043    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246044    +            IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
246045    +              _NODE_  =                  112;
MPRINT(EM_DIAGRAM):   _NODE_ = 112;
246046    +              _LEAF_  =                   25;
MPRINT(EM_DIAGRAM):   _LEAF_ = 25;
246047    +              P_Attrition_Flag0  =     0.97766097240473;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.97766097240473;
246048    +              P_Attrition_Flag1  =     0.02233902759526;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.02233902759526;
246049    +              Q_Attrition_Flag0  =     0.97766097240473;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.97766097240473;
246050    +              Q_Attrition_Flag1  =     0.02233902759526;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.02233902759526;
246051    +              V_Attrition_Flag0  =     0.99528301886792;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99528301886792;
246052    +              V_Attrition_Flag1  =     0.00471698113207;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00471698113207;
246053    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246054    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246055    +              END;
MPRINT(EM_DIAGRAM):   END;
246056    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246057    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246058    +                RANGE_LOG_Total_Trans_Amt  <     0.39467030301083 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.39467030301083 THEN DO;
246059    +                _NODE_  =                  170;
MPRINT(EM_DIAGRAM):   _NODE_ = 170;
246060    +                _LEAF_  =                   26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 26;
246061    +                P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
246062    +                P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
246063    +                Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
246064    +                Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
246065    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246066    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246067    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246068    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246069    +                END;
MPRINT(EM_DIAGRAM):   END;
246070    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246071    +                _NODE_  =                  171;
MPRINT(EM_DIAGRAM):   _NODE_ = 171;
246072    +                _LEAF_  =                   27;
MPRINT(EM_DIAGRAM):   _LEAF_ = 27;
246073    +                P_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.21428571428571;
246074    +                P_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.78571428571428;
246075    +                Q_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.21428571428571;
246076    +                Q_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.78571428571428;
246077    +                V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
246078    +                V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
246079    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246080    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246081    +                END;
MPRINT(EM_DIAGRAM):   END;
246082    +              END;
MPRINT(EM_DIAGRAM):   END;
246083    +            END;
MPRINT(EM_DIAGRAM):   END;
246084    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246085    +            IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246086    +              RANGE_LOG_Total_Trans_Amt  <     0.17794703865872 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.17794703865872 THEN DO;
246087    +              _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
246088    +               %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246089    +              IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
246090    +                IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246091    +                      0.08908868992172 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.08908868992172 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246092    +                  _NODE_  =                  223;
MPRINT(EM_DIAGRAM):   _NODE_ = 223;
246093    +                  _LEAF_  =                   22;
MPRINT(EM_DIAGRAM):   _LEAF_ = 22;
246094    +                  P_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.14285714285714;
246095    +                  P_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.85714285714285;
246096    +                  Q_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.14285714285714;
246097    +                  Q_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.85714285714285;
246098    +                  V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246099    +                  V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
246100    +                  I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246101    +                  U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246102    +                  END;
MPRINT(EM_DIAGRAM):   END;
246103    +                ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246104    +                  _NODE_  =                  222;
MPRINT(EM_DIAGRAM):   _NODE_ = 222;
246105    +                  _LEAF_  =                   21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 21;
246106    +                  P_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92307692307692;
246107    +                  P_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.07692307692307;
246108    +                  Q_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92307692307692;
246109    +                  Q_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.07692307692307;
246110    +                  V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246111    +                  V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246112    +                  I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246113    +                  U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246114    +                  END;
MPRINT(EM_DIAGRAM):   END;
246115    +                END;
MPRINT(EM_DIAGRAM):   END;
246116    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246117    +                _NODE_  =                  165;
MPRINT(EM_DIAGRAM):   _NODE_ = 165;
246118    +                _LEAF_  =                   23;
MPRINT(EM_DIAGRAM):   _LEAF_ = 23;
246119    +                P_Attrition_Flag0  =     0.96840442338072;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96840442338072;
246120    +                P_Attrition_Flag1  =     0.03159557661927;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.03159557661927;
246121    +                Q_Attrition_Flag0  =     0.96840442338072;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96840442338072;
246122    +                Q_Attrition_Flag1  =     0.03159557661927;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.03159557661927;
246123    +                V_Attrition_Flag0  =     0.97382198952879;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.97382198952879;
246124    +                V_Attrition_Flag1  =      0.0261780104712;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.0261780104712;
246125    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246126    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246127    +                END;
MPRINT(EM_DIAGRAM):   END;
246128    +              END;
MPRINT(EM_DIAGRAM):   END;
246129    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246130    +              _NODE_  =                  111;
MPRINT(EM_DIAGRAM):   _NODE_ = 111;
246131    +              _LEAF_  =                   24;
MPRINT(EM_DIAGRAM):   _LEAF_ = 24;
246132    +              P_Attrition_Flag0  =     0.99786233433091;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.99786233433091;
246133    +              P_Attrition_Flag1  =     0.00213766566908;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.00213766566908;
246134    +              Q_Attrition_Flag0  =     0.99786233433091;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.99786233433091;
246135    +              Q_Attrition_Flag1  =     0.00213766566908;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.00213766566908;
246136    +              V_Attrition_Flag0  =     0.99698340874811;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99698340874811;
246137    +              V_Attrition_Flag1  =     0.00301659125188;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00301659125188;
246138    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246139    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246140    +              END;
MPRINT(EM_DIAGRAM):   END;
246141    +            END;
MPRINT(EM_DIAGRAM):   END;
246142    +          END;
MPRINT(EM_DIAGRAM):   END;
246143    +        END;
MPRINT(EM_DIAGRAM):   END;
246144    +      END;
MPRINT(EM_DIAGRAM):   END;
246145    +    END;
MPRINT(EM_DIAGRAM):   END;
246146    +  END;
MPRINT(EM_DIAGRAM):   END;
246147    +
246148    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
246149    +IF  F_Attrition_Flag  NE '0'
246150    +AND F_Attrition_Flag  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Attrition_Flag NE '0' AND F_Attrition_Flag NE '1' THEN DO;
246151    +        R_Attrition_Flag0  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = .;
246152    +        R_Attrition_Flag1  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = .;
246153    + END;
MPRINT(EM_DIAGRAM):   END;
246154    + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246155    +       R_Attrition_Flag0  =  -P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = -P_Attrition_Flag0 ;
246156    +       R_Attrition_Flag1  =  -P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = -P_Attrition_Flag1 ;
246157    +       SELECT( F_Attrition_Flag  );
MPRINT(EM_DIAGRAM):   SELECT( F_Attrition_Flag );
246158    +          WHEN( '0'  ) R_Attrition_Flag0  = R_Attrition_Flag0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_Attrition_Flag0 = R_Attrition_Flag0 +1;
246159    +          WHEN( '1'  ) R_Attrition_Flag1  = R_Attrition_Flag1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_Attrition_Flag1 = R_Attrition_Flag1 +1;
246160    +       END;
MPRINT(EM_DIAGRAM):   END;
246161    + END;
MPRINT(EM_DIAGRAM):   END;
246162    +
246163    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
246164    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
246165    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
246166    +
246167    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
246168     run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
246169     quit;
246170     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
246171     filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
246172     *------------------------------------------------------------*;
246173     * Tree4: Scoring TEST data;
246174     *------------------------------------------------------------*;
246175     data EMWS1.Tree4_TEST
246176     / view=EMWS1.Tree4_TEST
246177     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_TEST / view=EMWS1.Tree4_TEST ;
246178     set EMWS1.Part2_TEST
246179     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part2_TEST ;
246180     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMFLOWSCORE.sas.
246181    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
246182    +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
246183    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
246184    +
246185    +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
246186    +LENGTH F_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH F_Attrition_Flag $ 17;
246187    +LENGTH I_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH I_Attrition_Flag $ 17;
246188    +LENGTH U_Attrition_Flag  $   17;
MPRINT(EM_DIAGRAM):   LENGTH U_Attrition_Flag $ 17;
246189    +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
246190    +
246191    +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
246192    +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
246193    +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
246194    +label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag0 = 'Predicted: Attrition_Flag=0' ;
246195    +label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label P_Attrition_Flag1 = 'Predicted: Attrition_Flag=1' ;
246196    +label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag0 = 'Unadjusted P: Attrition_Flag=0' ;
246197    +label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label Q_Attrition_Flag1 = 'Unadjusted P: Attrition_Flag=1' ;
246198    +label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag0 = 'Validated: Attrition_Flag=0' ;
246199    +label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label V_Attrition_Flag1 = 'Validated: Attrition_Flag=1' ;
246200    +label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag0 = 'Residual: Attrition_Flag=0' ;
246201    +label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
MPRINT(EM_DIAGRAM):   label R_Attrition_Flag1 = 'Residual: Attrition_Flag=1' ;
246202    +label F_Attrition_Flag = 'From: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label F_Attrition_Flag = 'From: Attrition_Flag' ;
246203    +label I_Attrition_Flag = 'Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label I_Attrition_Flag = 'Into: Attrition_Flag' ;
246204    +label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
MPRINT(EM_DIAGRAM):   label U_Attrition_Flag = 'Unnormalized Into: Attrition_Flag' ;
246205    +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
246206    +
246207    +
246208    +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
246209    +LENGTH _ARBFMT_17 $     17; DROP _ARBFMT_17;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_17 $ 17;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_17;
246210    +_ARBFMT_17 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = ' ';
246211    +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
246212    +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
246213    +
246214    +
246215    +_ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
MPRINT(EM_DIAGRAM):   _ARBFMT_17 = PUT( Attrition_Flag , $CHAR17.);
246216    + %DMNORMCP( _ARBFMT_17, F_Attrition_Flag );
MPRINT(DMNORMCP):   F_Attrition_Flag=dmnorm(_ARBFMT_17,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
246217    +
246218    +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
246219    +_ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
246220    + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246221    +IF _ARBFMT_12 IN ('1' ,'3' ,'4' ,'2' ,'0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'3' ,'4' ,'2' ,'0' ) THEN DO;
246222    +  IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
246223    +    RANGE_Total_Revolving_Bal  <     0.24215335717123 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.24215335717123 THEN DO;
246224    +    IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246225    +          0.45221286754555 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45221286754555 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
246226    +      _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
246227    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246228    +      IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
246229    +        _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
246230    +        _LEAF_  =                   38;
MPRINT(EM_DIAGRAM):   _LEAF_ = 38;
246231    +        P_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.05555555555555;
246232    +        P_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.94444444444444;
246233    +        Q_Attrition_Flag0  =     0.05555555555555;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.05555555555555;
246234    +        Q_Attrition_Flag1  =     0.94444444444444;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.94444444444444;
246235    +        V_Attrition_Flag0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.11111111111111;
246236    +        V_Attrition_Flag1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.88888888888888;
246237    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246238    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246239    +        END;
MPRINT(EM_DIAGRAM):   END;
246240    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246241    +        IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
246242    +          RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.43199033198472 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.43199033198472 THEN DO;
246243    +          _NODE_  =                   48;
MPRINT(EM_DIAGRAM):   _NODE_ = 48;
246244    +          _LEAF_  =                   39;
MPRINT(EM_DIAGRAM):   _LEAF_ = 39;
246245    +          P_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.4;
246246    +          P_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.6;
246247    +          Q_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.4;
246248    +          Q_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.6;
246249    +          V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
246250    +          V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
246251    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246252    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246253    +          END;
MPRINT(EM_DIAGRAM):   END;
246254    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246255    +          _NODE_  =                   49;
MPRINT(EM_DIAGRAM):   _NODE_ = 49;
246256    +          _LEAF_  =                   40;
MPRINT(EM_DIAGRAM):   _LEAF_ = 40;
246257    +          P_Attrition_Flag0  =               0.8125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8125;
246258    +          P_Attrition_Flag1  =               0.1875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1875;
246259    +          Q_Attrition_Flag0  =               0.8125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8125;
246260    +          Q_Attrition_Flag1  =               0.1875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1875;
246261    +          V_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.8;
246262    +          V_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.2;
246263    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246264    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246265    +          END;
MPRINT(EM_DIAGRAM):   END;
246266    +        END;
MPRINT(EM_DIAGRAM):   END;
246267    +      END;
MPRINT(EM_DIAGRAM):   END;
246268    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246269    +      _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
246270    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246271    +      IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
246272    +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
246273    +        _LEAF_  =                   32;
MPRINT(EM_DIAGRAM):   _LEAF_ = 32;
246274    +        P_Attrition_Flag0  =                 0.54;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.54;
246275    +        P_Attrition_Flag1  =                 0.46;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.46;
246276    +        Q_Attrition_Flag0  =                 0.54;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.54;
246277    +        Q_Attrition_Flag1  =                 0.46;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.46;
246278    +        V_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.83333333333333;
246279    +        V_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.16666666666666;
246280    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246281    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246282    +        END;
MPRINT(EM_DIAGRAM):   END;
246283    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246284    +        _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
246285    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246286    +        IF _ARBFMT_12 IN ('9' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ) THEN DO;
246287    +          _NODE_  =                   44;
MPRINT(EM_DIAGRAM):   _NODE_ = 44;
246288    +          _LEAF_  =                   33;
MPRINT(EM_DIAGRAM):   _LEAF_ = 33;
246289    +          P_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.75;
246290    +          P_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.25;
246291    +          Q_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.75;
246292    +          Q_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.25;
246293    +          V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246294    +          V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246295    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246296    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246297    +          END;
MPRINT(EM_DIAGRAM):   END;
246298    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246299    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246300    +            RANGE_LOG_Total_Trans_Amt  <     0.10455689918435 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.10455689918435 THEN DO;
246301    +            _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
246302    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246303    +            IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ) THEN DO;
246304    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
246305    +                    0.43956355842133 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
246306    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.43956355842133 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
246307    +                _NODE_  =                  181;
MPRINT(EM_DIAGRAM):   _NODE_ = 181;
246308    +                _LEAF_  =                   36;
MPRINT(EM_DIAGRAM):   _LEAF_ = 36;
246309    +                P_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.77777777777777;
246310    +                P_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.22222222222222;
246311    +                Q_Attrition_Flag0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.77777777777777;
246312    +                Q_Attrition_Flag1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.22222222222222;
246313    +                V_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.88888888888888;
246314    +                V_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.11111111111111;
246315    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246316    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246317    +                END;
MPRINT(EM_DIAGRAM):   END;
246318    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246319    +                _NODE_  =                  180;
MPRINT(EM_DIAGRAM):   _NODE_ = 180;
246320    +                _LEAF_  =                   35;
MPRINT(EM_DIAGRAM):   _LEAF_ = 35;
246321    +                P_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26666666666666;
246322    +                P_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.73333333333333;
246323    +                Q_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26666666666666;
246324    +                Q_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.73333333333333;
246325    +                V_Attrition_Flag0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.33333333333333;
246326    +                V_Attrition_Flag1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.66666666666666;
246327    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246328    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246329    +                END;
MPRINT(EM_DIAGRAM):   END;
246330    +              END;
MPRINT(EM_DIAGRAM):   END;
246331    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246332    +              _NODE_  =                  120;
MPRINT(EM_DIAGRAM):   _NODE_ = 120;
246333    +              _LEAF_  =                   34;
MPRINT(EM_DIAGRAM):   _LEAF_ = 34;
246334    +              P_Attrition_Flag0  =      0.1081081081081;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.1081081081081;
246335    +              P_Attrition_Flag1  =     0.89189189189189;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.89189189189189;
246336    +              Q_Attrition_Flag0  =      0.1081081081081;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.1081081081081;
246337    +              Q_Attrition_Flag1  =     0.89189189189189;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.89189189189189;
246338    +              V_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16666666666666;
246339    +              V_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83333333333333;
246340    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246341    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246342    +              END;
MPRINT(EM_DIAGRAM):   END;
246343    +            END;
MPRINT(EM_DIAGRAM):   END;
246344    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246345    +            _NODE_  =                   81;
MPRINT(EM_DIAGRAM):   _NODE_ = 81;
246346    +            _LEAF_  =                   37;
MPRINT(EM_DIAGRAM):   _LEAF_ = 37;
246347    +            P_Attrition_Flag0  =      0.0360110803324;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.0360110803324;
246348    +            P_Attrition_Flag1  =     0.96398891966759;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.96398891966759;
246349    +            Q_Attrition_Flag0  =      0.0360110803324;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.0360110803324;
246350    +            Q_Attrition_Flag1  =     0.96398891966759;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.96398891966759;
246351    +            V_Attrition_Flag0  =     0.05882352941176;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.05882352941176;
246352    +            V_Attrition_Flag1  =     0.94117647058823;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.94117647058823;
246353    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246354    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246355    +            END;
MPRINT(EM_DIAGRAM):   END;
246356    +          END;
MPRINT(EM_DIAGRAM):   END;
246357    +        END;
MPRINT(EM_DIAGRAM):   END;
246358    +      END;
MPRINT(EM_DIAGRAM):   END;
246359    +    END;
MPRINT(EM_DIAGRAM):   END;
246360    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246361    +    _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
246362    +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246363    +    IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
246364    +      _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
246365    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246366    +      IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
246367    +        _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
246368    +        _LEAF_  =                   44;
MPRINT(EM_DIAGRAM):   _LEAF_ = 44;
246369    +        P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
246370    +        P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
246371    +        Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
246372    +        Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
246373    +        V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
246374    +        V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
246375    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246376    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246377    +        END;
MPRINT(EM_DIAGRAM):   END;
246378    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246379    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246380    +              0.43753508527028 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.43753508527028 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
246381    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246382    +            RANGE_LOG_Total_Trans_Amt  <     0.12518504649037 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.12518504649037 THEN DO;
246383    +            _NODE_  =                   88;
MPRINT(EM_DIAGRAM):   _NODE_ = 88;
246384    +            _LEAF_  =                   42;
MPRINT(EM_DIAGRAM):   _LEAF_ = 42;
246385    +            P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
246386    +            P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
246387    +            Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
246388    +            Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
246389    +            V_Attrition_Flag0  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.6;
246390    +            V_Attrition_Flag1  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.4;
246391    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246392    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246393    +            END;
MPRINT(EM_DIAGRAM):   END;
246394    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246395    +            _NODE_  =                   89;
MPRINT(EM_DIAGRAM):   _NODE_ = 89;
246396    +            _LEAF_  =                   43;
MPRINT(EM_DIAGRAM):   _LEAF_ = 43;
246397    +            P_Attrition_Flag0  =     0.23529411764705;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.23529411764705;
246398    +            P_Attrition_Flag1  =     0.76470588235294;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.76470588235294;
246399    +            Q_Attrition_Flag0  =     0.23529411764705;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.23529411764705;
246400    +            Q_Attrition_Flag1  =     0.76470588235294;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.76470588235294;
246401    +            V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
246402    +            V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
246403    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246404    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246405    +            END;
MPRINT(EM_DIAGRAM):   END;
246406    +          END;
MPRINT(EM_DIAGRAM):   END;
246407    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246408    +          _NODE_  =                   50;
MPRINT(EM_DIAGRAM):   _NODE_ = 50;
246409    +          _LEAF_  =                   41;
MPRINT(EM_DIAGRAM):   _LEAF_ = 41;
246410    +          P_Attrition_Flag0  =     0.04477611940298;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.04477611940298;
246411    +          P_Attrition_Flag1  =     0.95522388059701;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.95522388059701;
246412    +          Q_Attrition_Flag0  =     0.04477611940298;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.04477611940298;
246413    +          Q_Attrition_Flag1  =     0.95522388059701;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.95522388059701;
246414    +          V_Attrition_Flag0  =                 0.04;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.04;
246415    +          V_Attrition_Flag1  =                 0.96;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.96;
246416    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246417    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246418    +          END;
MPRINT(EM_DIAGRAM):   END;
246419    +        END;
MPRINT(EM_DIAGRAM):   END;
246420    +      END;
MPRINT(EM_DIAGRAM):   END;
246421    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246422    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246423    +            0.11922630474959 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11922630474959 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246424    +        IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246425    +          RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.41234945173394 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.41234945173394 THEN DO;
246426    +          _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Customer_Age , BEST12.);
246427    +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246428    +          IF _ARBFMT_12 IN ('9' ,'8' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('9' ,'8' ) THEN DO;
246429    +            _NODE_  =                   94;
MPRINT(EM_DIAGRAM):   _NODE_ = 94;
246430    +            _LEAF_  =                   47;
MPRINT(EM_DIAGRAM):   _LEAF_ = 47;
246431    +            P_Attrition_Flag0  =                 0.85;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.85;
246432    +            P_Attrition_Flag1  =                 0.15;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.15;
246433    +            Q_Attrition_Flag0  =                 0.85;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.85;
246434    +            Q_Attrition_Flag1  =                 0.15;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.15;
246435    +            V_Attrition_Flag0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.75;
246436    +            V_Attrition_Flag1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.25;
246437    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246438    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246439    +            END;
MPRINT(EM_DIAGRAM):   END;
246440    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246441    +            IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
246442    +              RANGE_SQRT_Avg_Utilization_Ratio
246443    +                 <     0.54890616290935 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND RANGE_SQRT_Avg_Utilization_Ratio < 0.54890616290935 THEN DO;
246444    +              IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246445    +                    0.38951475728176 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1
246446    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.38951475728176 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
246447    +                _NODE_  =                  197;
MPRINT(EM_DIAGRAM):   _NODE_ = 197;
246448    +                _LEAF_  =                   49;
MPRINT(EM_DIAGRAM):   _LEAF_ = 49;
246449    +                P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
246450    +                P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
246451    +                Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
246452    +                Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
246453    +                V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
246454    +                V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
246455    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246456    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246457    +                END;
MPRINT(EM_DIAGRAM):   END;
246458    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246459    +                _NODE_  =                  196;
MPRINT(EM_DIAGRAM):   _NODE_ = 196;
246460    +                _LEAF_  =                   48;
MPRINT(EM_DIAGRAM):   _LEAF_ = 48;
246461    +                P_Attrition_Flag0  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.3;
246462    +                P_Attrition_Flag1  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.7;
246463    +                Q_Attrition_Flag0  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.3;
246464    +                Q_Attrition_Flag1  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.7;
246465    +                V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
246466    +                V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
246467    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246468    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246469    +                END;
MPRINT(EM_DIAGRAM):   END;
246470    +              END;
MPRINT(EM_DIAGRAM):   END;
246471    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246472    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
246473    +                    0.53282607355155 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
246474    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.53282607355155 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
246475    +                _NODE_  =                  199;
MPRINT(EM_DIAGRAM):   _NODE_ = 199;
246476    +                _LEAF_  =                   51;
MPRINT(EM_DIAGRAM):   _LEAF_ = 51;
246477    +                P_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.66666666666666;
246478    +                P_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.33333333333333;
246479    +                Q_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.66666666666666;
246480    +                Q_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.33333333333333;
246481    +                V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
246482    +                V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
246483    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246484    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246485    +                END;
MPRINT(EM_DIAGRAM):   END;
246486    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246487    +                _NODE_  =                  198;
MPRINT(EM_DIAGRAM):   _NODE_ = 198;
246488    +                _LEAF_  =                   50;
MPRINT(EM_DIAGRAM):   _LEAF_ = 50;
246489    +                P_Attrition_Flag0  =                0.075;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.075;
246490    +                P_Attrition_Flag1  =                0.925;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.925;
246491    +                Q_Attrition_Flag0  =                0.075;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.075;
246492    +                Q_Attrition_Flag1  =                0.925;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.925;
246493    +                V_Attrition_Flag0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.06666666666666;
246494    +                V_Attrition_Flag1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.93333333333333;
246495    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246496    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246497    +                END;
MPRINT(EM_DIAGRAM):   END;
246498    +              END;
MPRINT(EM_DIAGRAM):   END;
246499    +            END;
MPRINT(EM_DIAGRAM):   END;
246500    +          END;
MPRINT(EM_DIAGRAM):   END;
246501    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246502    +          IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
246503    +                0.99463647199046 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.99463647199046 <= RANGE_Total_Revolving_Bal THEN DO;
246504    +            IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246505    +                   0.4523299955855 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.4523299955855 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
246506    +              _NODE_  =                  145;
MPRINT(EM_DIAGRAM):   _NODE_ = 145;
246507    +              _LEAF_  =                   56;
MPRINT(EM_DIAGRAM):   _LEAF_ = 56;
246508    +              P_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.88888888888888;
246509    +              P_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.11111111111111;
246510    +              Q_Attrition_Flag0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.88888888888888;
246511    +              Q_Attrition_Flag1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.11111111111111;
246512    +              V_Attrition_Flag0  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.5;
246513    +              V_Attrition_Flag1  =                  0.5;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.5;
246514    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246515    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246516    +              END;
MPRINT(EM_DIAGRAM):   END;
246517    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246518    +              _NODE_  =                  144;
MPRINT(EM_DIAGRAM):   _NODE_ = 144;
246519    +              _LEAF_  =                   55;
MPRINT(EM_DIAGRAM):   _LEAF_ = 55;
246520    +              P_Attrition_Flag0  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.18181818181818;
246521    +              P_Attrition_Flag1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.81818181818181;
246522    +              Q_Attrition_Flag0  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.18181818181818;
246523    +              Q_Attrition_Flag1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.81818181818181;
246524    +              V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246525    +              V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
246526    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246527    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246528    +              END;
MPRINT(EM_DIAGRAM):   END;
246529    +            END;
MPRINT(EM_DIAGRAM):   END;
246530    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246531    +            IF  NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND
246532    +                  0.87422091928403 <= RANGE_SQRT_Avg_Utilization_Ratio
246533    +                 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Avg_Utilization_Ratio ) AND 0.87422091928403 <= RANGE_SQRT_Avg_Utilization_Ratio THEN DO;
246534    +              IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246535    +                    0.45753335515667 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1
246536    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND 0.45753335515667 <= RANGE_SQRT_Total_Ct_Chng_Q4_Q1 THEN DO;
246537    +                _NODE_  =                  203;
MPRINT(EM_DIAGRAM):   _NODE_ = 203;
246538    +                _LEAF_  =                   54;
MPRINT(EM_DIAGRAM):   _LEAF_ = 54;
246539    +                P_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.875;
246540    +                P_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.125;
246541    +                Q_Attrition_Flag0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.875;
246542    +                Q_Attrition_Flag1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.125;
246543    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246544    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246545    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246546    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246547    +                END;
MPRINT(EM_DIAGRAM):   END;
246548    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246549    +                _NODE_  =                  202;
MPRINT(EM_DIAGRAM):   _NODE_ = 202;
246550    +                _LEAF_  =                   53;
MPRINT(EM_DIAGRAM):   _LEAF_ = 53;
246551    +                P_Attrition_Flag0  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.22222222222222;
246552    +                P_Attrition_Flag1  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.77777777777777;
246553    +                Q_Attrition_Flag0  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.22222222222222;
246554    +                Q_Attrition_Flag1  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.77777777777777;
246555    +                V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246556    +                V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
246557    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246558    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246559    +                END;
MPRINT(EM_DIAGRAM):   END;
246560    +              END;
MPRINT(EM_DIAGRAM):   END;
246561    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246562    +              _NODE_  =                  142;
MPRINT(EM_DIAGRAM):   _NODE_ = 142;
246563    +              _LEAF_  =                   52;
MPRINT(EM_DIAGRAM):   _LEAF_ = 52;
246564    +              P_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92;
246565    +              P_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.08;
246566    +              Q_Attrition_Flag0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92;
246567    +              Q_Attrition_Flag1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.08;
246568    +              V_Attrition_Flag0  =     0.89361702127659;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.89361702127659;
246569    +              V_Attrition_Flag1  =      0.1063829787234;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.1063829787234;
246570    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246571    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246572    +              END;
MPRINT(EM_DIAGRAM):   END;
246573    +            END;
MPRINT(EM_DIAGRAM):   END;
246574    +          END;
MPRINT(EM_DIAGRAM):   END;
246575    +        END;
MPRINT(EM_DIAGRAM):   END;
246576    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246577    +        IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246578    +          RANGE_LOG_Total_Trans_Amt  <     0.03539998717758 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03539998717758 THEN DO;
246579    +          _NODE_  =                   54;
MPRINT(EM_DIAGRAM):   _NODE_ = 54;
246580    +          _LEAF_  =                   45;
MPRINT(EM_DIAGRAM):   _LEAF_ = 45;
246581    +          P_Attrition_Flag0  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.09090909090909;
246582    +          P_Attrition_Flag1  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.9090909090909;
246583    +          Q_Attrition_Flag0  =     0.09090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.09090909090909;
246584    +          Q_Attrition_Flag1  =      0.9090909090909;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.9090909090909;
246585    +          V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
246586    +          V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
246587    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246588    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246589    +          END;
MPRINT(EM_DIAGRAM):   END;
246590    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246591    +          _NODE_  =                   55;
MPRINT(EM_DIAGRAM):   _NODE_ = 55;
246592    +          _LEAF_  =                   46;
MPRINT(EM_DIAGRAM):   _LEAF_ = 46;
246593    +          P_Attrition_Flag0  =     0.93779160186625;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.93779160186625;
246594    +          P_Attrition_Flag1  =     0.06220839813374;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.06220839813374;
246595    +          Q_Attrition_Flag0  =     0.93779160186625;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.93779160186625;
246596    +          Q_Attrition_Flag1  =     0.06220839813374;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.06220839813374;
246597    +          V_Attrition_Flag0  =     0.95555555555555;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.95555555555555;
246598    +          V_Attrition_Flag1  =     0.04444444444444;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.04444444444444;
246599    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246600    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246601    +          END;
MPRINT(EM_DIAGRAM):   END;
246602    +        END;
MPRINT(EM_DIAGRAM):   END;
246603    +      END;
MPRINT(EM_DIAGRAM):   END;
246604    +    END;
MPRINT(EM_DIAGRAM):   END;
246605    +  END;
MPRINT(EM_DIAGRAM):   END;
246606    +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246607    +  IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246608    +    RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <      0.3183909236815 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.3183909236815 THEN DO;
246609    +    IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246610    +          0.09312695012822 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.09312695012822 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246611    +      _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
246612    +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246613    +      IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
246614    +        _NODE_  =                   18;
MPRINT(EM_DIAGRAM):   _NODE_ = 18;
246615    +        _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
246616    +        P_Attrition_Flag0  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.13333333333333;
246617    +        P_Attrition_Flag1  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.86666666666666;
246618    +        Q_Attrition_Flag0  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.13333333333333;
246619    +        Q_Attrition_Flag1  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.86666666666666;
246620    +        V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
246621    +        V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
246622    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246623    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246624    +        END;
MPRINT(EM_DIAGRAM):   END;
246625    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246626    +        _NODE_  =                   19;
MPRINT(EM_DIAGRAM):   _NODE_ = 19;
246627    +        _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
246628    +        P_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.8;
246629    +        P_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.2;
246630    +        Q_Attrition_Flag0  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.8;
246631    +        Q_Attrition_Flag1  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.2;
246632    +        V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246633    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246634    +        I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246635    +        U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246636    +        END;
MPRINT(EM_DIAGRAM):   END;
246637    +      END;
MPRINT(EM_DIAGRAM):   END;
246638    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246639    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246640    +        RANGE_LOG_Total_Trans_Amt  <     0.04063848760383 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.04063848760383 THEN DO;
246641    +        _NODE_  =                   16;
MPRINT(EM_DIAGRAM):   _NODE_ = 16;
246642    +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
246643    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
246644    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
246645    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
246646    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
246647    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246648    +        V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246649    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246650    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246651    +        END;
MPRINT(EM_DIAGRAM):   END;
246652    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246653    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
246654    +              0.95053635280095 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.95053635280095 <= RANGE_Total_Revolving_Bal THEN DO;
246655    +          _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
246656    +          _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
246657    +          P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
246658    +          P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
246659    +          Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
246660    +          Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
246661    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246662    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
246663    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246664    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246665    +          END;
MPRINT(EM_DIAGRAM):   END;
246666    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246667    +          IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
246668    +            RANGE_SQRT_Total_Amt_Chng_Q4_Q1  <     0.30399187060514 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Amt_Chng_Q4_Q1 < 0.30399187060514 THEN DO;
246669    +            _NODE_  =                   58;
MPRINT(EM_DIAGRAM):   _NODE_ = 58;
246670    +            _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
246671    +            P_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.2;
246672    +            P_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.8;
246673    +            Q_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.2;
246674    +            Q_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.8;
246675    +            V_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.14285714285714;
246676    +            V_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.85714285714285;
246677    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246678    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246679    +            END;
MPRINT(EM_DIAGRAM):   END;
246680    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246681    +            _NODE_  =                   59;
MPRINT(EM_DIAGRAM):   _NODE_ = 59;
246682    +            _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
246683    +            P_Attrition_Flag0  =     0.87692307692307;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.87692307692307;
246684    +            P_Attrition_Flag1  =     0.12307692307692;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.12307692307692;
246685    +            Q_Attrition_Flag0  =     0.87692307692307;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.87692307692307;
246686    +            Q_Attrition_Flag1  =     0.12307692307692;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.12307692307692;
246687    +            V_Attrition_Flag0  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.73333333333333;
246688    +            V_Attrition_Flag1  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.26666666666666;
246689    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246690    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246691    +            END;
MPRINT(EM_DIAGRAM):   END;
246692    +          END;
MPRINT(EM_DIAGRAM):   END;
246693    +        END;
MPRINT(EM_DIAGRAM):   END;
246694    +      END;
MPRINT(EM_DIAGRAM):   END;
246695    +    END;
MPRINT(EM_DIAGRAM):   END;
246696    +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246697    +    IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
246698    +      RANGE_Total_Revolving_Bal  <     0.22804926499801 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND RANGE_Total_Revolving_Bal < 0.22804926499801 THEN DO;
246699    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246700    +            0.34801787120737 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.34801787120737 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246701    +        _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
246702    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246703    +        IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
246704    +          _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
246705    +          _LEAF_  =                   19;
MPRINT(EM_DIAGRAM):   _LEAF_ = 19;
246706    +          P_Attrition_Flag0  =     0.01492537313432;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.01492537313432;
246707    +          P_Attrition_Flag1  =     0.98507462686567;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.98507462686567;
246708    +          Q_Attrition_Flag0  =     0.01492537313432;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.01492537313432;
246709    +          Q_Attrition_Flag1  =     0.98507462686567;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.98507462686567;
246710    +          V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246711    +          V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
246712    +          I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246713    +          U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246714    +          END;
MPRINT(EM_DIAGRAM):   END;
246715    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246716    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246717    +                0.68728789103993 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.68728789103993 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246718    +            _NODE_  =                   67;
MPRINT(EM_DIAGRAM):   _NODE_ = 67;
246719    +            _LEAF_  =                   18;
MPRINT(EM_DIAGRAM):   _LEAF_ = 18;
246720    +            P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
246721    +            P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
246722    +            Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
246723    +            Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
246724    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246725    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246726    +            I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246727    +            U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246728    +            END;
MPRINT(EM_DIAGRAM):   END;
246729    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246730    +            IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246731    +              RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.43258488457259 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.43258488457259 THEN DO;
246732    +              IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
246733    +                    0.50504321182854 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
246734    +                   THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.50504321182854 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
246735    +                _NODE_  =                  161;
MPRINT(EM_DIAGRAM):   _NODE_ = 161;
246736    +                _LEAF_  =                   16;
MPRINT(EM_DIAGRAM):   _LEAF_ = 16;
246737    +                P_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.42857142857142;
246738    +                P_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.57142857142857;
246739    +                Q_Attrition_Flag0  =     0.42857142857142;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.42857142857142;
246740    +                Q_Attrition_Flag1  =     0.57142857142857;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.57142857142857;
246741    +                V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246742    +                V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
246743    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246744    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246745    +                END;
MPRINT(EM_DIAGRAM):   END;
246746    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246747    +                _NODE_  =                  160;
MPRINT(EM_DIAGRAM):   _NODE_ = 160;
246748    +                _LEAF_  =                   15;
MPRINT(EM_DIAGRAM):   _LEAF_ = 15;
246749    +                P_Attrition_Flag0  =     0.96551724137931;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96551724137931;
246750    +                P_Attrition_Flag1  =     0.03448275862068;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.03448275862068;
246751    +                Q_Attrition_Flag0  =     0.96551724137931;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96551724137931;
246752    +                Q_Attrition_Flag1  =     0.03448275862068;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.03448275862068;
246753    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246754    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246755    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246756    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246757    +                END;
MPRINT(EM_DIAGRAM):   END;
246758    +              END;
MPRINT(EM_DIAGRAM):   END;
246759    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246760    +              _NODE_  =                  109;
MPRINT(EM_DIAGRAM):   _NODE_ = 109;
246761    +              _LEAF_  =                   17;
MPRINT(EM_DIAGRAM):   _LEAF_ = 17;
246762    +              P_Attrition_Flag0  =     0.26086956521739;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26086956521739;
246763    +              P_Attrition_Flag1  =      0.7391304347826;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.7391304347826;
246764    +              Q_Attrition_Flag0  =     0.26086956521739;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26086956521739;
246765    +              Q_Attrition_Flag1  =      0.7391304347826;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.7391304347826;
246766    +              V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
246767    +              V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
246768    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246769    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246770    +              END;
MPRINT(EM_DIAGRAM):   END;
246771    +            END;
MPRINT(EM_DIAGRAM):   END;
246772    +          END;
MPRINT(EM_DIAGRAM):   END;
246773    +        END;
MPRINT(EM_DIAGRAM):   END;
246774    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246775    +        _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
246776    +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246777    +        IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
246778    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246779    +            RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.39278572866989 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.39278572866989 THEN DO;
246780    +            _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Months_Inactive_12_mon , BEST12.);
246781    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246782    +            IF _ARBFMT_12 IN ('4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('4' ) THEN DO;
246783    +              _NODE_  =                  105;
MPRINT(EM_DIAGRAM):   _NODE_ = 105;
246784    +              _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
246785    +              P_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.7;
246786    +              P_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.3;
246787    +              Q_Attrition_Flag0  =                  0.7;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.7;
246788    +              Q_Attrition_Flag1  =                  0.3;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.3;
246789    +              V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246790    +              V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246791    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246792    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246793    +              END;
MPRINT(EM_DIAGRAM):   END;
246794    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246795    +              _NODE_  =                  104;
MPRINT(EM_DIAGRAM):   _NODE_ = 104;
246796    +              _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
246797    +              P_Attrition_Flag0  =     0.17073170731707;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.17073170731707;
246798    +              P_Attrition_Flag1  =     0.82926829268292;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.82926829268292;
246799    +              Q_Attrition_Flag0  =     0.17073170731707;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.17073170731707;
246800    +              Q_Attrition_Flag1  =     0.82926829268292;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.82926829268292;
246801    +              V_Attrition_Flag0  =                  0.2;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.2;
246802    +              V_Attrition_Flag1  =                  0.8;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.8;
246803    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246804    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246805    +              END;
MPRINT(EM_DIAGRAM):   END;
246806    +            END;
MPRINT(EM_DIAGRAM):   END;
246807    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246808    +            _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
246809    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246810    +            IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
246811    +              _NODE_  =                  106;
MPRINT(EM_DIAGRAM):   _NODE_ = 106;
246812    +              _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
246813    +              P_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.26666666666666;
246814    +              P_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.73333333333333;
246815    +              Q_Attrition_Flag0  =     0.26666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.26666666666666;
246816    +              Q_Attrition_Flag1  =     0.73333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.73333333333333;
246817    +              V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246818    +              V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
246819    +              I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246820    +              U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246821    +              END;
MPRINT(EM_DIAGRAM):   END;
246822    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246823    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246824    +                    0.19694236549537 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.19694236549537 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246825    +                _NODE_  =                  159;
MPRINT(EM_DIAGRAM):   _NODE_ = 159;
246826    +                _LEAF_  =                   14;
MPRINT(EM_DIAGRAM):   _LEAF_ = 14;
246827    +                P_Attrition_Flag0  =                0.975;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.975;
246828    +                P_Attrition_Flag1  =                0.025;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.025;
246829    +                Q_Attrition_Flag0  =                0.975;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.975;
246830    +                Q_Attrition_Flag1  =                0.025;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.025;
246831    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246832    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246833    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246834    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246835    +                END;
MPRINT(EM_DIAGRAM):   END;
246836    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246837    +                IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246838    +                      0.11578300596794 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.11578300596794 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246839    +                  IF  NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND
246840    +                        0.51285981573527 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1
246841    +                       THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Amt_Chng_Q4_Q1 ) AND 0.51285981573527 <= RANGE_SQRT_Total_Amt_Chng_Q4_Q1 THEN DO;
246842    +                    _NODE_  =                  279;
MPRINT(EM_DIAGRAM):   _NODE_ = 279;
246843    +                    _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
246844    +                    P_Attrition_Flag0  =                  0.9;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.9;
246845    +                    P_Attrition_Flag1  =                  0.1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.1;
246846    +                    Q_Attrition_Flag0  =                  0.9;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.9;
246847    +                    Q_Attrition_Flag1  =                  0.1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.1;
246848    +                    V_Attrition_Flag0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.66666666666666;
246849    +                    V_Attrition_Flag1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.33333333333333;
246850    +                    I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246851    +                    U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246852    +                    END;
MPRINT(EM_DIAGRAM):   END;
246853    +                  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246854    +                    _NODE_  =                  278;
MPRINT(EM_DIAGRAM):   _NODE_ = 278;
246855    +                    _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
246856    +                    P_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.28571428571428;
246857    +                    P_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.71428571428571;
246858    +                    Q_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.28571428571428;
246859    +                    Q_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.71428571428571;
246860    +                    V_Attrition_Flag0  =                  0.4;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.4;
246861    +                    V_Attrition_Flag1  =                  0.6;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.6;
246862    +                    I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246863    +                    U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246864    +                    END;
MPRINT(EM_DIAGRAM):   END;
246865    +                  END;
MPRINT(EM_DIAGRAM):   END;
246866    +                ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246867    +                  _NODE_  =                  212;
MPRINT(EM_DIAGRAM):   _NODE_ = 212;
246868    +                  _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
246869    +                  P_Attrition_Flag0  =     0.90566037735849;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.90566037735849;
246870    +                  P_Attrition_Flag1  =      0.0943396226415;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.0943396226415;
246871    +                  Q_Attrition_Flag0  =     0.90566037735849;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.90566037735849;
246872    +                  Q_Attrition_Flag1  =      0.0943396226415;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.0943396226415;
246873    +                  V_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.92307692307692;
246874    +                  V_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.07692307692307;
246875    +                  I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246876    +                  U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246877    +                  END;
MPRINT(EM_DIAGRAM):   END;
246878    +                END;
MPRINT(EM_DIAGRAM):   END;
246879    +              END;
MPRINT(EM_DIAGRAM):   END;
246880    +            END;
MPRINT(EM_DIAGRAM):   END;
246881    +          END;
MPRINT(EM_DIAGRAM):   END;
246882    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246883    +          _NODE_  =                   36;
MPRINT(EM_DIAGRAM):   _NODE_ = 36;
246884    +          _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
246885    +          P_Attrition_Flag0  =     0.98959687906371;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.98959687906371;
246886    +          P_Attrition_Flag1  =     0.01040312093628;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.01040312093628;
246887    +          Q_Attrition_Flag0  =     0.98959687906371;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.98959687906371;
246888    +          Q_Attrition_Flag1  =     0.01040312093628;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.01040312093628;
246889    +          V_Attrition_Flag0  =     0.97630331753554;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.97630331753554;
246890    +          V_Attrition_Flag1  =     0.02369668246445;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.02369668246445;
246891    +          I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246892    +          U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246893    +          END;
MPRINT(EM_DIAGRAM):   END;
246894    +        END;
MPRINT(EM_DIAGRAM):   END;
246895    +      END;
MPRINT(EM_DIAGRAM):   END;
246896    +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246897    +      IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246898    +        RANGE_LOG_Total_Trans_Amt  <     0.03340216054825 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.03340216054825 THEN DO;
246899    +        _NODE_  =                   22;
MPRINT(EM_DIAGRAM):   _NODE_ = 22;
246900    +        _LEAF_  =                   20;
MPRINT(EM_DIAGRAM):   _LEAF_ = 20;
246901    +        P_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0;
246902    +        P_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 1;
246903    +        Q_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0;
246904    +        Q_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 1;
246905    +        V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
246906    +        V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
246907    +        I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246908    +        U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246909    +        END;
MPRINT(EM_DIAGRAM):   END;
246910    +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246911    +        IF  NOT MISSING(RANGE_Total_Revolving_Bal ) AND
246912    +              0.99940405244338 <= RANGE_Total_Revolving_Bal  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_Total_Revolving_Bal ) AND 0.99940405244338 <= RANGE_Total_Revolving_Bal THEN DO;
246913    +          IF  NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND
246914    +            RANGE_SQRT_Total_Ct_Chng_Q4_Q1  <     0.36248390962168 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_SQRT_Total_Ct_Chng_Q4_Q1 ) AND RANGE_SQRT_Total_Ct_Chng_Q4_Q1 < 0.36248390962168 THEN DO;
246915    +            _NODE_  =                   72;
MPRINT(EM_DIAGRAM):   _NODE_ = 72;
246916    +            _LEAF_  =                   28;
MPRINT(EM_DIAGRAM):   _LEAF_ = 28;
246917    +            P_Attrition_Flag0  =     0.27272727272727;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.27272727272727;
246918    +            P_Attrition_Flag1  =     0.72727272727272;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.72727272727272;
246919    +            Q_Attrition_Flag0  =     0.27272727272727;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.27272727272727;
246920    +            Q_Attrition_Flag1  =     0.72727272727272;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.72727272727272;
246921    +            V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246922    +            V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246923    +            I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246924    +            U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246925    +            END;
MPRINT(EM_DIAGRAM):   END;
246926    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246927    +            IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246928    +                   0.5078915992207 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.5078915992207 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246929    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246930    +                RANGE_LOG_Total_Trans_Amt  <     0.69408037642344 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.69408037642344 THEN DO;
246931    +                _NODE_  =                  174;
MPRINT(EM_DIAGRAM):   _NODE_ = 174;
246932    +                _LEAF_  =                   30;
MPRINT(EM_DIAGRAM):   _LEAF_ = 30;
246933    +                P_Attrition_Flag0  =     0.31818181818181;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.31818181818181;
246934    +                P_Attrition_Flag1  =     0.68181818181818;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.68181818181818;
246935    +                Q_Attrition_Flag0  =     0.31818181818181;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.31818181818181;
246936    +                Q_Attrition_Flag1  =     0.68181818181818;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.68181818181818;
246937    +                V_Attrition_Flag0  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.16666666666666;
246938    +                V_Attrition_Flag1  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.83333333333333;
246939    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
246940    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
246941    +                END;
MPRINT(EM_DIAGRAM):   END;
246942    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246943    +                _NODE_  =                  175;
MPRINT(EM_DIAGRAM):   _NODE_ = 175;
246944    +                _LEAF_  =                   31;
MPRINT(EM_DIAGRAM):   _LEAF_ = 31;
246945    +                P_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 1;
246946    +                P_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0;
246947    +                Q_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 1;
246948    +                Q_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0;
246949    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246950    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246951    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246952    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246953    +                END;
MPRINT(EM_DIAGRAM):   END;
246954    +              END;
MPRINT(EM_DIAGRAM):   END;
246955    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246956    +              _NODE_  =                  116;
MPRINT(EM_DIAGRAM):   _NODE_ = 116;
246957    +              _LEAF_  =                   29;
MPRINT(EM_DIAGRAM):   _LEAF_ = 29;
246958    +              P_Attrition_Flag0  =     0.94267515923566;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.94267515923566;
246959    +              P_Attrition_Flag1  =     0.05732484076433;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.05732484076433;
246960    +              Q_Attrition_Flag0  =     0.94267515923566;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.94267515923566;
246961    +              Q_Attrition_Flag1  =     0.05732484076433;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.05732484076433;
246962    +              V_Attrition_Flag0  =               0.9375;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.9375;
246963    +              V_Attrition_Flag1  =               0.0625;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.0625;
246964    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246965    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246966    +              END;
MPRINT(EM_DIAGRAM):   END;
246967    +            END;
MPRINT(EM_DIAGRAM):   END;
246968    +          END;
MPRINT(EM_DIAGRAM):   END;
246969    +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246970    +          IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246971    +                0.34036717463282 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.34036717463282 <= RANGE_LOG_Total_Trans_Amt THEN DO;
246972    +            _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Trans_Ct , BEST12.);
246973    +             %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
246974    +            IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
246975    +              _NODE_  =                  112;
MPRINT(EM_DIAGRAM):   _NODE_ = 112;
246976    +              _LEAF_  =                   25;
MPRINT(EM_DIAGRAM):   _LEAF_ = 25;
246977    +              P_Attrition_Flag0  =     0.97766097240473;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.97766097240473;
246978    +              P_Attrition_Flag1  =     0.02233902759526;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.02233902759526;
246979    +              Q_Attrition_Flag0  =     0.97766097240473;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.97766097240473;
246980    +              Q_Attrition_Flag1  =     0.02233902759526;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.02233902759526;
246981    +              V_Attrition_Flag0  =     0.99528301886792;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99528301886792;
246982    +              V_Attrition_Flag1  =     0.00471698113207;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00471698113207;
246983    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246984    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246985    +              END;
MPRINT(EM_DIAGRAM):   END;
246986    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
246987    +              IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
246988    +                RANGE_LOG_Total_Trans_Amt  <     0.39467030301083 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.39467030301083 THEN DO;
246989    +                _NODE_  =                  170;
MPRINT(EM_DIAGRAM):   _NODE_ = 170;
246990    +                _LEAF_  =                   26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 26;
246991    +                P_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.83333333333333;
246992    +                P_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.16666666666666;
246993    +                Q_Attrition_Flag0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.83333333333333;
246994    +                Q_Attrition_Flag1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.16666666666666;
246995    +                V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
246996    +                V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
246997    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
246998    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
246999    +                END;
MPRINT(EM_DIAGRAM):   END;
247000    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
247001    +                _NODE_  =                  171;
MPRINT(EM_DIAGRAM):   _NODE_ = 171;
247002    +                _LEAF_  =                   27;
MPRINT(EM_DIAGRAM):   _LEAF_ = 27;
247003    +                P_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.21428571428571;
247004    +                P_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.78571428571428;
247005    +                Q_Attrition_Flag0  =     0.21428571428571;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.21428571428571;
247006    +                Q_Attrition_Flag1  =     0.78571428571428;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.78571428571428;
247007    +                V_Attrition_Flag0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.28571428571428;
247008    +                V_Attrition_Flag1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.71428571428571;
247009    +                I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
247010    +                U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
247011    +                END;
MPRINT(EM_DIAGRAM):   END;
247012    +              END;
MPRINT(EM_DIAGRAM):   END;
247013    +            END;
MPRINT(EM_DIAGRAM):   END;
247014    +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
247015    +            IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
247016    +              RANGE_LOG_Total_Trans_Amt  <     0.17794703865872 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND RANGE_LOG_Total_Trans_Amt < 0.17794703865872 THEN DO;
247017    +              _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( G_Total_Relationship_Count , BEST12.);
247018    +               %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
247019    +              IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
247020    +                IF  NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND
247021    +                      0.08908868992172 <= RANGE_LOG_Total_Trans_Amt  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(RANGE_LOG_Total_Trans_Amt ) AND 0.08908868992172 <= RANGE_LOG_Total_Trans_Amt THEN DO;
247022    +                  _NODE_  =                  223;
MPRINT(EM_DIAGRAM):   _NODE_ = 223;
247023    +                  _LEAF_  =                   22;
MPRINT(EM_DIAGRAM):   _LEAF_ = 22;
247024    +                  P_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.14285714285714;
247025    +                  P_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.85714285714285;
247026    +                  Q_Attrition_Flag0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.14285714285714;
247027    +                  Q_Attrition_Flag1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.85714285714285;
247028    +                  V_Attrition_Flag0  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0;
247029    +                  V_Attrition_Flag1  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 1;
247030    +                  I_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '1' ;
247031    +                  U_Attrition_Flag  = '1' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '1' ;
247032    +                  END;
MPRINT(EM_DIAGRAM):   END;
247033    +                ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
247034    +                  _NODE_  =                  222;
MPRINT(EM_DIAGRAM):   _NODE_ = 222;
247035    +                  _LEAF_  =                   21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 21;
247036    +                  P_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.92307692307692;
247037    +                  P_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.07692307692307;
247038    +                  Q_Attrition_Flag0  =     0.92307692307692;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.92307692307692;
247039    +                  Q_Attrition_Flag1  =     0.07692307692307;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.07692307692307;
247040    +                  V_Attrition_Flag0  =                    1;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 1;
247041    +                  V_Attrition_Flag1  =                    0;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0;
247042    +                  I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
247043    +                  U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
247044    +                  END;
MPRINT(EM_DIAGRAM):   END;
247045    +                END;
MPRINT(EM_DIAGRAM):   END;
247046    +              ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
247047    +                _NODE_  =                  165;
MPRINT(EM_DIAGRAM):   _NODE_ = 165;
247048    +                _LEAF_  =                   23;
MPRINT(EM_DIAGRAM):   _LEAF_ = 23;
247049    +                P_Attrition_Flag0  =     0.96840442338072;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.96840442338072;
247050    +                P_Attrition_Flag1  =     0.03159557661927;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.03159557661927;
247051    +                Q_Attrition_Flag0  =     0.96840442338072;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.96840442338072;
247052    +                Q_Attrition_Flag1  =     0.03159557661927;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.03159557661927;
247053    +                V_Attrition_Flag0  =     0.97382198952879;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.97382198952879;
247054    +                V_Attrition_Flag1  =      0.0261780104712;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.0261780104712;
247055    +                I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
247056    +                U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
247057    +                END;
MPRINT(EM_DIAGRAM):   END;
247058    +              END;
MPRINT(EM_DIAGRAM):   END;
247059    +            ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
247060    +              _NODE_  =                  111;
MPRINT(EM_DIAGRAM):   _NODE_ = 111;
247061    +              _LEAF_  =                   24;
MPRINT(EM_DIAGRAM):   _LEAF_ = 24;
247062    +              P_Attrition_Flag0  =     0.99786233433091;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag0 = 0.99786233433091;
247063    +              P_Attrition_Flag1  =     0.00213766566908;
MPRINT(EM_DIAGRAM):   P_Attrition_Flag1 = 0.00213766566908;
247064    +              Q_Attrition_Flag0  =     0.99786233433091;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag0 = 0.99786233433091;
247065    +              Q_Attrition_Flag1  =     0.00213766566908;
MPRINT(EM_DIAGRAM):   Q_Attrition_Flag1 = 0.00213766566908;
247066    +              V_Attrition_Flag0  =     0.99698340874811;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag0 = 0.99698340874811;
247067    +              V_Attrition_Flag1  =     0.00301659125188;
MPRINT(EM_DIAGRAM):   V_Attrition_Flag1 = 0.00301659125188;
247068    +              I_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   I_Attrition_Flag = '0' ;
247069    +              U_Attrition_Flag  = '0' ;
MPRINT(EM_DIAGRAM):   U_Attrition_Flag = '0' ;
247070    +              END;
MPRINT(EM_DIAGRAM):   END;
247071    +            END;
MPRINT(EM_DIAGRAM):   END;
247072    +          END;
MPRINT(EM_DIAGRAM):   END;
247073    +        END;
MPRINT(EM_DIAGRAM):   END;
247074    +      END;
MPRINT(EM_DIAGRAM):   END;
247075    +    END;
MPRINT(EM_DIAGRAM):   END;
247076    +  END;
MPRINT(EM_DIAGRAM):   END;
247077    +
247078    +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
247079    +IF  F_Attrition_Flag  NE '0'
247080    +AND F_Attrition_Flag  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_Attrition_Flag NE '0' AND F_Attrition_Flag NE '1' THEN DO;
247081    +        R_Attrition_Flag0  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = .;
247082    +        R_Attrition_Flag1  = .;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = .;
247083    + END;
MPRINT(EM_DIAGRAM):   END;
247084    + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
247085    +       R_Attrition_Flag0  =  -P_Attrition_Flag0 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag0 = -P_Attrition_Flag0 ;
247086    +       R_Attrition_Flag1  =  -P_Attrition_Flag1 ;
MPRINT(EM_DIAGRAM):   R_Attrition_Flag1 = -P_Attrition_Flag1 ;
247087    +       SELECT( F_Attrition_Flag  );
MPRINT(EM_DIAGRAM):   SELECT( F_Attrition_Flag );
247088    +          WHEN( '0'  ) R_Attrition_Flag0  = R_Attrition_Flag0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_Attrition_Flag0 = R_Attrition_Flag0 +1;
247089    +          WHEN( '1'  ) R_Attrition_Flag1  = R_Attrition_Flag1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_Attrition_Flag1 = R_Attrition_Flag1 +1;
247090    +       END;
MPRINT(EM_DIAGRAM):   END;
247091    + END;
MPRINT(EM_DIAGRAM):   END;
247092    +
247093    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
247094    +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
247095    +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
247096    +
247097    +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
247098     run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE4_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
247099     quit;
247100     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
247102     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
247103     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
247104     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
247105     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
247106     * Tree4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree4: Computing metadata for TRAIN data;
247107     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Tree4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Tree4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Tree4_TRAIN out=WORK.M1YWZOYW noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YWZOYW;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YWZOYW(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1YWZOYW;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1YWZOYW;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1U5HLNQ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U5HLNQ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U5HLNQ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2JBOELF(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U5HLNQ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U5HLNQ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U5HLNQ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1U5HLNQ;
MPRINT(EMADVISECOLUMNS):   set WORK.M1U5HLNQ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part2_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part2_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree4";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_ATTRITION_FLAG1") creator = "Tree4";
MPRINT(EM_DIAGRAM):   when("P_ATTRITION_FLAG0") creator = "Tree4";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree4";
MPRINT(EM_DIAGRAM):   when("ATTRITION_FLAG") model = "Tree4";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "G_CONTACTS_COUNT_12_MON" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "G_MONTHS_ON_BOOK" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_ATTRITION_FLAG0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_ATTRITION_FLAG1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
247475     data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
247476     set EMWS1.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMINFO;
247477     where DATA='Tree4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
247478     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE4_EMINFO.
      WHERE (DATA='Tree4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
247479     data EMWS1.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree4_EMINFO;
247480     length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
247481     input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
247482     cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
247486     run;
247487     data EMWS1.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_EMINFO;
247488     set EMWS1.Tree4_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMINFO WORK.MODELTEMP_INFO;
247489     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
247490     proc sort data = EMWS1.Tree4_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree4_EMINFO NOTHREADS;
247491     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
247492     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
247493     proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
247494     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
247495     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
247496     proc sort data = EMWS1.Tree4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Tree4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
247497     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
247498     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.TREE4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
247499     data EMWS1.Tree4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_EMINFO;
247500     merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
247501     by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
247502     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.TREE4_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
247503     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
247504     delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
247505     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
247506     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.12 seconds
 
NOTE: View EMWS1.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
NOTE: View EMWS1.TREE4_TEST.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.10 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "April 09, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15:11:25" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                April 09, 2022
Time:                15:11:25
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O13IM3VG "D:\478\project\CreditCard_ChurnRate\Workspaces\EMWS1\Tree4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O13IM3VG new;
MPRINT(EM_DIAGRAM):   run;
247530     data EMWS1.Tree4_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree4_EMOUTFIT;
247531     set EMWS1.Tree4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMOUTFIT;
247532     length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
247533     label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
247534     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMOUTFIT.
NOTE: The data set EMWS1.TREE4_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
247535     proc sort data=EMWS1.Tree4_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree4_EMREPORTFIT nothreads;
247536     by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
247537     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMREPORTFIT.
NOTE: The data set EMWS1.TREE4_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
247538     %let _EMwarndup = 0;
247539     %let _EMtargetdup =;
247540     %let _EMASEtargetdup =;
247541     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
247542     set EMWS1.Tree4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMOUTFIT;
247543     if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
247544     call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
247545     call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
247546     call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
247547     end;
MPRINT(EM_DIAGRAM):   end;
247548     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
247549     %let EMEXCEPTIONSTRING=;
247550     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
247551     * REPORT: Tree4;
MPRINT(EM_DIAGRAM):   * REPORT: Tree4;
247552     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
247553     %let EM_ACTION = REPORT;
247554     %let syscc = 0;
247555     %macro main;
247556
247557       %if %upcase(&EM_ACTION) = CREATE %then %do;
247558         filename temp catalog 'sashelp.emmodl.tree_create.source';
247559         %include temp;
247560         filename temp;
247561
247562         %em_tree_create;
247563       %end;
247564
247565        %else
247566        %if %upcase(&EM_ACTION) = TRAIN %then %do;
247567
247568            filename temp catalog 'sashelp.emmodl.tree_train.source';
247569            %include temp;
247570            filename temp;
247571            %em_tree_train;
247572        %end;
247573
247574       %else
247575       %if %upcase(&EM_ACTION) = SCORE %then %do;
247576         filename temp catalog 'sashelp.emmodl.tree_score.source';
247577         %include temp;
247578         filename temp;
247579
247580         %em_tree_score;
247581
247582       %end;
247583
247584       %else
247585       %if %upcase(&EM_ACTION) = REPORT %then %do;
247586
247587            filename temp catalog 'sashelp.emmodl.tree_report.source';
247588            %include temp;
247589            filename temp;
247590
247591            %em_tree_report;
247592        %end;
247593
247594       %else
247595       %if %upcase(&EM_ACTION) = OPENINT %then %do;
247596
247597            filename temp catalog 'sashelp.emmodl.tree_actions.source';
247598            %include temp;
247599            filename temp;
247600            %EM_TREE_OPENTREEVIEWER;
247601
247602        %end;
247603
247604       %else
247605       %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
247606
247607            filename temp catalog 'sashelp.emmodl.tree_actions.source';
247608            %include temp;
247609            filename temp;
247610            %EM_TREE_CLOSETREEVIEWER;
247611
247612        %end;
247613
247614
247615        %doendm:
247616     %mend main;
247617
247618     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
247620    +%macro em_tree_makePlotDs( multipleTar= );
247622    +  %EM_GETNAME(key=OUTSTATS, type=DATA);
247623    +  %EM_GETNAME(key=OUTNODES, type=DATA);
247624    +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
247625    +  %EM_GETNAME(key=OUTRULES, type=DATA);
247627    +  /* determine if validation statistics will be displayed */
247628    +  %let validflag=N;
247629    +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
247630    +    /* determine if validation data exists */
247631    +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
247632    +      %let validflag=Y;
247633    +    %end;
247634    +  %end;
247636    +   /* retrieve name of decmeta even in presence of multiple targets */
247637    +   %let decmeta = ;
247638    +   %if &EM_DEC_DECMETA eq %then %do;
247639    +     data _Target;
247640    +       set &em_data_variableset;
247641    +       where ROLE='TARGET' and USE in('D', 'Y');
247642    +       keep NAME;
247643    +     run;
247644    +     proc sort data=_Target;
247645    +       by NAME;
247646    +     run;
247647    +     proc sort data=EM_TARGETDECINFO;
247648    +       by TARGET;
247649    +     run;
247650    +     data _Target;
247651    +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
247652    +       by NAME;
247653    +       if _a then do;
247654    +         call symput('decmeta', trim(DECMETA));
247655    +       end;
247656    +     run;
247657    +     proc delete data=_Target;run;
247658    +   %end;
247659    +   %else %let decmeta = &EM_DEC_DECMETA;
247662    +  /* retrieve targetEvent from decmeta */
247663    +  %let targetEvent=;
247664    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
247665    +    %if %sysfunc(exist(&DECMETA)) %then %do;
247666    +      data _null_;
247667    +       set &DECMETA(where=(_TYPE_="TARGET"));
247668    +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
247669    +      run;
247670    +    %end;
247671    +  %end;
247673    +  /* retrieve predicted var for targetEvent from decmeta */
247674    +  %let predTarget=;
247675    +  %let predLvl=;
247676    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
247677    +    %if %sysfunc(exist(&DECMETA)) %then %do;
247678    +      data _null_;
247679    +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
247680    +       call symput('predTarget', strip(VARIABLE));
247681    +       call symput('predLvl', strip(LEVEL));
247682    +      run;
247683    +    %end;
247684    +  %end;
247685    +  %else %do;
247686    +    %if %sysfunc(exist(&DECMETA)) %then %do;
247687    +      data _null_;
247688    +       set &DECMETA(where=(_TYPE_="PREDICTED"));
247689    +       call symput('predTarget', strip(VARIABLE));
247690    +      run;
247691    +    %end;
247692    +  %end;
247694    +  /* create BelowText value */
247695    +  data belowtext;
247696    +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
247697    +    keep node belowtext;
247698    +  run;
247700    +  /* replace belowtext with variable label if it exists */
247701    +  data belowtext2;
247702    +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
247703    +    keep node belowtextlbl;
247704    +  run;
247706    +  proc sort data=belowtext; by node; run;
247707    +  proc sort data=belowtext2; by node; run;
247709    +  data belowtext;
247710    +    merge belowtext belowtext2(in=_a);
247711    +    by node;
247712    +    if _a then belowtext=belowtextlbl;
247713    +    keep node belowtext;
247714    +  run;
247716    +  /* create AboveText value */
247717    +  data abovetext;
247718    +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
247719    +  run;
247720    +  proc sort data=abovetext; by node numeric_value; run;
247722    +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
247723    +  data abovetext;
247724    +    set abovetext(rename=(node=parent));
247725    +    by parent numeric_value;
247726    +    retain abovetext tempstring flag branch origval origchar ;
247727    +    length abovetext $256;
247728    +    length tempstring origchar $64;
247730    +    if STAT in ("INTERVAL", "ORDINAL") then do;
247731    +      if first.parent then do;
247732    +        if missing(character_value) then do;
247733    +          numeric_value = round(numeric_value, &sp_precision);
247734    +          abovetext = "< "||strip(NUMERIC_VALUE);
247735    +          branch = 1;
247736    +          origval = numeric_value;
247737    +          output;
247738    +        end;
247739    +        else do;
247740    +          abovetext = "< "||strip(CHARACTER_VALUE);
247741    +          branch = 1;
247742    +          origchar = character_value;
247743    +          output;
247744    +        end;
247746    +        if first.parent AND last.parent then do;
247747    +          if missing(character_value) then do;
247748    +            numeric_value = round(numeric_value, &sp_precision);
247749    +            branch = branch + 1;
247750    +            abovetext = ">= "||strip(NUMERIC_VALUE);
247751    +            output;
247752    +          end;
247753    +          else do;
247754    +            branch = branch + 1;
247755    +            abovetext = ">= "||strip(CHARACTER_VALUE);
247756    +            output;
247757    +          end;
247758    +        end;
247759    +      end;
247760    +      else if last.parent then do;
247761    +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
247762    +          if missing(character_value) then do;
247763    +            numeric_value = round(numeric_value, &sp_precision);
247764    +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
247765    +          end;
247766    +          else do;
247767    +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
247768    +          end;
247769    +          branch = branch + 1;
247770    +          output;
247772    +          if missing(character_value) then do;
247773    +            numeric_value = round(numeric_value, &sp_precision);
247774    +            abovetext = ">= "||strip(NUMERIC_VALUE);
247775    +          end;
247776    +          else do;
247777    +            abovetext = ">= "||strip(CHARACTER_VALUE);
247778    +          end;
247779    +          branch = branch + 1;
247780    +          output;
247781    +        end;
247782    +        else do;
247783    +          if missing(character_value) then do;
247784    +            numeric_value = round(numeric_value, &sp_precision);
247785    +            abovetext = ">= "||strip(NUMERIC_VALUE);
247786    +          end;
247787    +          else do;
247788    +            abovetext = ">= "||strip(CHARACTER_VALUE);
247789    +          end;
247790    +          branch = branch + 1;
247791    +          output;
247792    +        end;
247793    +      end;
247794    +      else do;
247795    +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
247796    +          if missing(character_value) then do;
247797    +            numeric_value = round(numeric_value,&sp_precision);
247798    +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
247799    +            origval = numeric_value;
247800    +          end;
247801    +          else do;
247802    +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
247803    +            origchar = character_value;
247804    +          end;
247805    +          branch = branch + 1;
247806    +          output;
247808    +        end;
247809    +        else do;
247810    +          if missing(character_value) then do;
247811    +            numeric_value = round(numeric_value, &sp_precision);
247812    +            abovetext = ">= "||strip(NUMERIC_VALUE);
247813    +            origval = numeric_value;
247814    +          end;
247815    +          else do;
247816    +            abovetext = ">= "||strip(CHARACTER_VALUE);
247817    +            origval = character_value;
247818    +          end;
247819    +          branch = branch + 1;
247820    +          output;
247821    +        end;
247822    +      end;
247823    +    end;
247824    +    else do;
247825    +       if first.numeric_value then do;
247826    +         flag = 0;
247827    +         abovetext = strip(CHARACTER_VALUE);
247828    +         branch = numeric_value;
247829    +         if first.numeric_value AND last.numeric_value then do;
247830    +           output;
247831    +         end;
247832    +       end;
247833    +       else if last.numeric_value then do;
247834    +         if flag=0 then do;
247835    +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
247836    +           length = length(strip(tempstring));
247837    +           if length < 32 then do;
247838    +             abovetext = strip(tempstring);
247839    +           end;
247840    +           else do;
247841    +             abovetext = strip(abovetext)||", ...";
247842    +             flag = 1;
247843    +           end;
247844    +         end;
247845    +         branch = numeric_value;
247846    +         output;
247847    +       end;
247848    +       else do;
247849    +         if flag=0 then do;
247850    +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
247851    +           length = length(strip(tempstring));
247852    +           if length < 32 then do;
247853    +             abovetext = strip(tempstring);
247854    +           end;
247855    +           else do;
247856    +             abovetext = strip(abovetext)||", ...";
247857    +             flag=1;
247858    +           end;
247859    +         end;
247860    +         branch = numeric_value;
247861    +       end;
247862    +    end;
247863    +    keep parent branch abovetext;
247864    +  run;
247866    +  /* Missing value to abovetext */
247867    +  data tempmissing;
247868    +    set &EM_USER_OUTRULES;
247869    +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
247870    +    rename node=parent numeric_value=branch character_value=misschar;
247871    +  run;
247874    +  proc sort data=abovetext; by parent branch; run;
247875    +  proc sort data=tempmissing; by parent branch; run;
247876    +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
247878    +  data tempoutnodes;
247879    +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
247880    +    by parent branch;
247881    +    length traintotal validtotal 8;
247882    +    retain traintotal validtotal;
247884    +    if _a then do;
247885    +      if ^MISSING(abovetext) then do;
247886    +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
247887    +      end;
247888    +      else do;
247889    +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
247890    +      end;
247891    +    end;
247892    +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
247894    +    if node=1 then do;
247895    +      traintotal = N;
247896    +      validtotal=VN;
247897    +    end;
247899    +    drop role rank stat misschar belowtext;
247900    +  run;
247901    +  proc sort data=tempoutnodes; by node; run;
247902    +  proc sort data=belowtext; by node; run;
247904    +  data tempoutnodes;
247905    +    merge tempoutnodes belowtext;
247906    +    by node;
247908    +  run;
247910    +  /* determine if adjusted counts exists; if so, use these vs true counts */
247911    +  %let adjusted = N;
247912    +  %let npriors = 0;
247913    +  data _null_ ;
247914    +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
247915    +    if eof then do ;
247916    +      call symput("npriors" , strip(put(_N_,best.))) ;
247917    +    end;
247918    +  run;
247919    +  %if &npriors gt 0 %then %let adjusted=Y;
247922    +  /* create a table with targetUsed and targetLevel columns for each node */
247923    +  data temptarmeta;
247924    +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
247925    +    %if &multipleTar eq N %then %do;
247926    +      AND USE in ('D', 'Y')
247927    +    %end;
247928    +    ));
247929    +    length TARGET $32;
247930    +    Target=name;
247931    +    keep target level;
247932    +  run;
247934    +  %if &multipleTar eq Y %then %do;
247935    +    data temptargetused;
247936    +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
247937    +      keep node target;
247938    +    run;
247939    +    proc sort data=temptargetused; by target; run;
247940    +    proc sort data=temptarmeta; by target; run;
247941    +    data temptargetused;
247942    +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
247943    +      by target;
247944    +      if _a and _b;
247945    +    run;
247946    +  %end;
247947    +  %else %do;
247948    +    data temptargetused;
247949    +      set &EM_USER_OUTSTATS;
247950    +      length target $32 tarlevel $10;
247951    +      target="%EM_TARGET";
247952    +      tarlevel="%EM_TARGET_LEVEL";
247953    +      keep node target tarlevel;
247954    +    run;
247955    +    proc sort data=temptargetused nodupkey; by node; run;
247956    +  %end;
247958    +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
247959    +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
247960    +  proc sort data=temptargetused; by node; run;
247963    +  /* create tables for all interval targets as well as all class targets */
247964    +  data tempinterval tempclass;
247965    +    merge tempoutstats temptargetused( rename=(target=targetused));
247966    +    by node;
247967    +    %if "&multipleTar" eq "Y" %then %do;
247968    +      if ((missing(Target)) OR (target=targetused ));
247969    +    %end;
247971    +    if tarlevel="INTERVAL" then output tempinterval;
247972    +    else output tempclass;
247973    +  run;
247975    +  /* initialize intTarget and classTarget flags */
247976    +  %let em_intNobs =0;
247977    +  %let em_classNobs = 0;
247978    +  %let em_intTarget= N;
247979    +  %let em_classTarget= N;
247981    +  proc sql;
247982    +    reset noprint;
247983    +    select count(*) into :em_intNobs from tempinterval;
247984    +  quit;
247985    +  proc sql;
247986    +    reset noprint;
247987    +    select count(*) into :em_classNobs from tempclass;
247988    +  quit;
247990    +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
247991    +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
247993    +  /* retrieve all information for interval targets */
247994    +  %if &em_intTarget eq Y %then %do;
247996    +    /* determine if leaf variable exists */
247997    +    %let dsid=%sysfunc(open(tempinterval,i));
247998    +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
247999    +    %let rc=%sysfunc(close(&dsid));
248001    +    proc transpose data=tempinterval
248002    +      %if &leafexists %then %do;
248003    +        (drop=leaf)
248004    +      %end;
248005    +      %if &validexist %then %do;
248006    +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
248007    +      %end;
248008    +      %else %do;
248009    +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
248010    +      %end;
248011    +      by node;
248012    +      id statname;
248013    +    run;
248014    +    data tempinterval;
248015    +      set tempinterval;
248016    +      if missing(N) then delete;
248017    +    run;
248018    +  %end;
248020    +  /* retrieve all information for class targets */
248021    +  %if &em_classTarget eq Y %then %do;
248022    +    proc sort data=tempclass; by node category; run;
248023    +    %if &validflag eq N %then %do;
248024    +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
248025    +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
248026    +    %end;
248027    +    %else %do;
248028    +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
248029    +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
248030    +    %end;
248031    +      set tempclass;
248033    +      %if &validflag eq N %then %do;
248034    +        %if "&adjusted" eq "N" %then %do;
248035    +          if statname="N" then output tempn;
248036    +        %end;
248037    +        %else %do;
248038    +          if statname="NPRIORS" then output tempn;
248039    +        %end;
248040    +        else if statname="PREDICTION" then output temppredict;
248041    +        else if statname="PROBABILITY" then output tempprob;
248042    +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
248043    +        else if statname="ALTERNATIVE LOSS" then output temploss;
248044    +      %end;
248045    +      %else %do;
248046    +        %if "&adjusted" eq "N" %then %do;
248047    +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
248048    +        %end;
248049    +        %else %do;
248050    +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
248051    +        %end;
248052    +        else if statname="PREDICTION" then output temppredict;
248053    +        else if statname="PROBABILITY" then output tempprob;
248054    +        else if statname="VALID: PROBABILITY" then output tempvprob;
248055    +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
248056    +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
248057    +      %end;
248058    +    run;
248061    +    /* determine if profit/loss exists in tempprofit */
248062    +    %let em_profitflag=0;
248063    +    %let em_lossflag=0;
248064    +    proc sql;
248065    +      reset noprint;
248066    +      select count(*) into :em_profitflag from tempprofit;
248067    +    quit;
248068    +    proc sql;
248069    +      reset noprint;
248070    +      select count(*) into :em_lossflag from temploss;
248071    +    quit;
248073    +    %if &validFlag eq Y %then %do;
248074    +      proc transpose data=tempn
248075    +        %if "&adjusted" eq "N" %then %do;
248076    +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
248077    +        %end;
248078    +        %else %do;
248079    +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
248080    +        %end;
248081    +        by node;
248082    +        id statname;
248083    +      run;
248084    +      %if &em_profitflag ne 0 %then %do;
248085    +        proc transpose data=tempprofit out=tempprofit;
248086    +          by node category;
248087    +          id statname ;
248088    +        run;
248089    +      %end;
248090    +      %if &em_lossflag ne 0 %then %do;
248091    +        proc transpose data=temploss out=temploss;
248092    +          by node category;
248093    +          id statname ;
248094    +        run;
248095    +      %end;
248096    +      data tempprob;
248097    +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
248098    +        by node
248099    +        %if &multipleTar eq Y %then %do;
248100    +          target
248101    +        %end;
248102    +        category;
248103    +      run;
248104    +    %end;
248106    +    /* store percentcorrect value */
248107    +    data temppredict;
248108    +      merge tempprob temppredict(in=_a);
248109    +      by node category;
248110    +      if _a then do;
248111    +        percentCorrect = statvalue;
248112    +        %if &validFlag eq Y %then %do;
248113    +          vpercentCorrect= vstatvalue;
248114    +        %end;
248115    +      end;
248116    +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
248117    +      %if &validFlag eq Y %then %do;
248118    +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
248119    +      %end;
248120    +      ;
248121    +      if missing(percentCorrect) then delete;
248122    +      drop target;
248123    +    run;
248125    +    /* build profittext */
248126    +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
248127    +      data tempprofittext(keep= node profittext profitloss);
248128    +        length profittext $800 profitloss 8.;
248129    +        retain profittext profitloss;
248131    +        merge tempprob
248132    +        %if &em_profitflag ne 0 %then %do;
248133    +          tempprofit
248134    +        %end;
248135    +        %else %if &em_lossflag ne 0 %then %do;
248136    +          temploss
248137    +        %end;
248138    +        ;
248139    +        by node category;
248141    +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
248142    +        %let profittype = &EM_PROPERTY_PROFITLOSS;
248143    +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
248144    +          %let profittype = ALL;
248145    +        %end;
248147    +        /* create the profitloss variable for nodecolor if selected */
248148    +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
248150    +        %if "&profittype" eq "ALL" %then %do;
248151    +          if strip(CATEGORY)="&targetEvent" then do;
248152    +            profitloss=statvalue;
248153    +          end;
248154    +          if first.node then do;
248155    +            %if &validFlag eq N %then %do;
248156    +             %if &em_profitflag ne 0 %then %do;
248157    +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
248158    +             %end;
248159    +             %if &em_lossflag ne 0 %then %do;
248160    +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
248161    +             %end;
248162    +            %end;
248163    +            %else %do;
248164    +             %if &em_profitflag ne 0 %then %do;
248165    +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
248165   !+14.&EM_PROPERTY_SPLITPRECISION);
248166    +             %end;
248167    +             %if &em_lossflag ne 0 %then %do;
248168    +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
248169    +             %end;
248170    +            %end;
248171    +          end;
248172    +          else if last.node then do;
248173    +            %if &validFlag eq N %then %do;
248174    +             %if &em_profitflag ne 0 %then %do;
248175    +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
248176    +             %end;
248177    +             %if &em_lossflag ne 0 %then %do;
248178    +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
248179    +             %end;
248180    +             /*if CATEGORY="&targetEvent" then do;
248181    +               profitloss=statvalue;
248182    +             end;*/
248183    +            %end;
248184    +            %else %do;
248185    +             %if &em_profitflag ne 0 %then %do;
248186    +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
248186   !+14.&EM_PROPERTY_SPLITPRECISION);
248187    +                if CATEGORY="&targetEvent" then do;
248188    +                 profitloss=ALTERNATIVE_PROFIT;
248189    +                end;
248190    +             %end;
248191    +             %if &em_lossflag ne 0 %then %do;
248192    +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
248192   !+14.&EM_PROPERTY_SPLITPRECISION);
248193    +                if CATEGORY="&targetEvent" then do;
248194    +                  profitloss=ALTERNATIVE_LOSS;
248195    +                end;
248196    +             %end;
248197    +            %end;
248198    +            output;
248199    +          end;
248200    +          else do;
248201    +            %if &validFlag eq N %then %do;
248202    +             %if &em_profitflag ne 0 %then %do;
248203    +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
248204    +             %end;
248205    +             %if &em_lossflag ne 0 %then %do;
248206    +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
248207    +             %end;
248208    +            %end;
248209    +            %else %do;
248210    +             %if &em_profitflag ne 0 %then %do;
248211    +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
248211   !+14.&EM_PROPERTY_SPLITPRECISION);
248212    +             %end;
248213    +             %if &em_lossflag ne 0 %then %do;
248214    +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
248214   !+14.&EM_PROPERTY_SPLITPRECISION);
248215    +             %end;
248216    +            %end;
248217    +          end;
248218    +        %end;
248219    +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
248220    +          if strip(CATEGORY) = "&targetevent" then do;
248221    +            %if &validFlag eq N %then %do;
248222    +             %if &em_profitflag ne 0 %then %do;
248223    +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
248224    +             %end;
248225    +             %if &em_lossflag ne 0 %then %do;
248226    +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
248227    +             %end;
248228    +             profitloss=statvalue;
248229    +            %end;
248230    +            %else %do;
248231    +             %if &em_profitflag ne 0 %then %do;
248232    +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
248232   !+14.&EM_PROPERTY_SPLITPRECISION);
248233    +                profitloss=ALTERNATIVE_PROFIT;
248234    +             %end;
248235    +             %if &em_lossflag ne 0 %then %do;
248236    +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
248237    +                profitloss=ALTERNATIVE_LOSS;
248238    +             %end;
248239    +            %end;
248240    +            output;
248241    +          end;
248242    +        %end;
248243    +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
248244    +          if strip(CATEGORY) = "&targetevent" then do;
248245    +            %if &validFlag eq N %then %do;
248246    +             profitloss=statvalue;
248247    +            %end;
248248    +            %else %do;
248249    +             %if &em_profitflag ne 0 %then %do;
248250    +                profitloss=ALTERNATIVE_PROFIT;
248251    +             %end;
248252    +             %if &em_lossflag ne 0 %then %do;
248253    +                profitloss=ALTERNATIVE_LOSS;
248254    +             %end;
248255    +            %end;
248256    +            output;
248257    +          end;
248258    +        %end;
248259    +      run;
248260    +    %end;
248262    +    data tempprob(keep= node probtext);
248263    +      length probtext $800;
248264    +      retain probtext;
248265    +      set tempprob ;
248266    +      by node;
248268    +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
248269    +      %let probtype = &EM_PROPERTY_TARGET;
248270    +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
248271    +        %let probtype = ALL;
248272    +      %end;
248274    +      %if "&probtype" eq "ALL" %then %do;
248275    +        if first.node then do;
248276    +          %if &validFlag eq N %then %do;
248277    +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
248278    +          %end;
248279    +          %else %do;
248280    +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
248281    +          %end;
248282    +        end;
248283    +        else if last.node then do;
248284    +          %if &validFlag eq N %then %do;
248285    +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
248286    +          %end;
248287    +          %else %do;
248288    +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
248289    +          %end;
248290    +          output;
248291    +        end;
248292    +        else do;
248293    +          %if &validFlag eq N %then %do;
248294    +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
248295    +          %end;
248296    +          %else %do;
248297    +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
248298    +          %end;
248299    +        end;
248300    +      %end;
248301    +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
248302    +        if strip(CATEGORY) = "&targetevent" then do;
248303    +          %if &validFlag eq N %then %do;
248304    +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
248305    +          %end;
248306    +          %else %do;
248307    +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
248308    +          %end;
248309    +          output;
248310    +        end;
248311    +      %end;
248312    +      %else %if "&probtype" eq "NONE" %then %do;
248313    +        if last.node then do;
248314    +          output;
248315    +        end;
248316    +      %end;
248317    +    run;
248318    +  %end;
248320    +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
248322    +  %let oldexists=0;
248323    +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
248324    +     data old_tree_plot;
248325    +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
248326    +        rename nodecolor=oldnodecolor;
248327    +     run;
248329    +     proc sort data=old_tree_plot;
248330    +        by node;
248331    +     run;
248333    +     %let oldexists=1;
248334    +  %end;
248336    +  data &EM_USER_TREE_PLOT;
248337    +    length textall $800;
248338    +    merge tempoutnodes temptargetused
248340    +    %if &em_intTarget eq Y %then %do;
248341    +      tempinterval
248342    +    %end;
248344    +    %if &em_classTarget eq Y %then %do;
248346    +      %if &validFlag eq N %then %do;
248347    +        tempn(rename=(statvalue=N))
248348    +      %end;
248349    +      %else %do;
248350    +        tempn
248351    +      %end;
248353    +      temppredict tempprob
248355    +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
248356    +        tempprofittext
248357    +      %end;
248358    +    %end;
248359    +    ;
248360    +    by node;
248362    +    /* build nodetext based on user selection */
248363    +    textall="";
248365    +    %if &em_intTarget eq Y %then %do;
248366    +    if tarlevel="INTERVAL" then do;
248367    +      /* Nodeid */
248368    +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
248369    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
248370    +      %end;
248372    +      /* Target identifier if multiple targets are used */
248373    +      %if "&multipleTar" eq "Y" %then %do;
248374    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
248375    +      %end;
248377    +      %if &validFlag eq Y %then %do;
248378    +         /* Column labels displayed in validflag eq Y only */
248379    +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
248380    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
248380   !+ noquote ))";
248381    +         %end;
248383    +         /* Average values */
248384    +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
248385    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
248386    +         %end;
248388    +         /* RASE */
248389    +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
248390    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
248391    +         %end;
248393    +         /* Count */
248394    +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
248395    +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
248396    +         %end;
248397    +      %end;
248398    +      %else %do;
248399    +         /* Average values */
248400    +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
248401    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
248402    +         %end;
248404    +         /* RASE */
248405    +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
248406    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
248407    +         %end;
248409    +         /* Count */
248410    +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
248411    +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
248412    +         %end;
248413    +      %end;
248415    +      /* nodecolor */
248416    +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
248417    +        nodecolor=PREDICTION;
248418    +      %end;
248419    +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
248420    +        nodecolor=RASE;
248421    +      %end;
248422    +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
248423    +        nodecolor=1;
248424    +      %end;
248426    +    end;
248427    +    %end;
248428    +    %if &em_classTarget eq Y %then %do;
248429    +    if tarlevel^="INTERVAL" then  do;
248431    +      /* Nodeid */
248432    +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
248433    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
248434    +      %end;
248435    +      /* Target identifier if multiple targets are used */
248436    +      %if "&multipleTar" eq "Y" %then %do;
248437    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
248438    +      %end;
248440    +      /* Predicted values */
248441    +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
248442    +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
248443    +      %end;
248445    +      /* Column labels displayed in validflag eq Y only */
248446    +      %if "&ValidFlag" eq "Y" %then %do;
248447    +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
248448    +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
248448   !+ noquote ))";
248449    +        %end;
248450    +      %end;
248452    +      /* Target Values */
248453    +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
248454    +        textall=strip(textall)||"0A"x||strip(probtext);
248455    +      %end;
248457    +      /* include profit or loss for all target levels */
248458    +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
248459    +        textall=strip(textall)||"0A"x||strip(profittext);
248460    +      %end;
248462    +      %if &validFlag eq N %then %do;
248463    +        /* Percent Correct */
248464    +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
248465    +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
248466    +        %end;
248468    +         /* Count */
248469    +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
248470    +          %if "&adjusted" eq "N" %then %do;
248471    +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
248472    +          %end;
248473    +          %else %do;
248474    +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
248475    +          %end;
248476    +         %end;
248477    +      %end;
248478    +      %else %do;
248479    +        /* Percent Correct */
248480    +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
248481    +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
248482    +        %end;
248484    +         /* Count */
248485    +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
248486    +          %if "&adjusted" eq "N" %then %do;
248487    +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
248488    +          %end;
248489    +          %else %do;
248490    +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
248491    +          %end;
248492    +         %end;
248493    +      %end;
248495    +      /* nodecolor */
248496    +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
248497    +       %if &multipleTar ne Y %then %do;
248498    +        nodecolor=&predTarget;
248499    +       %end;
248500    +       %else %do;
248501    +         nodecolor=percentcorrect;
248502    +       %end;
248503    +      %end;
248504    +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
248505    +        nodecolor=percentcorrect;
The SAS System
 
248506    +      %end;
248507    +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
248508    +        nodecolor=1;
248509    +      %end;
248510    +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
248511    +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
248512    +          nodecolor=percentcorrect;
248513    +        %end;
248514    +        %else %do;
248515    +          nodecolor=profitloss;
248516    +        %end;
248517    +      %end;
248519    +    end;
248520    +    %end;
248521    +    %if &em_intTarget eq Y %then %do;
248522    +     drop  PREDICTION  TARGET TARLEVEL
248523    +     %if &ValidFlag eq Y %then %do;
248524    +         VPREDICTION
248525    +     %end;
248526    +     ;
248527    +    %end;
248528    +    %if &em_classTarget eq Y %then %do;
248529    +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
248530    +     %if &ValidFlag eq Y %then %do;
248531    +         VSTATVALUE
248532    +     %end;
248533    +     ;
248534    +    %end;
248536    +  run;
248538    +  /* add leaf index information to plotds - based on primary target only*/
248539    +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248540    +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
248541    +      set &EM_USER_OUTSTATS;
248542    +      if ((statname="PROBABILITY"
248543    +      %if &validexist %then %do;
248544    +       or statname="VALID: PROBABILITY"
248545    +      %end;
248546    +      ) AND (CATEGORY="&TARGETEVENT")
248547    +      %if "&multipleTar" eq "Y" %then %do;
248548    +        AND (Target="%EM_TARGET")
248549    +      %end;
248550    +      );
248551    +    run;
248553    +    %if &validexist %then %do;
248554    +      proc sort data=tempprob; by node; run;
248555    +      %let vpredTarget = V%substr(&predTarget, 2);
248556    +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
248557    +         by node;
248558    +         id statname;
248559    +      run;
248560    +    %end;
248561    +  %end;
248562    +  %else %do;
248563    +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
248564    +      set &EM_USER_OUTSTATS;
248565    +      if ((statname="PREDICTION"
248566    +      %if &validexist %then %do;
248567    +       or statname="VALID: PREDICTION"
248568    +      %end;
248569    +      )
248570    +      %if "&multipleTar" eq "Y" %then %do;
248571    +        AND (Target="%EM_TARGET")
248572    +      %end;
248573    +      );
248574    +    run;
248575    +    %if &validexist %then %do;
248576    +      proc sort data=tempprob; by node; run;
248577    +      %let vpredTarget = V%substr(&predTarget, 2);
248578    +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
248579    +         by node;
248580    +         id statname;
248581    +      run;
248582    +    %end;
248583    +  %end;
248585    +  proc sort data=tempprob; by node; run;
248586    +  data tempoutnodes;
248587    +    merge tempoutnodes tempprob;
248588    +    by node;
248589    +  run;
248591    +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
248592    +  data tempnodes;
248593    +    retain traintotal validtotal;
248594    +    set tempnodes(where=(leaf ne . ));
248595    +    tprob=round(&predTarget, .01);
248596    +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248597    +      percevent_train=round(tprob*100, .01);
248598    +    %end;
248599    +    %else %do;
248600    +      percevent_train=tprob;
248601    +    %end;
248603    +    perc_train=round((n/traintotal)*100, 0.01);
248604    +    /* leafwidth already has a *10 multiplier */
248605    +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
248607    +    %if &validexist %then %do;
248608    +      %let vpredTarget = V%substr(&predTarget,2);
248609    +      vprob=round(&vpredTarget, .01);
248610    +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248611    +        percevent_valid=round(vprob*100, .01);
248612    +      %end;
248613    +      %else %do;
248614    +        percevent_valid=vprob;
248615    +      %end;
248616    +      perc_valid=round((vn/validtotal)*100, .01);
248617    +    %end;
248619    +    index=_N_;
248620    +    keep node index tprob perc_train percevent_train
248621    +    %if &validexist %then %do;
248622    +        vprob percevent_valid perc_valid
248623    +    %end;
248624    +    ;
248625    +  run;
248626    +  proc sort data=tempnodes; by node; run;
248627    +  data &EM_USER_TREE_PLOT;
248628    +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
248629    +    by node;
248630    +    if missing(node) then delete;
248631    +    %if &oldexists %then %do;
248632    +      if missing(nodecolor) then nodecolor=oldnodecolor;
248633    +      drop oldnodecolor;
248634    +    %end;
248635    +    abovetext = compbl(abovetext);
248637    +    /* add variable labels */
248638    +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
248639    +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
248640    +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
248641    +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
248642    +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
248643    +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
248645    +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248646    +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
248647    +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
248648    +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
248649    +          %end;
248650    +          %else %do;
248651    +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
248652    +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
248653    +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
248654    +          %end;
248655    +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
248657    +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
248658    +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
248659    +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248660    +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
248661    +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
248662    +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
248663    +          %end;
248664    +          %else %do;
248665    +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
248666    +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
248667    +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
248668    +          %end;
248669    +    ;
248670    +  run;
248672    +  /* delete temporary tables */
248673    +  proc datasets lib=work nolist;
248674    +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
248675    +  run;
248677    +%mend em_tree_makePlotDs;
248681    +%macro em_tree_report;
248683    +   /* report properties */
248684    +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
248685    +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
248686    +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
248687    +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
248688    +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
248689    +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
248690    +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
248691    +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
248692    +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
248693    +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
248694    +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
248695    +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
248696    +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
248698    +   %let validexist=0;
248699    +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
248700    +     %let validexist=1;
248701    +   %end;
248703    +   /* determine if multiple targets will be processed */
248704    +   %let em_tree_multipleTargets=N;
248705    +   %let em_tree_numTarget=1;
248706    +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
248707    +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
248708    +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
248709    +         %let em_tree_multipleTargets=N;
248710    +      %end;
248711    +      %else %do;
248712    +        data _null_;
248713    +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
248714    +          if eof then
248715    +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
248716    +        run;
248718    +        %if &em_tree_numTarget gt 1 %then %do;
248719    +           %let em_tree_multipleTargets=Y;
248720    +        %end;
248721    +     %end;
248722    +   %end;
248724    +  %if "&em_tree_multipleTargets" eq "N" %then %do;
248726    +   /* variable importance */
248727    +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
248728    +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
248730    +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
248731    +     /* and the columns may not be generated                                                                                 */
248732    +     %let em_tree_cvexists=;
248733    +     %let em_tree_surrexists=.;
248734    +     data _null_;
248735    +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
248736    +       if eof then do ;
248737    +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
248738    +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
248739    +       end;
248740    +     run;
248742    +     data &EM_USER_OUTIMPORT;
248743    +         set &EM_USER_OUTIMPORT;
248744    +         /* format columns based on Precison value specified */
248745    +         format importance 15.&EM_PROPERTY_PRECISION
248746    +              %if &validexist %then %do;
248747    +                vimportance ratio 15.&EM_PROPERTY_PRECISION
248748    +              %end;
248749    +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
248750    +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
248751    +              %end;
248752    +         ;
248753    +     run;
248755    +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
248756    +     proc print data=&EM_USER_OUTIMPORT
248757    +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
248758    +          (where=((nrules>0) OR (nsurrogates>0)))
248759    +        %end;
248760    +        %else %do;
248761    +           (where=(nrules>0))
248762    +        %end;
248763    +        label noobs
248764    +        ;
248765    +     run;
248766    +     title10;
248768    +   %end;
248770    +   /* Sequence */
248771    +   %EM_GETNAME(key=OUTSEQ, type=DATA);
248772    +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
248773    +   data _null_ ;
248774    +      set &EM_USER_outseq (obs=2) end=eof ;
248775    +      if eof then do ;
248776    +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
248777    +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
248778    +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
248779    +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
248780    +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
248781    +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
248782    +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
248783    +      end;
248784    +    run;
248786    +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
248787    +      data &EM_USER_OUTSEQ;
248788    +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
248789    +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
248790    +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248791    +           _XMISC_=_VMISC_
248792    +        %end;
248793    +        %if "&em_tree_aprof" ne "."  %then %do;
248794    +           _XAPROF_=_VAPROF_
248795    +           _XPROF_ = _VPROF_
248796    +        %end;
248797    +        %if "&em_tree_aloss" ne "."  %then %do;
248798    +           _XALOSS_=_VALOSS_
248799    +        %end;
248800    +        %if "&EM_TREE_PRIOR" ne "." %then %do;
248801    +           _XPASE_ = _VPASE_
248802    +           _XPMISC_ = _VPMISC_
248803    +        %end;
248805    +        ));
248806    +     %end;
248807    +     %else %do;
248808    +        set &EM_USER_OUTSEQ;
248809    +     %end;
248811    +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
248812    +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248813    +            _MISC_   15.&EM_PROPERTY_PRECISION
248814    +         %end;
248815    +         %if "&EM_TREE_PRIOR" ne "." %then %do;
248816    +            _PASE_  15.&EM_PROPERTY_PRECISION
248817    +            _PMISC_ 15.&EM_PROPERTY_PRECISION
248818    +         %end;
248819    +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
248820    +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
248821    +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248822    +               _VMISC_ 15.&EM_PROPERTY_PRECISION
248823    +            %end;
248824    +            %if "&EM_TREE_PRIOR" ne "." %then %do;
248825    +              _VPASE_  15.&EM_PROPERTY_PRECISION
248826    +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
248827    +            %end;
248828    +         %end;
248829    +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
248830    +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
248831    +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248832    +               _VMISC_ 15.&EM_PROPERTY_PRECISION
248833    +            %end;
248834    +         %end;
248835    +         %if "&em_tree_seq" ne "." %then %do;
248836    +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
248837    +         %end;
248838    +         %if "&em_tree_vseq" ne "." %then %do;
248839    +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
248840    +         %end;
248841    +         %if "&em_tree_aprof" ne "." %then %do;
248842    +           _APROF_ 15.&EM_PROPERTY_PRECISION
248843    +           _PROF_ 15.&EM_PROPERTY_PRECISION
248844    +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
248845    +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
248846    +             _VPROF_ 15.&EM_PROPERTY_PRECISION
248847    +           %end;
248848    +         %end;
248849    +         %else %if "&em_tree_aloss" ne "." %then %do;
248850    +           _ALOSS_  15.&EM_PROPERTY_PRECISION
248851    +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
248852    +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
248853    +           %end;
248854    +         %end;
248855    +      ;
248856    +    run;
248857    +   %end;
248859    +   /* Observation Based Importance */
248860    +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
248862    +      /* need to check for 0 obs */
248863    +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
248864    +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
248865    +      %let rc=%sysfunc(close(&dsid));
248867    +      %if &onobs %then %do;
248868    +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
248869    +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
248871    +         data &EM_USER_OUTOBSIMP;
248872    +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
248873    +           if _a;
248874    +           by _INPUT1_;
248875    +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
248876    +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
248877    +                     _MISC_ 15.&EM_PROPERTY_PRECISION
248878    +                   %end;
248879    +                   ;
248880    +         run;
248881    +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
248882    +      %end;
248883    +   %end;
248885    +  %end;
248887    +  /* create dataset to support tree diagram and icicle plot */
248888    +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
248889    +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
248891    +  /* display tree diagram */
248892    +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
248893    +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
248895    +  /* display icicle diagram */
248896    +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
248897    +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
248899    +  /* Leaf Statistics Plot */
248900    +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
248902    +  /* print leaf information to output window */
248903    +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
248905    +     proc sort data=&EM_USER_TREE_PLOT out=t;
248906    +       by descending N;
248907    +     run;
248909    +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
248910    +     %local vn;
248911    +     data _null_;
248912    +       set t (obs=2) end=eof;
248913    +       if eof then do;
248914    +         call symput("vn", strip(put(vn, best.)));
248915    +       end;
248916    +     run;
248918    +     data t;
248919    +       set t;
248920    +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
248921    +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
248922    +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
248923    +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
248924    +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
248925    +       %end;
248926    +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
248927    +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
248928    +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
248929    +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
248930    +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
248931    +          %end;
248932    +       %end;
248933    +       ;
248934    +     run;
248936    +     /* determine if rase is found in t */
248937    +    %let dsid=%sysfunc(open(t,i));
248938    +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
248939    +    %let rc=%sysfunc(close(&dsid));
248941    +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
248942    +     proc print data=t noobs label;
248943    +       where tprob ne .;
248944    +       var node depth N tprob
248945    +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
248946    +         %if "&vn" ne "." %then %do;
248947    +           VN
248948    +         %end;
248949    +         vprob
248950    +       %end;
248951    +       %if &raseexists %then %do;
248952    +            RASE
248953    +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
248954    +              VRASE
248955    +            %end;
248956    +       %end;
248957    +       ;
248958    +     run;
248959    +     title10;
248960    +  %end;
248962    +  /* create plots that are done during training of node */
248963    +  /* display iterative plot, including reference line */
248964    +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
248965    +   /* %if &nleaves eq  %then %do; */
248966    +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
248967    +      data _null_;
248968    +        set &EM_USER_OUTTOPOLOGY end=eof;
248969    +        if eof then do;
248970    +          call symput('nleaves', LEAF);
248971    +        end;
248972    +      run;
248973    +   /* %end; */
248975    +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
248976    +    /*%EM_REPORT(view=1, Y=_ASE_); */
248977    +  %end;
248979    +  /* display leaf statistics */
248980    +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
248982    +  /* stats by node if multiple targets = Y */
248983    +  %EM_GETNAME(key=OUTSTATS, type=DATA);
248984    +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
248985    +    data &EM_USER_OUTSTATS;
248986    +      set &EM_USER_OUTSTATS;
248988    +     * if STATNAME="TARGET" then delete;
248989    +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
248990    +      drop leaf;
248991    +    run;
248992    +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
248994    +  %end;
248995    +  %else %do;
248996    +    /* add outstats and outdescribe to spk but not results */
248997    +    %EM_REPORT(viewtype=, key=OUTSTATS);
248998    +  %end;
249000    +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree4_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS1.Tree4_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree4_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.TREE4_OUTIMPORT.
NOTE: The data set EMWS1.TREE4_OUTIMPORT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Variable Importance";
MPRINT(EM_TREE_REPORT):   proc print data=EMWS1.Tree4_OUTIMPORT (where=(nrules>0)) label noobs ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.TREE4_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 136.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_ ;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree4_OUTSEQ (obs=2) end=eof ;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vase" , strip(put(_VASE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_seq" , strip(put(_SEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vseq" , strip(put(_VSEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_prior" , strip(put(_PASE_, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE4_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS1.Tree4_OUTSEQ;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree4_OUTSEQ;
MPRINT(EM_TREE_REPORT):   format _ASE_ _ASSESS_ _MAX_ _SSE_ _RASE_ 15.4
MPRINT(EM_TREE_REPORT):   _MISC_ 15.4 _VASE_ _VASSESS_ _VMAX_ _VSSE_ _VRASE_ 15.4
MPRINT(EM_TREE_REPORT):   _VMISC_ 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 168 observations read from the data set EMWS1.TREE4_OUTSEQ.
NOTE: The data set EMWS1.TREE4_OUTSEQ has 168 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Ids_Attrition_Flag_DM(where=(_TYPE_="PREDICTED" AND LEVEL="1"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predTarget', strip(VARIABLE));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predLvl', strip(LEVEL));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_ATTRITION_FLAG_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree4_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 55 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 55 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree4_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 55 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 55 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 55 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 55 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 55 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 55 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   merge belowtext belowtext2(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then belowtext=belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 55 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 55 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 55 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree4_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 101 observations read from the data set EMWS1.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 101 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 101 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 101 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set abovetext(rename=(node=parent));
MPRINT(EM_TREE_MAKEPLOTDS):   by parent numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   retain abovetext tempstring flag branch origval origchar ;
MPRINT(EM_TREE_MAKEPLOTDS):   length abovetext $256;
MPRINT(EM_TREE_MAKEPLOTDS):   length tempstring origchar $64;
MPRINT(EM_TREE_MAKEPLOTDS):   if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent AND last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value,0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 0;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag=1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   keep parent branch abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 101 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 109 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree4_OUTRULES;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_TREE_MAKEPLOTDS):   rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 3338 observations read from the data set EMWS1.TREE4_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 55 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 109 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 109 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 55 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 55 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS1.Tree4_OUTNODES out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 111 observations read from the data set EMWS1.TREE4_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 111 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   length traintotal validtotal 8;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ^MISSING(abovetext) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= strip(abovetext)||" Or Missing";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = " Missing Values Only";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if MISSING(abovetext) then abovetext="Non-Missing Values";
MPRINT(EM_TREE_MAKEPLOTDS):   if node=1 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   traintotal = N;
MPRINT(EM_TREE_MAKEPLOTDS):   validtotal=VN;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop role rank stat misschar belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 109 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 111 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 55 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 111 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 111 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 111 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 55 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 55 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 111 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 55 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 111 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_ ;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree4_OUTSTATS(where=(STATNAME="NPRIORS")) end=eof ;
MPRINT(EM_TREE_MAKEPLOTDS):   if eof then do ;
MPRINT(EM_TREE_MAKEPLOTDS):   call symput("npriors" , strip(put(_N_,best.))) ;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE4_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptarmeta;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree4_VariableSet(where=(ROLE='TARGET' AND LEVEL^='ORDINAL' AND USE in ('D', 'Y') ));
MPRINT(EM_TREE_MAKEPLOTDS):   length TARGET $32;
MPRINT(EM_TREE_MAKEPLOTDS):   Target=name;
MPRINT(EM_TREE_MAKEPLOTDS):   keep target level;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree4_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   length target $32 tarlevel $10;
MPRINT(EM_TREE_MAKEPLOTDS):   target=
MPRINT(EM_TREE_MAKEPLOTDS):  "Attrition_Flag";
MPRINT(EM_TREE_MAKEPLOTDS):   tarlevel=
MPRINT(EM_TREE_MAKEPLOTDS):  "BINARY";
MPRINT(EM_TREE_MAKEPLOTDS):   keep node target tarlevel;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 777 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 777 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused nodupkey;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 777 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 666 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 111 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS1.Tree4_OUTSTATS out=tempoutstats;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 777 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 777 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempinterval tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutstats temptargetused( rename=(target=targetused));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel="INTERVAL" then output tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   else output tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 777 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 111 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 777 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_intNobs from tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_classNobs from tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 777 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 777 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET ) tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY )
temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
MPRINT(EM_TREE_MAKEPLOTDS):   set tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="N") OR (statname="VALID: N")) then output tempn;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PREDICTION" then output temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PROBABILITY" then output tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="VALID: PROBABILITY" then output tempvprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 777 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 222 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 111 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 222 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 222 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_profitflag from tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_lossflag from temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempn out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 222 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 111 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob tempvprob(rename=(statvalue=vstatvalue));
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 222 observations read from the data set WORK.TEMPPROB.
NOTE: There were 222 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 222 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob temppredict(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   percentCorrect = statvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   vpercentCorrect= vstatvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   label percentCorrect= "Percent Correct" vpercentCorrect= "Valid Percent Correct" ;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(percentCorrect) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   drop target;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 222 observations read from the data set WORK.TEMPPROB.
NOTE: There were 111 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 111 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep= node probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   length probtext $800;
MPRINT(EM_TREE_MAKEPLOTDS):   retain probtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 222 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 111 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 111 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 111 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS1.Tree4_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   length textall $800;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes temptargetused tempn temppredict tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   textall="";
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel^="INTERVAL" then do;
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Node Id: "||"09"x||strip(Node);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Statistic "||"09"x||"Train" ||"09"x|| "Validation";
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||strip(probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||" Count: "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
MPRINT(EM_TREE_MAKEPLOTDS):   nodecolor=percentcorrect;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop CATEGORY PROBTEXT TARGET TARLEVEL STATVALUE VSTATVALUE ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 111 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 111 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 111 observations read from the data set WORK.TEMPN.
NOTE: There were 111 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 111 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE4_TREE_PLOT has 111 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep=node statname statvalue rename=(statvalue=P_Attrition_Flag1));
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS1.Tree4_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="PROBABILITY" or statname="VALID: PROBABILITY" ) AND (CATEGORY="1") );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 777 observations read from the data set EMWS1.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 222 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 222 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 222 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=P_Attrition_Flag1 VALID__PROBABILITY=V_Attrition_Flag1));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 222 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 111 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 111 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 111 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 111 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 111 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 111 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by descending P_Attrition_Flag1;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 111 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 111 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempnodes(where=(leaf ne . ));
MPRINT(EM_TREE_MAKEPLOTDS):   tprob=round(P_Attrition_Flag1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_train=round(tprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_train=round((n/traintotal)*100, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   vprob=round(V_Attrition_Flag1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_valid=round(vprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_valid=round((vn/validtotal)*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   index=_N_;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node index tprob perc_train percevent_train vprob percevent_valid perc_valid ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 1289:94    1 at 1293:102   1 at 1293:113
NOTE: There were 56 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 56 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 56 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 56 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS1.Tree4_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   merge EMWS1.Tree4_TREE_PLOT tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(node) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = compbl(abovetext);
MPRINT(EM_TREE_MAKEPLOTDS):   label textall = "All Text" parent = "Parent Id" node = "Node Id" abovetext = "Above Text" traintotal = "Train Total" nodecolor =
MPRINT(EM_TREE_MAKEPLOTDS):   "Node Color" tprob = "Training Percent 1" percevent_train = "Event Percentage" perc_train = "Percent Cases" index = "Index" validtotal = "Valid Total" VN =
MPRINT(EM_TREE_MAKEPLOTDS):   "Valid: Number of Observations" vprob = "Validation Percent 1" perc_valid = "Valid: Percent Cases" percevent_valid = "Valid: Event Percentage" ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 111 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: There were 56 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE4_TREE_PLOT has 111 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEPLOTDS):   delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
MPRINT(EM_TREE_REPORT):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DTree";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "TREE";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "ABOVETEXT";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "BELOWTEXT";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "LINKWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56482170408816;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Icicle";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ICICLE";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24387430923239;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "AREABAR";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "VARWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "PERCEVENT_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "PERC_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.04853125477606;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   proc sort data=EMWS1.Tree4_TREE_PLOT out=t;
MPRINT(EM_TREE_REPORT):   by descending N;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 111 observations read from the data set EMWS1.TREE4_TREE_PLOT.
NOTE: The data set WORK.T has 111 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set t (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput("vn", strip(put(vn, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data t;
MPRINT(EM_TREE_REPORT):   set t;
MPRINT(EM_TREE_REPORT):   label N= "Training Observations" DEPTH=
MPRINT(EM_TREE_REPORT):   "Depth" VN=
MPRINT(EM_TREE_REPORT):   "Validation Observations" ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 111 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 111 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Tree Leaf Report";
MPRINT(EM_TREE_REPORT):   proc print data=t noobs label;
MPRINT(EM_TREE_REPORT):   where tprob ne .;
MPRINT(EM_TREE_REPORT):   var node depth N tprob VN vprob ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 56 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 137.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS1.Tree4_OUTTOPOLOGY end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput('nleaves', LEAF);
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 111 observations read from the data set EMWS1.TREE4_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSEQ";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "ITERATIONPLOT";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SUBTREE";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_NW_";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "56";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08401187746041;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "RESPONSEBAR";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "INDEX ne .";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "LEAFSTATS";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "INDEX";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "tprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "vprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSTATS";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.67190147734801;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Tree4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
249001
249002     *------------------------------------------------------------*;
249003     * End REPORT: Tree4;
249004     *------------------------------------------------------------*;
 
249005     /* Reset EM Options */
249006     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
249007     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
249008     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
249009     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
249010     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
249011     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
249012     proc sort data=EMWS1.Part2_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Part2_CMeta_TRAIN out=WORK.SUBSETINMETA;
249013     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
249014     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.PART2_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
249015     proc sort data=EMWS1.Tree4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
249016     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
249017     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.TREE4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
249018     data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
249019     merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
249020     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
249021     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
249022     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
249023     set EMWS1.Tree4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_CMeta_TRAIN;
249024     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
249025     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
249026     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
249027     set EMWS1.Tree4_TRAIN(keep=
249028     F_Attrition_Flag
249029     I_Attrition_Flag
249030     P_Attrition_Flag0
249031     P_Attrition_Flag1
249032     Q_Attrition_Flag0
249033     Q_Attrition_Flag1
249034     R_Attrition_Flag0
249035     R_Attrition_Flag1
249036     U_Attrition_Flag
249037     V_Attrition_Flag0
249038     V_Attrition_Flag1
249039     _WARN_
249040     Attrition_Flag
249041     );
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_TRAIN(keep= F_Attrition_Flag I_Attrition_Flag P_Attrition_Flag0 P_Attrition_Flag1 Q_Attrition_Flag0 Q_Attrition_Flag1 R_Attrition_Flag0 R_Attrition_Flag1 U_Attrition_Flag V_Attrition_Flag0 V_Attrition_Flag1 _WARN_
Attrition_Flag );
249042     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
 
NOTE: There were 7088 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 7088 observations read from the data set EMWS1.TREE4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 7088 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Attrition_Flag*F_Attrition_Flag / out = WORK.Tree4_3A3CSDQ nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree4_3A3CSDQ;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree4_3A3CSDQ(rename=(F_Attrition_Flag=FROM I_Attrition_Flag=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "Attrition_Flag";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree4_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree4_3A3CSDQ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree4_3A3CSDQ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Attrition_Flag ;
 
MPRINT(EM_ASSESS):   VAR P_Attrition_Flag1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Attrition_Flag1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Attrition_Flag P_Attrition_Flag1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Attrition_Flag ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Attrition_Flag1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Attrition_Flag1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 -
EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1606941309 _NEVENTS 1139 _NNONEVENTS 5949 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 7088));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Attrition_Flag1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Attrition_Flag1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Attrition_Flag1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Attrition_Flag1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 7088 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (7088/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 7088)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 7088/20) ) / ( AVGNUMRESP / (7088/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 7088 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 7088 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 7088/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 7088/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 7088;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
253323     data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
253324     set EMWS1.Tree4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_CMeta_TRAIN;
253325     where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
253325   ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
253326     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
253327     data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
253328     set EMWS1.Tree4_VALIDATE(keep=
253329     F_Attrition_Flag
253330     I_Attrition_Flag
253331     P_Attrition_Flag0
253332     P_Attrition_Flag1
253333     Q_Attrition_Flag0
253334     Q_Attrition_Flag1
253335     R_Attrition_Flag0
253336     R_Attrition_Flag1
253337     U_Attrition_Flag
253338     V_Attrition_Flag0
253339     V_Attrition_Flag1
253340     _WARN_
253341     Attrition_Flag
253342     );
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_VALIDATE(keep= F_Attrition_Flag I_Attrition_Flag
P_Attrition_Flag0 P_Attrition_Flag1 Q_Attrition_Flag0 Q_Attrition_Flag1 R_Attrition_Flag0
R_Attrition_Flag1 U_Attrition_Flag V_Attrition_Flag0 V_Attrition_Flag1 _WARN_ Attrition_Flag );
253343     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS1.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: There were 2025 observations read from the data set EMWS1.PART2_VALIDATE.
NOTE: There were 2025 observations read from the data set EMWS1.TREE4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2025 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_Attrition_Flag*F_Attrition_Flag / out = WORK.Tree4_16A550D nocol
norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree4_16A550D;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree4_16A550D(rename=(F_Attrition_Flag=FROM
I_Attrition_Flag=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "Attrition_Flag";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree4_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMCLASSIFICATION WORK.Tree4_16A550D;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree4_16A550D;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_Attrition_Flag_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_Attrition_Flag ;
 
MPRINT(EM_ASSESS):   VAR P_Attrition_Flag1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_Attrition_Flag") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_Attrition_Flag1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_Attrition_Flag P_Attrition_Flag1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_Attrition_Flag ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_Attrition_Flag1 NTARGET _tmpfreqvar_
WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_Attrition_Flag1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1604938272 _NEVENTS
325 _NNONEVENTS 1700 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2025));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_Attrition_Flag1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_Attrition_Flag1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_Attrition_Flag1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_Attrition_Flag1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_Attrition_Flag1 *
_FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_Attrition_Flag1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2025 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(2025/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2025)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2025/20) ) / (
AVGNUMRESP / (2025/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2025 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2025 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2025/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 2025/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2025;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "Attrition_Flag";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
257633     %let _cn = %sysfunc(getoption(CENTER));
257634     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
257635     proc print data=EMWS1.Tree4_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree4_EMREPORTFIT noobs label;
257636     var STAT LABEL TRAIN
257637     VALIDATE
257638     TEST
257639     ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
257640     by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
257641     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
257642     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
257643     run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 138.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
257644     title10;
MPRINT(EM_DIAGRAM):   title10;
257645     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
257646     proc sort data=EMWS1.Tree4_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Tree4_EMCLASSIFICATION nothreads;
257647     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
257648     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE4_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
257649     %let _cn = %sysfunc(getoption(CENTER));
257650     options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
257651     proc print data=EMWS1.Tree4_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree4_EMCLASSIFICATION noobs label;
257652     var from into pct_row pct_col count percent
257653     ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
257654     by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
257655     label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
257656     label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
257657     label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
257658     label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
257659     label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
257660     label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
257661     where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
257662     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
257663     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
257664     run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE4_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 139.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
257665     title9;
MPRINT(EM_DIAGRAM):   title9;
257666     title10;
MPRINT(EM_DIAGRAM):   title10;
257667     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
257668     %let _cn = %sysfunc(getoption(CENTER));
257669     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
257670     data EMWS1.Tree4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree4_EMEVENTREPORT;
257671     length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
257671   ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
257672     label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
257672   !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
257672   ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
257672   ! FALSEEVENT
257673     = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
257673   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
257673   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
257674        "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
257675     FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
257676     FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
257677     TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
257678     TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
257679     set EMWS1.Tree4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree4_EMEVENTREPORT;
257680     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE4_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE4_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
257681     proc print data=EMWS1.Tree4_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree4_EMEVENTREPORT noobs label;
257682     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
257683     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
257684     by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
257685     run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE4_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 140.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
257686     title10;
MPRINT(EM_DIAGRAM):   title10;
257687     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
257688     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
257689     modify Tree4_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree4_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
257690     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
257691     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
257691   ! ;
MPRINT(EM_DIAGRAM):   run;
257692     run;
 
NOTE: MODIFY was successful for EMWS1.TREE4_EMRANK.DATA.
257693     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
257694     %let _cn = %sysfunc(getoption(CENTER));
257695     options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
257696     proc print data=EMWS1.Tree4_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree4_EMRANK label noobs;
257697     var
257698     decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
257699     by
257700     notsorted DATAROLE
257701     notsorted TARGET
257702     notsorted TARGETLABEL
257703     ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
257704     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
257705     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
257706     run;
 
NOTE: There were 40 observations read from the data set EMWS1.TREE4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 141.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
257707     title10;
MPRINT(EM_DIAGRAM):   title10;
257708     options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
257709     proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
257710     modify Tree4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
257711     label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
257711   ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
257712     label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
257712   ! ;
MPRINT(EM_DIAGRAM):   run;
257713     run;
 
NOTE: MODIFY was successful for EMWS1.TREE4_EMSCOREDIST.DATA.
257714     quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Tree4_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "Attrition_Flag" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
